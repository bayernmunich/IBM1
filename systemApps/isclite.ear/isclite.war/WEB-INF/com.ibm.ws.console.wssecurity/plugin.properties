wssecurity.algorithmhelper.algorithmlist.exception=Exception occurred while retrieving algorithm list from the WebServicesSecurityAlgorithmHelper MBean
wssecurity.algorithmhelper.mbean.exception=Cannot find WebServicesSecurityAlgorithmHelper MBean. The exception is {0}.
wssecurity.algorithmhelper.nombean.error=The server cannot find the WebServicesSecurityAlgorithmHelper MBean.
wssecurity.file.load.exception=An exception occurred loading the resource {0}: {1}.
wssecurity.utils.nowssec=The ws-security.xml file was not available in the context {0}.


AlgorithmMapping.description=Specifies a list of URI algorithms for XML digital signature or XML encryption that are mapped to an algorithm factory engine class. Algorithm mappings enable service providers to plug in other cryptographic algorithms.
AlgorithmMapping.displayName=Algorithm mappings
AlgorithmMapping.factoryname.description=Specifies the class name of the algorithm factory engine implementation.
AlgorithmMapping.factoryname.displayName=Algorithm factory engine class
AlgorithmURI.algorithm.description=Specifies the algorithm URI for the selected type.
AlgorithmURI.algorithm.displayName=Algorithm URI
AlgorithmURI.description=Specifies the algorithm URI for XML digital signature or XML encryption.
AlgorithmURI.displayName=Algorithm URI
AlgorithmURI.type.description=Specifies the usage type of this algorithm.
AlgorithmURI.type.displayName=Algorithm type
AlgorithmUri.type.DATAENC=Data encryption
AlgorithmUri.type.DIGEST=Message digest
AlgorithmUri.type.KEYENC=Key encryption
AlgorithmUri.type.SIG=Signature
CRL.description=Specifies a list of certificate revocations to check the validity of the certificate.
CRL.displayName=Certificate revocation list
CRL.path.description=Specifies the path to the certificate revocation list file.
CRL.path.displayName=Certificate revocation list path
CallbackHandler.IDAssertion.displayName=Identity assertion
CallbackHandler.basicAuth.displayName=Basic authentication
CallbackHandler.basicAuthID.description=Specifies the default user ID that is passed to the constructor of the callback handler.
CallbackHandler.basicAuthID.displayName=User ID
CallbackHandler.basicAuthPwd.description=Specifies the default password that is passed to the constructor of the callback handler.
CallbackHandler.basicAuthPwd.displayName=Password
CallbackHandler.classname.description=Specifies the name of the callback handler implementation class. The callback handler must implement the javax.security.auth.callback.CallbackHandler class.
CallbackHandler.classname.displayName=Callback handler class name
CallbackHandler.description=Specifies the parameters for the callback handler that are used for generating the token. Because you can plug in a custom callback handler, you must specify the implementation class name. The application server provides options for identity assertion, basic authentication, and the keystore that are passed to the callback handler implementation.
CallbackHandler.displayName=Callback handler
CallbackHandler.useIDAssertion.description=Explicitly declares the use of the identity assertion in the token generator component.
CallbackHandler.useIDAssertion.displayName=Use identity assertion
CallbackHandler.useRunAs.description=Explicitly declares the use of the RunAs identity assertion in the token generator component.
CallbackHandler.useRunAs.displayName=Use RunAs identity
CollectionCertStore.description=Specifies a list of untrusted, intermediate certificate files. This collection certificate store is used for certificate path validation of incoming X.509-formatted security tokens. The root-trusted certificates are specified in the Trust anchors panel.
CollectionCertStore.displayName=Collection certificate store
CollectionCertStore.name.description=Specifies the unique name of the certificate store.
CollectionCertStore.name.displayName=Certificate store name
CollectionCertStore.provider.description=Specifies the provider name of the certificate store implementation.
CollectionCertStore.provider.displayName=Certificate store provider
DigestMethod.algorithm.description=Specifies the cryptographic algorithm that is used to generate the message digest.
DigestMethod.algorithm.displayName=Digest method algorithm
DigestMethod.properties.description=Specifies additional properties for the configuration.
DigestMethod.properties.displayName=Digest method properties
EncryptionInfo.dataAlgorithm.description=Specifies the algorithm URI of the data encryption method.
EncryptionInfo.dataAlgorithm.displayName=Data encryption algorithm
EncryptionInfo.dataAlgorithmProperties.description=Specifies additional properties for the configuration.
EncryptionInfo.dataAlgorithmProperties.displayName=Data encryption algorithm properties
EncryptionInfo.description=Specifies the configuration for the XML encryption and decryption parameters. If the data and key encryption algorithms are specified, the application server only accepts elements that are encrypted with those algorithms.
EncryptionInfo.displayName=Encryption information
EncryptionInfo.encryptionKeyInfo.displayName=Encryption key information
EncryptionInfo.keyAlgorithm.description=Specifies the algorithm URI of the key encryption method.
EncryptionInfo.keyAlgorithm.displayName=Key encryption algorithm
EncryptionInfo.keyAlgorithmProperties.description=Specifies additional properties for the configuration.
EncryptionInfo.keyAlgorithmProperties.displayName=Key encryption algorithm properties
EncryptionInfo.keyName.description=Specifies the name of the key. This name is resolved to the actual key that is being used by the specified key locator.
EncryptionInfo.keyName.displayName=Encryption key name
EncryptionInfo.keyReference.description=Specifies a reference to the name of the key locator that is being used.
EncryptionInfo.keyReference.displayName=Key locator reference
EncryptionInfo.name.description=Specifies the unique name for the encryption information.
EncryptionInfo.name.displayName=Encryption information name
EncryptionInfo.none=None
EncryptionInfo.specified=Dedicated encryption information
JAASConfig.configName.description=Specifies the name of the JAAS system or the name of the application login configuration.
JAASConfig.configName.displayName=JAAS configuration name
JAASConfig.description=Specifies the name of the JAAS configuration that is defined in the JAAS Login panel.
JAASConfig.displayName=JAAS configuration
KeyInfo.calcLocalName.description=Specifies the local name part of the Qname that represents the calculation method.
KeyInfo.calcLocalName.displayName=Local name
KeyInfo.calcMethod.displayName=Calculation method
KeyInfo.calcNamespaceURI.description=Specifies the namespace URI part of the Qname that represents the calculation method. This URI is needed when the key information type is Key identifier.
KeyInfo.calcNamespaceURI.displayName=Namespace URI
KeyInfo.classname.description=Specifies the name of the key information implementation class.
KeyInfo.classname.displayName=Key information class name
KeyInfo.description=Specifies the related configuration that is needed to generate the key for XML digital signature or XML encryption.
KeyInfo.displayName=Key information
KeyInfo.encLocalName.description=Specifies the local name part of the Qname that represents the encoding method.
KeyInfo.encLocalName.displayName=Local name
KeyInfo.encMethod.displayName=Encoding method
KeyInfo.encNamespaceURI.description=Specifies the name space URI part of the Qname that represents the encoding method. This URI is needed when the key information type is Key identifier.
KeyInfo.encNamespaceURI.displayName=Namespace URI
KeyInfo.name.description=Specifies the unique name that is used to identify the key information definition.
KeyInfo.name.displayName=Key information name
KeyInfo.type.EMB=Embedded token
KeyInfo.type.KEYID=Key identifier
KeyInfo.type.KEYNAME=Key name
KeyInfo.type.STRREF=Security token reference
KeyInfo.type.X509ISSUER=X509 issuer name and issuer serial
KeyInfo.type.description=Specifies the type of <KeyInfo> element.
KeyInfo.type.displayName=Key information type
KeyInfo.valueType.displayName=Value type
KeyInfo.vtLocalName.description=Specifies the local name part of the Qname that represents the value type.
KeyInfo.vtLocalName.displayName=Local name
KeyInfo.vtNamespaceURI.description=Specifies the namespace URI part of the Qname that represents the value type. This URI is needed when the key information type is Key identifier or Security token reference.
KeyInfo.vtNamespaceURI.displayName=Namespace URI
KeyInfoRef.description=References key information elements that are needed for encryption or signing.
KeyInfoRef.displayName=Key information reference
KeyInfoRef.keyinfoRef.description=Specifies the name of the <KeyInfo> element.
KeyInfoRef.keyinfoRef.displayName=Key information reference
KeyInfoRef.name.description=Specifies the unique name that is used to identify the key information reference.
KeyInfoRef.name.displayName=Name
KeyLocator.className.description=Specifies the name of the key locator implementation class. The key locator must implement the com.ibm.wsspi.wssecurity.config.KeyLocator class.
KeyLocator.className.displayName=Key locator class name
KeyLocator.description=Specifies a list of key locator configurations that retrieve the key for signature and encryption. You can customize a key locator class to retrieve keys from other types of repositories. The default implementation retrieves keys from a keystore.
KeyLocator.displayName=Key locators
KeyLocator.keystorePath.description=Specifies the path to the keystore file. This field is optional if the key locator does not use a keystore.
KeyLocator.keystorePath.displayName=Path
KeyLocator.keystorePwd.description=Specifies the password for the keystore file. This field is optional if the key locator does not use a keystore.
KeyLocator.keystorePwd.displayName=Password
KeyLocator.keystoreType.description=Specifies the type of keystore file. This field is optional if the key locator does not use a keystore.
KeyLocator.keystoreType.displayName=Type
KeyLocator.name.description=Specifies the unique name that is used to identify the key locator definition.
KeyLocator.name.displayName=Key locator name
KeyLocatorMapping.description=Specifies the mapping to the key locator element.
KeyLocatorMapping.displayName=Key locator mapping
KeyLocatorMapping.getKeys=Get keys
KeyLocatorMapping.keynameRef.description=Specifies the key name that is used in this <KeyInfo> element.
KeyLocatorMapping.keynameRef.displayName=Key name reference
KeyLocatorMapping.locatorRef.description=Specifies the name of the key locator that is used in this <KeyInfo> element.
KeyLocatorMapping.locatorRef.displayName=Key locator reference
KeyStore.displayName=Keystore
KeyStore.keyStoreConfigName.description=Specifies the name of the keystore configuration.
KeyStore.keyStoreConfigName.displayName=Keystore configuration name
KeyStore.noneButtonLabel.description=Specifies that no keystore is defined.
KeyStore.noneButtonLabel.displayName=None
KeyStore.orLabel.displayName=OR
KeyStore.path.description=Specifies the location of the keystore file.
KeyStore.path.displayName=Path
KeyStore.predefinedButtonLabel.description=Specifies that a predefined keystore be defined.
KeyStore.predefinedButtonLabel.displayName=Predefined keystore
KeyStore.storepass.description=Specifies the password for the keystore file.
KeyStore.storepass.displayName=Password
KeyStore.type.JCEKS=JCEKS
KeyStore.type.JCERACFKS=JCERACFKS
KeyStore.type.JKS=JKS
KeyStore.type.PKCS11KS=PKCS11KS (PKCS11)
KeyStore.type.PKCS12KS=PKCS12KS (PKCS12)
KeyStore.type.description=Specifies the type of keystore file that is JKS, JCEKS, PKCS11KS (PKCS11), or PKCS12KS (PKCS12).
KeyStore.type.displayName=Type
KeyStore.userDefinedButtonLabel.description=Specifies that a user-defined keystore be defined.
KeyStore.userDefinedButtonLabel.displayName=User-defined keystore
LDAPCertStore.description=Specifies the Lightweight Directory Access Protocol (LDAP) server that contains the untrusted, intermediate certificate entries. This LDAP server is used as the certificate store for the certificate path validation of incoming X.509-formatted security tokens.
LDAPCertStore.displayName=LDAP certificate store
LDAPCertStore.ldapPort.description=Specifies the port number for the Lightweight Directory Access Protocol (LDAP) server.
LDAPCertStore.ldapPort.displayName=LDAP port
LDAPCertStore.ldapProperties.description=Specifies additional properties for the Lightweight Directory Access Protocol (LDAP) server.
LDAPCertStore.ldapProperties.displayName=LDAP server properties
LDAPCertStore.ldapServer.description=Specifies the host name for the Lightweight Directory Access Protocol (LDAP) server.
LDAPCertStore.ldapServer.displayName=LDAP server
LDAPCertStore.name.description=Specifies the string label of the certificate store.
LDAPCertStore.name.displayName=Certificate store name
LDAPCertStore.provider.description=Specifies the provider name for the certificate store implementation.
LDAPCertStore.provider.displayName=Certificate store provider
LoginBinding.authMethod.basicAuth=Basic authentication
LoginBinding.authMethod.description=Specifies the method of authentication. You can use any string, but the string must match the <AuthMethod> element in the service-level configuration. The following four words are reserved and have special meanings: BasicAuth generates the <UsernameToken> element with both a user name and a password; IDAssertion generates the <UsernameToken> element only with a user name; Signature uses the distinguished name (DN) of the signer; and LTPA validates a token.
LoginBinding.authMethod.displayName=Authentication method
LoginBinding.authMethod.idAssertion=ID assertion
LoginBinding.authMethod.signature=Signature
LoginBinding.basicAuthID.description=Specifies the default user ID that is passed to the constructor of the callback handler.
LoginBinding.basicAuthID.displayName=Basic authentication user ID
LoginBinding.basicAuthPwd.description=Specifies the default password that is passed to the constructor of the callback handler.
LoginBinding.basicAuthPwd.displayName=Basic authentication password
LoginBinding.callbackHandler.description=Specifies the name of the callback handler implementation class. This value must implement the javax.security.auth.callback.CallbackHandler interface and must have a constructor whose signature is (String defaultId, char[] defaultPass, java.util.Map properties).
LoginBinding.callbackHandler.displayName=Callback handler
LoginBinding.dedicated.description=Specifies the configuration that is used by the sender to generate security tokens in the message. Four predefined authentication methods are available: BasicAuth generates the <UsernameToken> element with both a user name and a password; ID assertion generates the <UsernameToken> element only with a user name; Signature uses the distinguished name (DN) of the signer; and LTPA uses the <BinarySecurityToken> element from the invocation credential or generates the token from BasicAuth data. You also can define a custom authentication method.
LoginBinding.description=Specifies the configuration that is used for sending the security tokens within the messages.
LoginBinding.displayName=Login binding
LoginBinding.name.description=Specifies the string label for the login binding.
LoginBinding.name.displayName=Login binding name
LoginBinding.none=None
LoginBinding.specified=Dedicated login binding
LoginBinding.tokenTypeName.description=Specifies the local name that denotes the type of security token accepted. If binary security tokens are accepted, the value denotes the valueType attribute in the <BinarySecurityToken> element. If XML tokens are accepted, the value denotes the top-level element name of the XML token. If the reserved words are specified in the Authentication method field that is previously defined, this field is ignored.
LoginBinding.tokenTypeName.displayName=Token type local name
LoginBinding.tokenTypeURI.description=Specifies the namespace URI that denotes the type of the security token that is accepted. If binary security tokens are accepted, the value denotes the valueType attribute in the <BinarySecurityToken> element. If XML tokens are accepted, the value denotes the top-level element name of the XML token. If the reserved words are specified in the Authentication method field that is previously defined, this field is ignored.
LoginBinding.tokenTypeURI.displayName=Token type URI
LoginMapping.authMethod.description=Specifies the method that is used for authentication. You can use any string, but the string must match the <AuthMethod> element in the server-level configuration. The following words are reserved and have special meanings: BasicAuth generates the <UsernameToken> element with both a user name and a password; IDAssertion generates the <UsernameToken> element only with a user name; Signature uses the distinguished name (DN) of the signer; and LTPA validates a token.
LoginMapping.authMethod.displayName=Authentication method
LoginMapping.callbackClassName.description=Specifies the name of the callback handler factory implementation class. This value implements the com.ibm.wsspi.wssecurity.auth.callback.CallbackHandlerFactory class.
LoginMapping.callbackClassName.displayName=Callback handler factory class name
LoginMapping.callbackProperties.description=Specifies additional properties for the callback handler factory.
LoginMapping.callbackProperties.displayName=Callback handler factory properties
LoginMapping.configName.description=Specifies the name of the Java(TM) Authentication and Authorization Service (JAAS) login configuration.
LoginMapping.configName.displayName=JAAS configuration name
LoginMapping.description=Specifies a list of configurations for validating security tokens within incoming messages.
LoginMapping.displayName=Login mappings
LoginMapping.makeSoapAvailable.description=Description
LoginMapping.makeSoapAvailable.displayName=Make SOAP message available
LoginMapping.name.description=Specifies the string label for the login mapping.
LoginMapping.name.displayName=Login mapping name
LoginMapping.nonceClockSkew.description=Specifies the clock skew value to consider when the application server checks the currency of the message. Nonce is a randomly generated value.
LoginMapping.nonceClockSkew.displayName=Nonce clock skew
LoginMapping.nonceMaxAge.description=Specifies the time before the nonce time stamp expires. Nonce is a randomly generated value.
LoginMapping.nonceMaxAge.displayName=Nonce maximum age
LoginMapping.tokenTypeName.description=Specifies the local name that denotes the type of the security token that is accepted. If binary security tokens are accepted, the value denotes the valueType attribute in the <BinarySecurityToken> element. If XML tokens are accepted, the value denotes the top-level element name of the XML token. If the reserved words are specified in the Authentication method field that is previously defined, this field is ignored.
LoginMapping.tokenTypeName.displayName=Token type local name
LoginMapping.tokenTypeURI.description=Specifies the namespace URI, which denotes the type of security token that is accepted. If binary security tokens are accepted, the value denotes the valueType attribute in the <BinarySecurityToken> element. If XML tokens are accepted, the value denotes the top-level element name of the XML token. If the reserved words are specified in the Authentication method field that is previously defined, this field is ignored.
LoginMapping.tokenTypeURI.displayName=Token type URI
PartReference.description=Specifies a reference to the message parts for XML digital signature and XML encryption that are defined in the deployment descriptors. In addition, the digest method can be specified for the message parts.
PartReference.displayName=Part references
PartReference.name.description=Specifies the unique name that is used to identify the reference definition.
PartReference.name.displayName=Part name
PartReference.part.description=Refers to the message part for signature or encryption in the deployment descriptors.
PartReference.part.displayName=Part reference name
RequestConsumer.description=Specifies the binding configuration for the request consumer. You can define how to process the security requirements and the constraints that are defined in the deployment descriptor. If you do not define the binding, the application server uses the default binding at either the server level or the cell level.
RequestConsumer.displayName=Request consumer (receiver) binding
RequestGenerator.description=Specifies the binding configuration for the request generator. You can define how to process the security requirements and the constraints that are defined in the deployment descriptor. If you do not define the binding, the application server uses the default binding at either the server level or the cell level.
RequestGenerator.displayName=Request generator (sender) binding
RequestNamespace.description=Specifies the namespace that is used by Web Services Security to send a request. However, this field configures only the name space value and does not enforce the semantics of the specification that is related to the namespace. Web Services Security uses the processing semantic only in draft 13 of the OASIS specification.
RequestNamespace.displayName=Web Services Security namespace
RequestReceiver.description=Specifies the binding configuration to receive request messages for Web Services Security.
RequestReceiver.displayName=Request receiver binding
RequestSender.description=Specifies the binding configuration to send request messages for Web Services Security.
RequestSender.displayName=Request sender binding
ResponseConsumer.description=Specifies the binding configuration for the response consumer. You can define how to process the security requirements and the constraints that are defined in the deployment descriptor. If you do not define the binding, the application server uses the default binding at either the server level or the cell level.
ResponseConsumer.displayName=Response consumer (receiver) binding
ResponseGenerator.description=Specifies the binding configuration for the response generator. You can define how to process the security requirements and the constraints that are defined in the deployment descriptor. If you do not define the binding, the application server uses the default binding at either the server level or the cell level.
ResponseGenerator.displayName=Response generator (sender) binding
ResponseReceiver.description=Specifies the binding configuration to receive response messages for Web Services Security.
ResponseReceiver.displayName=Response receiver binding
ResponseSender.description=Specifies the binding configuration to send response messages for Web Services Security.
ResponseSender.displayName=Response sender binding
SSLConfigAlias.description=Collection of Secure Sockets Layer (SSL) configuration definitions for this cell.  One of these definitions can be used as the specific SSL configuration for this web service port.
SSLConfigAlias.displayName=Specific SSL configurations - cell level
SSLManagedTreeLink.description=Browse the centrally-managed SSL configuration tree.
SSLManagedTreeLink.displayName=View centrally managed SSL tree
SigningInfo.6X.description=Specifies the configuration for the signing parameters.
SigningInfo.any=Trust any
SigningInfo.canonMethod.description=Specifies the algorithm URI of the canonicalization method.
SigningInfo.canonMethod.displayName=Canonicalization method
SigningInfo.canonMethodProperties.description=Specifies additional properties for the configuration.
SigningInfo.canonMethodProperties.displayName=Canonicalization method properties
SigningInfo.certificatePath.description=Specifies the settings for the certificate path validation. When the Trust any option is specified, this validation is skipped and all of the incoming certificates are trusted.
SigningInfo.certificatePath.displayName=Certificate path
SigningInfo.certificateStore.description=Specifies a reference to the name of the certificate store.
SigningInfo.certificateStore.displayName=Certificate store
SigningInfo.description=Specifies the configuration for the signing parameters. You also can use these parameters for X.509 certificate validation when the authentication method is IDAssertion and the ID type is X509Certificate in the server-level configuration. In such cases, only fill in the Certificate path field.
SigningInfo.digestMethod.description=Specifies the algorithm URI of the digest method.
SigningInfo.digestMethod.displayName=Digest method
SigningInfo.displayName=Signing information
SigningInfo.keyInfoSignatureType.description=Specifies the type of signature. The type of signature specifies how to sign the key that is used for signature or encryption.
SigningInfo.keyInfoSignatureType.displayName=Key information signature type
SigningInfo.keyInfoSignatureType.keyinfo=keyinfo
SigningInfo.keyInfoSignatureType.keyinfoChildelements=keyinfochildelements
SigningInfo.keyInfoSignatureTypeProperties.description=Specifies additional properties for the configuration.
SigningInfo.keyInfoSignatureTypeProperties.displayName=Key information signature properties
SigningInfo.method.description=Specifies the algorithm URI of the signature method.
SigningInfo.method.displayName=Signature method
SigningInfo.methodProperties.description=Specifies additional properties for the signature algorithm.
SigningInfo.methodProperties.displayName=Signature method properties
SigningInfo.name.description=Specifies the unique name for the signing information.
SigningInfo.name.displayName=Signing information name
SigningInfo.none=None
SigningInfo.signingKey.description=Specifies the key information that is used for signing.
SigningInfo.signingKey.displayName=Signing key
SigningInfo.signingKeyInfo.displayName=Signing key information
SigningInfo.signingKeyName.description=Specifies the string label of the key. This name is resolved to the actual key by the specified key locator.
SigningInfo.signingKeyName.displayName=Key name
SigningInfo.signingKeyRef.description=Specifies the reference to the name of the key locator.
SigningInfo.signingKeyRef.displayName=Key locator reference
SigningInfo.specified=Dedicated signing information
SigningInfo.trustAnchor=Trust anchor
SigningInfo.trustAnchor.description=Specifies a reference to the name of the trust anchor.
SigningInfo.trustAnchor.displayName=Trust anchor
TokenConsumer.classname.description=Specifies the name of the token consumer implementation class. The token consumer must implement the com.ibm.wsspi.wssecurity.token.TokenConsumerComponent class.
TokenConsumer.classname.displayName=Token consumer class name
TokenConsumer.description=Specifies the parameters for the token consumer. The information is used only on the consumer side to process the security token. Because you can plug in a custom token consumer, you must specify a Java(TM) class name.
TokenConsumer.displayName=Token consumers
TokenConsumer.name.description=Specifies the unique name that is used to identify the token consumer definition.
TokenConsumer.name.displayName=Token consumer name
TokenConsumer.usernameToken.displayName=Username token
TokenConsumer.verifyNonce.description=Specifies the processing verification of the nonce.
TokenConsumer.verifyNonce.displayName=Verify nonce
TokenConsumer.verifyTimestamp.description=Specifies the processing verification of the timestamp.
TokenConsumer.verifyTimestamp.displayName=Verify timestamp
TokenGenerator.addNonce.description=Specifies to add <Nonce> under the <UsernameToken> element in the UsernameTokenGenerator.
TokenGenerator.addNonce.displayName=Add nonce
TokenGenerator.addTimestamp.description=Specifies to add <Created> under the <UsernameToken> element in the UsernameTokenGenerator.
TokenGenerator.addTimestamp.displayName=Add timestamp
TokenGenerator.classname.description=Specifies the name of the token generator implementation class. The token generator must implement the com.ibm.wsspi.wssecurity.token.TokenGeneratorComponent class.
TokenGenerator.classname.displayName=Token generator class name
TokenGenerator.description=Specifies the parameters for the token generator. The information is used only on the generator side to generate the security token. Because you can plug in a custom token generator, you must specify a Java(TM) class name.
TokenGenerator.displayName=Token generators
TokenGenerator.name.description=Specifies the unique name that is used to identify the token generator definition.
TokenGenerator.name.displayName=Token generator name
TokenGenerator.usernameExp.description=Specifies the expiration date of the username token.
TokenGenerator.usernameExp.displayName=User name expiration
TokenGenerator.usernameToken.displayName=Username token
TokenReference.description=Specifies references to either TokenConsumer or TokenGenerator.
TokenReference.displayName=Key token
TokenReference.name.description=Specifies the name of the token reference that is used in this <KeyInfo> element.
TokenReference.name.displayName=Token reference name
TokenReference.tokenRef.description=Refers to the name of either the token generator for generating the token or the token consumer.
TokenReference.tokenRef.displayName=Token reference
Transform.algorithm.description=Specifies the algorithm of the transform.
Transform.algorithm.displayName=Transform algorithm
Transform.description=Specifies the transform algorithm that is used for processing parts of the message. These message parts are specified in the Part references panel.
Transform.displayName=Transforms
Transform.name.description=Specifies the unique name that is used to identify the transform definition.
Transform.name.displayName=Transform name
TrustAnchor.description=Specifies a list of keystore configurations that contain root-trusted certificates. These configurations are used for certificate path validation of the incoming X.509-formatted security tokens. You must create the keystore using the key tool utility. Do not use the key management utility because it does not create a keystore with the expected format.
TrustAnchor.displayName=Trust anchors
TrustAnchor.keystorePath.description=Specifies the location of the keystore file.
TrustAnchor.keystorePath.displayName=Keystore path
TrustAnchor.keystoreType.description=Specifies the type of keystore file.
TrustAnchor.keystoreType.displayName=Keystore type
TrustAnchor.name.description=Specifies the unique name that is used to identify a trust anchor.
TrustAnchor.name.displayName=Trust anchor name
TrustedIDEvaluator.className.description=Specifies the name of the implementation class for the trusted ID evaluator. The trusted ID evaluator must implement the com.ibm.wsspi.wssecurity.id.TrustedIDEvaluator class.
TrustedIDEvaluator.className.displayName=Trusted ID evaluator class name
TrustedIDEvaluator.description=Specifies a list of trusted identity (ID) evaluators that determine whether the identity-asserting authority is trusted. You can use trusted ID evaluators for backward compatibility with Version 5 applications. However, it is recommended that you use a login module instead.
TrustedIDEvaluator.displayName=Trusted ID evaluators
TrustedIDEvaluator.existing=Existing evaluator definition
TrustedIDEvaluator.existing.select=Select the trusted ID evaluator
TrustedIDEvaluator.name.description=Specifies the unique name that is used to identify a trusted ID evaluator configuration.
TrustedIDEvaluator.name.displayName=Trusted ID evaluator name
TrustedIDEvaluator.none=None
TrustedIDEvaluator.reference.description=Specifies the name of the Trusted ID evaluator that is used.
TrustedIDEvaluator.reference.displayName=Trusted ID evaluator reference
TrustedIDEvaluator.specified=Binding evaluator definition
ValueType.description=Specifies the unique type identifier of the token.
ValueType.displayName=Value type
ValueType.localName.description=Specifies the local name of the token.
ValueType.localName.displayName=Local name
ValueType.name.description=Specifies the name of the valueType attribute.
ValueType.name.displayName=Name
ValueType.uri.description=Specifies the token URI.
ValueType.uri.displayName=URI
WSBinding.component.description=Specifies the name of the component that contains the web service.
WSBinding.component.displayName=Component
WSBinding.custom=Edit custom
WSBinding.edit=Edit
WSBinding.notApplicable=Not applicable
WSBinding.optionalProps.displayName=Additional properties
WSBinding.port.description=Specifies the port number of the web service.
WSBinding.port.displayName=Port
WSBinding.requiredProps.displayName=Required properties
WSBinding.service.description=Specifies the name of the web service.
WSBinding.service.displayName=Web service
WSBinding.useDefaults.description=Specifies whether to use the default binding information. When this option is enabled, Web Services Security uses the default binding information instead of the custom binding information that is defined here.
WSBinding.useDefaults.displayName=Use defaults
WSBinding.usingCustom=Using custom
WSBinding.usingDefault=Using defaults
WSClientBinding.description=Specifies the client-side binding configuration for Web Services Security.
WSClientBinding.displayName=Web services: Client security bindings
WSKey.alias.description=Specifies the alias of the key in the keystore.
WSKey.alias.displayName=Key alias
WSKey.description=Specifies a list of key entries in the keystore with string labels. You do not need to list all of the certificate entries as keys. Instead, the distinguished name (DN) of the certificate is used as the search key.
WSKey.displayName=Keys
WSKey.keypass.description=Specifies the password for the key.
WSKey.keypass.displayName=Key password
WSKey.name.description=Specifies the string label of the key. The key locator uses this name to search for the key.
WSKey.name.displayName=Key name
WSSecurity.box1.displayName=Nonce
WSSecurity.box2.displayName=Cryptographic hardware
WSSecurity.box3.displayName=Custom properties
WSSecurity.consumerBindings.displayName=JAX-RPC Default Consumer Bindings
WSSecurity.customProperty.displayName=Custom properties
WSSecurity.defaultGenerator.displayName=Default generator
WSSecurity.description=Specifies a default binding for Web Services Security. If a web services archive does not have its own binding, the application server uses the default binding. Otherwise, the application server uses the binding in the archive.
WSSecurity.displayName=JAX-WS and JAX-RPC security runtime
WSSecurity.distributeNonceCache.description=Enables distributed caching for nonce by using a data replication service (DRS).
WSSecurity.distributeNonceCache.displayName=Distributed nonce caching
WSSecurity.generatorBindings.displayName=JAX-RPC Default Generator Bindings
WSSecurity.hardwareAcceleration.description=Enables the hardware cryptographic device to run cryptographic operations.
WSSecurity.hardwareAcceleration.displayName=Enable cryptographic operations on hardware device
WSSecurity.hardwareAccelerationConfigName.description=Specifies the name of the cryptographic hardware device configuration.
WSSecurity.hardwareAccelerationConfigName.displayName=Cryptographic hardware configuration name
WSSecurity.nonceCacheTimeout.description=Specifies the timeout value for the nonce that is cached on the server. Nonce is a randomly generated value.
WSSecurity.nonceCacheTimeout.displayname=Nonce cache timeout
WSSecurity.old.displayName=Default bindings for Web Services Security
WSSecurity.property.description=Specifies additional properties for the configuration.
WSSecurity.property.displayName=Properties
WSSecurity.property.name.description=Specifies the name of the property.
WSSecurity.property.name.displayName=Property name
WSSecurity.property.value.description=Specifies the value of the property.
WSSecurity.property.value.displayName=Property value
WSSecurity.seconds=seconds
WSSecurity.updateRuntime=Update runtime
WSSecurity.validate=Validate configuration
WSSecurityUtil.errorCreateResource=An exception occurred when WebSphere Application Server created a new ws-security.xml file and wssecurity extent in context {0}
WSServerBinding.description=Specifies the server-side binding configuration for Web Services Security.
WSServerBinding.displayName=Web services: Server security bindings
WSServerSecurity.description=Specifies a default binding for Web Services Security. If a web services archive does not have its own binding, the application server uses the default binding. Otherwise, the application server uses the binding in the archive.
WSServerSecurity.displayName=JAX-WS and JAX-RPC security runtime
WSServerSecurity.generalProps.displayName=JAX-WS and JAX-RPC Runtime
WSServerSecurity.old.displayName=Web services: Default bindings for Web Services Security
X509Certificate.description=Specifies a list of X.509 certificates.
X509Certificate.displayName=X.509 certificates
X509Certificate.reference.description=Specifies the path to the X.509 certificate file.
X509Certificate.reference.displayName=X.509 certificate path
http.basicauth.title.description=The basic authentication method for the HTTP transport.
http.basicauth.title.displayName=HTTP basic authentication
http.basicauthid.description=Specifies the user ID for the HTTP basic authentication that is used for this port. You also can configure HTTP SSL basic authentication by enabling HTTP SSL configuration.
http.basicauthid.displayName=Basic authentication ID
http.basicauthpwd.description=Specifies the password for HTTP basic authentication using this port.
http.basicauthpwd.displayName=Basic authentication password
http.sslConfigAlias.repertoireSelection.none.text=(none)
http.sslconfig.description=Specifies the Secure Sockets Layer (SSL) configuration to use with the HTTP transport for this port. This configuration is used if the specific option is selected.
http.sslconfig.displayName=HTTP SSL configuration
http.sslconfig.title.description=Specifies the alias of the Secure Sockets Layer (SSL) configuration for the HTTP transport.
http.sslconfig.title.displayName=HTTP SSL configuration
http.sslenabled.description=Specifies whether secure socket communications is enabled for the HTTP transport using this port. When this option is enabled, the application server uses the HTTP SSL configuration setting.
http.sslenabled.displayName=HTTP SSL enabled
nav.wssecurity=JAX-WS and JAX-RPC security runtime
nav.wssecurity.certificate.stores=Certificate store
nav.wssecurity.collcertificate.stores=Collection certificate store
nav.wssecurity.id.evaluators=Trusted ID evaluators
nav.wssecurity.key.locators=Key locators
nav.wssecurity.ldapcertificate.stores=LDAP certificate store
nav.wssecurity.login.mappings=Login mappings
nav.wssecurity.trust.anchors=Trust anchors
sslConfigAlias.useManagementScope=Centrally managed
sslConfigAlias.useSpecificRepertoire=Specific to this Web service port
sslConfigAlias.useSpecificRepertoire.description=Allow the SSL definition that is used for this web service port to be centrally managed or specify an SSL configuration.
sslConfigAlias.useSpecificRepertoire.heading=SSL configuration
wssecurity.algorithmhelpermbean.failed=A call to the server to retrieve the algorithm list failed.  Check logs for more information.
wssecurity.all.required=All fields are required.
wssecurity.both.keyLocator=If you use a key locator, you must specify the key name and the key locator reference.
wssecurity.both.keyLocatorMapping=If you use a key locator mapping, you must specify the key locator reference and the key name reference.
wssecurity.both.keyStore=If you specify the key store, you must specify the key store password and the key store path.
wssecurity.both.keyStorePath.and.configName=To specify the key store, you must specify either the key store configuration name or the combination of key store password and key store path, but not both.
wssecurity.both.keyinfo=If you specify the key information, you must specify the key information name and the key information reference.
wssecurity.both.token=If you specify the token, you must specify the token name and the token reference.
wssecurity.both.tokenValueType=If you use the token value type, you must specify the token type URI and the token type local name.
wssecurity.collectionCertStore.rqdX509=A collection certificate store must include at least one X.509 certificate or Certificate revocation list.
wssecurity.duplicate.CRL=A certificate revocation list with this certificate revocation list path already exists. You must use a unique certificate revocation list path.
wssecurity.duplicate.algorithmMapping=An algorithm mapping with this factory engine class already exists. You must use a unique algorithm mapping factory engine class.
wssecurity.duplicate.algorithmUri=An algorithm URI with this algorithm and type already exists. You must use a unique algorithm and type.
wssecurity.duplicate.collectionCertStore=A collection certificate store with this name already exists. You must use a unique collection certificate store name.
wssecurity.duplicate.encryptionInfo=Encryption information with this name already exists. You must use a unique encryption information name.
wssecurity.duplicate.key=A key with this name already exists. You must use a unique key name.
wssecurity.duplicate.keyInfo=A key information with this name already exists. You must use a unique key information name.
wssecurity.duplicate.keyInfoRef=A key information reference with this name already exists. You must use a unique name.
wssecurity.duplicate.keyLocator=A key locator with this name already exists. You must use a unique key locator name.
wssecurity.duplicate.loginMapping=A login mapping with this authentication method already exists. You must use a unique login mapping authentication method.
wssecurity.duplicate.partRef=A part reference with this part name already exists. You must use a unique part name.
wssecurity.duplicate.property=A property with this name already exists. You must use a unique property name.
wssecurity.duplicate.signingInfo=A signing information with this name already exists. You must use a unique signing information name.
wssecurity.duplicate.tokenConsumer=A token consumer with this name already exists. You must use a unique token consumer name.
wssecurity.duplicate.tokenGenerator=A token generator with this name already exists. You must use a unique token generator name.
wssecurity.duplicate.transform=A transform with this transform name already exists. You must use a unique transform name.
wssecurity.duplicate.trustAnchor=A trust anchor with this name already exists. You must use a unique trust anchor name.
wssecurity.duplicate.trustedIDEvaluator=A trusted ID evaluator with this name already exists. You must use a unique trusted ID evaluator name.
wssecurity.duplicate.x509Certificate=An X.509 certificate with this certificate path already exists. You must use a unique certificate path.
wssecurity.encryptionInfo.rqdFields=The encryption information name, the key locator reference, and the data encryption algorithm are required.
wssecurity.generator.keyLocatorMapping=A key locator mapping is required for generator configurations.
wssecurity.hardwareAccelerationConfigName.missing=If cryptographic operations on a hardware device is selected, a cryptographic hardware configuration name must be specified.
wssecurity.keyInfo.keyidMethods.required=Calculation method, Encoding method, and Value type values are required when the type of key information is Key identifier.
wssecurity.keyInfo.valueType.required=Value type values are required when the type of key information is Security token reference.
wssecurity.keyName.mismatch=The selected key name reference is not defined for the selected key locator reference. The list of key name references has been updated with the possible values.
wssecurity.keyStoreConfigName.empty=If you select the Predefined key store radio button, you must select a key store config name.
wssecurity.loginBinding.authRqdFields=If you use the BasicAuth method, you must specify a user ID and a password.
wssecurity.loginBinding.rqdFields=An authentication method and a callback handler are required.
wssecurity.nonce.not.supported=Nonce is not supported for authentication methods other than BasicAuth.
wssecurity.properties.category.displayName=Web Services Security properties
wssecurity.signingInfo.keyOrPath=You must specify either the signing key information or the certificate path information, but not both.
wssecurity.signingInfo.rqdFields=A signature method is required.
wssecurity.signingInfo.signingKey=If you specify a key name, you also must specify the key locator reference.
wssecurity.signingInfo.trustAny=If you select Trust anchor, you must specify the trust anchor and the certificate store.
wssecurity.tokenGen.expiration.required=User name expiration is required when Add timestamp is selected.
wssecurity.trustedIDEvaluator.rqdExisting=An existing evaluator definition is required.
wssecurity.trustedIDEvaluator.rqdFields=The trusted ID evaluator name and the trusted ID evaluator class name are required.
wssecurity.updateRuntime.failed=The run time failed to update the binding configuration information from the repository. Verify the configuration settings. An invalid configuration might cause the update to fail. Restart the server for the changes to take effect.
wssecurity.validate.binding.failed=Validation of the binding information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.validate.client.failed=Validation of the client binding information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.validate.requestReceiver=Validation of the request receiver information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.validate.requestSender=Validation of the request sender information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.validate.responseReceiver=Validation of the response receiver information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.validate.responseSender=Validation of the response sender information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.validate.server.failed=Validation of the server binding information failed. You must examine the binding information for inconsistencies in the Web services security deployment descriptors.
wssecurity.warn.appmgmt=Your application might have Web services security enabled. If Web services security is enabled, go to the Enterprise Application Management panels (click Applications > Enterprise applications) and configure the binding information for Web services security. The binding information for Web services security is not collected during application deployment. If the binding information is not properly configured, your application might not start properly or might be unusable.
