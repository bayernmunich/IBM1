security.ctr.checkKeyFile.exception=An exception occurred in ConnectToRuntime when checking the Secure Sockets Layer (SSL) key file: The exception is {0}.
security.ctr.checkTokenLibFile.exception=An exception occurred in ConnectToRuntime when checking the cryptographic token library file: The exception is {0}.
security.ctr.checkTrustFile.exception=An exception occurred in ConnectToRuntime when checking the Secure Sockets Layer (SSL) trust file: The exception is {0}.
security.ctr.ckpwd.exception=An exception occurred in ConnectToRuntime when the server checked the password for user: {0}. The exception is {1}.
security.ctr.expjaas.exception=An exception occurred when exporting the Java Authentication and Authorization Service (JAAS) configuration: {0}.
security.ctr.expkey.exception=An exception occurred when exporting Lightweight Third Party Authentication (LTPA) keys: The exception is {0}.
security.ctr.genkey.exception=An exception occurred in ConnectToRuntime when generating Lightweight Third Party Authentication (LTPA) keys. The exception is {0}.
security.ctr.getSecureSocketLayerCipherList.exception=Exception occurred while retrieving the cipher list from the getSecureSocketLayerCipherList method of the SecurityAdmin MBean
security.ctr.getrealm.exception=An exception occurred in ConnectToRuntime when retrieving the realm. The exception is {0}.
security.ctr.impkey.exception=An exception occurred when importing Lightweight Third Party Authentication (LTPA) keys: The exception is {0}.
security.ctr.jaasnosec.exception=The Security object was not found in the Java Authentication and Authorization Service (JAAS) run time update.
security.ctr.mbean.exception=Cannot find SecurityAdmin MBean. The exception is {0}.
security.ctr.nombean.error=The server cannot find the SecurityAdmin MBean.
security.ctr.nombean.exception=A SecurityAdmin MBean was not found for the object {0}: returning null.
security.ldap.ignorecase.error=The Ignore case option is required for the Lightweight Directory Access Protocol (LDAP) directory type {0}.
security.ldaprgy.getldapprops.exception=An exception occurred retrieving the contents of the LdapConfig.nlsprops file: {0}.
security.ldaprgy.nofilter=A Lightweight Directory Access Protocol (LDAP) search filter entry was not found in the security.xml file in the LDAP User Registry section.
security.ldapsrch.fileclose.exception=An exception occurred closing the LdapConfig.nlsprops file: {0}.
security.ldapsrch.getldapprops.exception=An exception occurred retrieving the contents of the LdapConfig.nlsprops file: {0}.
security.ldapsrch.getsec.exception=An exception occurred retrieving the security object: {0}.
security.ldapsrch.nosec=The Security object was not found in extent in changeLdapDirType().
security.ltpa.export.exception=An exception occurred while exporting the Lightweight Third Party Authentication (LTPA) keys: {0}.
security.ltpa.import.exception=An exception occurred while importing the Lightweight Third Party Authentication (LTPA) keys: {0}.
security.props.extract.exception=An exception occurred while extracting the resource {0}: {1}.
security.props.load.exception=An exception occurred while loading the resource {0}: {1}.
security.props.save.exception=An exception occurred while creating a new security.xml file and security extent in context {0}: {1}.
security.server.setup.exception=An exception occurred while setting up the detail form for server security: {0}.
security.utils.load.exception=An exception occurred while loading the security object in the context {0}: {1}.
security.utils.nosec=The security.xml file was not available in the context {0}.
security.utils.save.exception=An exception occurred while creating a new security.xml file and security extent in context {0}: {1}.
security.validation.exception=An exception occurred while validating security configuration values: {0}.
security.validation.ldap.exception=An exception occurred while setting the Lightweight Directory Access Protocol (LDAP) security configuration values: {0}.
security.validation.nocustomclass=The custom user registry class name is missing.
security.validation.nodirtype=The Lightweight Directory Access Protocol (LDAP) directory type is missing.
security.validation.nohost=The Lightweight Directory Access Protocol (LDAP) host name is missing.
security.validation.noltpa=The Lightweight Third Party Authentication (LTPA) object does not exist.
security.validation.noltpakeys=The Lightweight Third Party Authentication (LTPA) keys are missing.
security.validation.noltpapassword=The Lightweight Third Party Authentication (LTPA) password is missing.
security.validation.noregistry=The Registry object does not exist.
security.validation.nosearchfilter=The Lightweight Directory Access Protocol (LDAP) search filter object does not exist.


AdditionalProperties.displayName=Additional Properties
AdditionalProperties_i.description=Additional Properties
AdminSecurity.activeRegistry.description=Specifies that the application server saves the currently selected repository as the active registry when you click Apply.
AdminSecurity.activeRegistry.displayName=Set as current
AdminSecurity.adminSecurity.description=
AdminSecurity.adminSecurity.displayName=Administrative security
AdminSecurity.appSecurity.description=Settings for applications
AdminSecurity.appSecurity.displayName=Application security
AdminSecurity.authProviders.description=Specifies whether to use the built-in authorization configuration or an external authorization provider.
AdminSecurity.authProviders.displayName=Authorization providers
AdminSecurity.authentication.description=Authentication mechanisms and expiration
AdminSecurity.authentication.displayName=Authentication
AdminSecurity.authorization.description=
AdminSecurity.authorization.displayName=Authorization
AdminSecurity.configureButton=Configure...
AdminSecurity.configureButton.description=Launches the user registry panel, which is based upon the currently selected registry.
AdminSecurity.currentRegistry.description=Indicates the type of user repository that is currently configured. This field is read-only.
AdminSecurity.currentRegistry.displayName=Current realm definition
AdminSecurity.description=Use this panel to configure administration and the default application security policy. This security configuration applies to the security policy for all administrative functions and is used as a default security policy for user applications. Security domains can be defined to override and customize the security policies for user applications.
AdminSecurity.displayName=Global security
AdminSecurity.ejbAuth.description=Specifies the inbound and outbound settings for Remote Method Invocation over the Internet Inter-ORB Protocol (RMI/IIOP).
AdminSecurity.ejbAuth.displayName=RMI/IIOP security
AdminSecurity.enableButton=Security Configuration Wizard
AdminSecurity.enableButton.description=Launches a wizard to configure the basic security settings.
AdminSecurity.enforceJCASecurity.description=Restricts application access to sensitive Java(TM) Connector Architecture (JCA) mapping authentication data.
AdminSecurity.enforceJCASecurity.displayName=Restrict access to resource authentication data
AdminSecurity.enforceJCASecurityNot.displayName=Do not restrict access to resource authentication data
AdminSecurity.enforceJava2Security.description=Specifies whether to enable Java(TM) 2 security. If Java(TM) 2 security is enabled and an application requires more Java(TM) 2 security permissions than are granted in the default policy, then the application might fail to run properly. 
AdminSecurity.enforceJava2Security.displayName=Use Java 2 security to restrict application access to local resources
AdminSecurity.enforceJava2SecurityNot.displayName=Do not use Java 2 security to restrict application access to local resources
AdminSecurity.issuePermissionWarning.description=Specifies that a warning is issued during application installation if an application requires a Java(TM) 2 security permission that normally is not granted to an application.
AdminSecurity.issuePermissionWarning.displayName=Warn if applications are granted custom permissions
AdminSecurity.issuePermissionWarningNot.displayName=Do not warn if applications are granted custom permissions
AdminSecurity.jaasAuth.description=
AdminSecurity.jaasAuth.displayName=Java Authentication and Authorization Service
AdminSecurity.realmName.description=Indicates the identifier that the system uses to refer to the realm defined by this repository.
AdminSecurity.realmName.displayName=Realm name
AdminSecurity.registry.description=User repository selection and configuration
AdminSecurity.registry.displayName=User account repository
AdminSecurity.reportHostname=WebSphere Application Server Core Security settings for host name:
AdminSecurity.reportHostname.description=Specifies the host name on which the report is generated.
AdminSecurity.reportTime=Report generated on:
AdminSecurity.reportTime.description=Specifies the time when the report was generated.
AdminSecurity.reportTitle=Security Configuration Report
AdminSecurity.reportTitle.description=The title of the security configuration report.
AdminSecurity.secureAdmin.description=Enables administrative security for this application server domain.
AdminSecurity.secureAdmin.displayName=Enable administrative security
AdminSecurity.secureAdmin.error.adminAgent=The Enable administrative security value can not be changed since this is an admin agent or job manager profile or is a profile that is registered with an admin agent.
AdminSecurity.secureApps.description=Enables application-level security unless the option is overridden at the server level.
AdminSecurity.secureApps.displayName=Enable application security
AdminSecurity.secureAppsNot.displayName=Do not enable application security
AdminSecurity.secureInfrastructure.description=Settings for the security infrastructure
AdminSecurity.secureInfrastructure.displayName=Java 2 security
AdminSecurity.statusButton=Security Configuration Report
AdminSecurity.statusButton.description=Generates and displays a report of the current security settings.
AdminSecurity.useDomainQualifiedUserNames.description=Specifies that user names that are returned by methods, such as the getUserPrincipal() method, are qualified with the security realm in which they reside.
AdminSecurity.useDomainQualifiedUserNames.displayName=Use realm-qualified user names
AdminSecurity.useDomainQualifiedUserNamesNot.displayName=Do not use realm-qualified user names
AdminSecurity.userRegistry.description=Specifies the available options for user repository type.
AdminSecurity.userRegistry.displayName=Available realm definitions
AdminSecurity.usersLink.description=Link to user and group management
AdminSecurity.usersLink.displayName=Console users and groups
AdminSecurity.webAuth.description=Specifies the security configuration settings that are related to web resources.
AdminSecurity.webAuth.displayName=Web security
AdminSecurity.webAuth.general.description=Specifies the settings for web authentication.
AdminSecurity.webAuth.general.displayName=General settings
AdministrativeAuthentication.name.description=The administrative authentication method is used when an administrative process on this profile connects to another profile. You can choose to use RSA or you can use the currently active application authentication method. If RSA is selected but fails for any reason, the system will automatically attempt to use the application authentication method.
AuthMechanism.confirmPassword.description=Confirms the password that is used to encrypt and decrypt the LTPA keys.
AuthMechanism.confirmPassword.displayName=Confirm password
AuthMechanism.description=Encrypts authentication information so that the application server can send the data from one server to another in a secure manner. The encryption of authentication information that is exchanged between servers involves the LTPA mechanism.
AuthMechanism.displayName=LTPA
AuthMechanism.expiration.description=Authentication information persists in the system for a limited amount of time before it expires and must be refreshed.
AuthMechanism.expiration.displayName=LTPA timeout
AuthMechanism.exportKeys=Export keys
AuthMechanism.exportKeys.description=Click Export keys to export Lightweight Third Party Authentication (LTPA) keys into a file. To support single sign-on (SSO) across multiple domains (cells) in the application server, share LTPA keys and a password across the domains.
AuthMechanism.generateKeys=Generate keys
AuthMechanism.generateKeys.description=Click Generate keys to generate new Lightweight Third Party Authentication (LTPA) keys, if necessary, after backing up the server and turning on security. Click Save on the administrative console to save the new keys and the password in the repository. The LTPA keys are used to encrypt and decrypt the LTPA tokens.
AuthMechanism.importKeys=Import keys
AuthMechanism.importKeys.description=Click Import keys to import Lightweight Third Party Authentication (LTPA) keys that were previously exported from another cell into a file. Click Save on the administrative console to save the imported keys and the password in the repository. To support single sign-on (SSO) across multiple domains (cells) in the application server, share LTPA keys and a password across the domains.
AuthMechanism.internalServerId.description=Specifies the identity that is used for internal process communication.
AuthMechanism.internalServerId.displayName=Internal server ID
AuthMechanism.keyFilename.description=Specifies the name of the file that is used when importing or exporting keys. Enter the file name and then click either Import Keys or Export Keys. The imported keys are used after the configuration is saved.
AuthMechanism.keyFilename.displayName=Fully qualified key file name
AuthMechanism.keyGen.description=Authentication data is encrypted and decrypted by using keys that are kept in one or more key stores.
AuthMechanism.keyGen.displayName=Key generation
AuthMechanism.keySetGroup.description=Specifies groups of public, private, and shared keys. These key groups enable the application server to manage multiple sets of Lightweight Third Party Authentication keys.
AuthMechanism.keySetGroup.displayName=Key set group
AuthMechanism.ltpa.autogen=Warning: at least one node in the cell was unreachable or is not configured to automatically synchronize. It is strongly recommended that you verify your node settings, and do not enable automatic generation of LTPA keys while automatic syncronization is disabled on any node.
AuthMechanism.password.description=Specifies the password that is used to encrypt and decrypt the Lightweight Third Party Authentication (LTPA) keys.
AuthMechanism.password.displayName=Password
AuthMechanism.sso.description=Single sign-on across cells can be provided by sharing keys and passwords. To share the keys and password, log on to one cell, specify a key file, and click Export keys. Then, log on to the other cell, specify the key file, and click Import keys.
AuthMechanism.sso.displayName=Cross-cell single sign-on
AuthMechanism.swam.description=Unauthenticated credentials are forwarded between servers. This option is deprecated. For further information, see the extended helps using the question mark (?) at the top of the panel.
AuthMechanism.swam.displayName=SWAM (deprecated): No authenticated communication between servers
AuthMechanism.timeout.description=Forwarded credentials expire after this specified period of time. This value should be greater than the Cache timeout.
AuthMechanism.timeout.displayName=LTPA timeout value for forwarded credentials between servers
AuthMechanism.timeout.setting={0} minute LTPA timeout value for forwarded credentials between servers
Authentication.displayName=Authentication
AuthenticationModule.classname.description=Specifies the class name for this authentication module.
AuthenticationModule.classname.displayName=Class name
AuthenticationModule.classname.displayNameHL=Class Name
AuthenticationModule.client.displayName=Client Authentication Modules
AuthenticationModule.description=Use this page to provide the configuration details for your custom JASPI server authentication module.
AuthenticationModule.displayName=Authentication modules
AuthenticationModule.duplicate.name=A module with name {0} already exists. You must use a unique name.
AuthenticationModule.duplicate.order=A module with order {0} already exists. You must use a unique order.
AuthenticationModule.name.description=Specifies the name of the authentication module.
AuthenticationModule.name.displayName=Module name
AuthenticationModule.name.displayNameHL=Module Name
AuthenticationModule.noModules.error=At least one server authentication module must be defined.
AuthenticationModule.order.description=TBD
AuthenticationModule.order.displayName=Order
AuthenticationModule.policy.CONTENT=Authenticate content
AuthenticationModule.policy.CONTENT.description=Requires authentication of the origin of the data within the message. Allows the recipient to establish who defined the content.
AuthenticationModule.policy.NONE.description=No authentication performed on response messages.
AuthenticationModule.policy.RECIPIENT=Authenticate recipient
AuthenticationModule.policy.RECIPIENT.description=Requires authenticaiton of the message recipient.
AuthenticationModule.policy.SENDER=Authenticate sender
AuthenticationModule.policy.SENDER.description=Requires authentication of the sending entity.
AuthenticationModule.requestPolicy.description=Specifies the protection policy for request messages.
AuthenticationModule.requestPolicy.displayName=Request policy
AuthenticationModule.requestPolicy.displayNameHL=Request Policy
AuthenticationModule.responsePolicy.description=Specifies the protection policy for response messages.
AuthenticationModule.responsePolicy.displayName=Response policy
AuthenticationModule.responsePolicy.displayNameHL=Response Policy
AuthenticationModule.server.displayName=Server Authentication Modules
AuthenticationProvider.1entry=1 JASPI authentication provider
AuthenticationProvider.classname.description=Provide the fully-qualified class name of this authentication provider.
AuthenticationProvider.classname.displayName=Class name
AuthenticationProvider.classname.displayNameHL=Class Name
AuthenticationProvider.defaultProvider.description=Specifies the default provider for applications that do not specify a specific provider.
AuthenticationProvider.defaultProvider.displayName=Default provider
AuthenticationProvider.desc.description=Provide a meaningful description that will help you identify this service provider.
AuthenticationProvider.desc.displayName=Description
AuthenticationProvider.description=When JASPI authentication providers are configured and a web request message is received, the security runtime determines if the target application is configured to use JASPI authentication. If so, the security runtime invokes the authentication modules associated with a selected provider to authenticate the identity of the sender of the received message.<p class='instruction-text'>All providers use the HttpServlet profile.
AuthenticationProvider.detail.description=Use this page to provide the configuration details for your custom JASPI authentication service provider.
AuthenticationProvider.displayName=Providers
AuthenticationProvider.domain.description=When JASPI authentication providers are configured and a web request message is received, the security runtime determines if the target application is configured to use JASPI authentication. If so, the security runtime invokes the authentication modules associated with a selected provider to authenticate the identity of the sender of the received message. Providers configured in a domain are only available to applications deployed to that domain. Applications deployed to the domain can use domain-level or global providers.<p class='instruction-text'>All providers use the HttpServlet profile.
AuthenticationProvider.enable.description=Enables use of the Java Authentication Service Provider Interface (JASPI) authentication model.
AuthenticationProvider.enable.displayName=Enable Java Authentication SPI (JASPI)
AuthenticationProvider.entries={0} JASPI authentication providers
AuthenticationProvider.msgLayer.description=HttpServlet is the only supported specification profile.
AuthenticationProvider.msgLayer.displayName=Message layer
AuthenticationProvider.msgLayer.displayNameHL=Message Layer
AuthenticationProvider.name.description=Specifies a name that is meaningful to you for the authentication service provider.
AuthenticationProvider.name.displayName=Provider name
AuthenticationProvider.name.displayNameHL=Provider Name
AuthenticationProvider.short.description=Use JASPI providers to authenticate messages for applications that use the JASPI authentication model.
AuthenticationProvider.short.domain.description=Use JASPI providers to authenticate messages for applications that use the JASPI authentication model. Applications deployed to the domain can use domain-level or global providers.
Authorization.displayName=Authorization
AuthorizationProvider.app.description=If any applications were deployed while the authorization provider was other than the current JACC provider, it is necessary to update the JACC provider with security policy information for those applications.
AuthorizationProvider.authorization.description=Select the external authorization option when you intend to use an external security provider only, such as the Tivoli(R) Access Manager, to handle J2EE authorization using JACC. For built-in authorization, do not modify the settings on these panels. For external authorization, see the help page for more information.
AuthorizationProvider.authorization.displayName=Authorization provider:
AuthorizationProvider.configClassName.description=Specifies the class name of an implementation class that represents the javax.security.jacc.PolicyConfigurationFactory.provider property. Use a dot-separated name. The class file must reside in the class path of each application server process.
AuthorizationProvider.configClassName.displayName=Policy configuration factory class name
AuthorizationProvider.description=If an external provider is employed, it must be based on the Java(TM) Authorization Contract for Containers (JACC) specification to handle the Java(TM) 2 Platform, Enterprise Edition (J2EE) authorization. Do not modify any settings on the authorization provider panels unless you have configured an external security provider as a JACC authorization provider.
AuthorizationProvider.description.description=Specifies the optional description for the Java(TM) Authorization Contract for Container (JACC) provider.
AuthorizationProvider.description.displayName=Description
AuthorizationProvider.description2=The Application Server must be restarted in order for a change of authorization provider to become effective.
AuthorizationProvider.displayName=External authorization providers
AuthorizationProvider.dontUpdateApps.displayName=Don't update the provider
AuthorizationProvider.initClassName.description=Specifies the class name of an implementation class that implements the com.ibm.wsspi.security.authorization.IntializeJACCProvider interface. This class is called at the start of application server processes. The custom properties that you define for this provider are passed to the implementation class. Use a dot-separated name. The class file must reside in the class path of each application server process.
AuthorizationProvider.initClassName.displayName=Provider initialization class name
AuthorizationProvider.name.description=Specifies the name of the Java(TM) Authorization Contract for Containers (JACC) provider.
AuthorizationProvider.name.displayName=Name
AuthorizationProvider.policyClassName.description=Specifies the class name of an implementation class that represents the javax.security.jacc.policy.provider property according to the specification. Use a dot-separated name. The class file must reside in the class path of each application server process.
AuthorizationProvider.policyClassName.displayName=Policy class name
AuthorizationProvider.provider.description=Specifies the implementation details for the external Java(TM) Authorization Contract for Containers (JACC) provider.
AuthorizationProvider.provider.displayName=External JACC provider
AuthorizationProvider.requiresCtxHdlr.description=Specifies whether the policy providers require the EJB Arguments Policy Context Handler to make access decisions. Because this option has an impact on performance, do not set it unless it is required by the provider.
AuthorizationProvider.requiresCtxHdlr.displayName=Requires the EJB arguments policy context handler for access decisions
AuthorizationProvider.roleClassName.description=Specifies the class name of an implementation class that implements the com.ibm.wsspi.security.authorization.RoleConfigurationFactory interface. Use a dot-separated name. The class file must reside in the class path of each application server  process. For more information on this interface, see the application server documentation.
AuthorizationProvider.roleClassName.displayName=Role configuration factory class name
AuthorizationProvider.short.description=Specifies whether to use the built-in authorization configuration or an external authorization provider.
AuthorizationProvider.supportsDynamic.description=Specifies whether the provider can support dynamic changes to the web modules. For more information, see the extended helps by clicking the question mark (?) in the upper-right corner of the panel.
AuthorizationProvider.supportsDynamic.displayName=Supports dynamic module updates
AuthorizationProvider.updateAllApps.displayName=Update with all applications
AuthorizationProvider.updateApps.description=Select whether the JACC provider will be updated with information for all applications, specified applications, or no applications.
AuthorizationProvider.updateApps.displayName=Update JACC provider with application information
AuthorizationProvider.updateSomeApps.description=Specifies the application names (separated by colons) used to update the JACC provider information.
AuthorizationProvider.updateSomeApps.displayName=Update with application names listed (separated by colons)
AuthorizationProvider.useDefault.displayName=Built-in authorization
AuthorizationProvider.useProvider.displayName=External JACC provider
AuthorizationProvider.useSAF.displayName=System Authorization Facility (SAF) authorization
BUS_CLIENT=Bus client
BUS_TO_BUS=Bus to Bus
BUS_TO_WEBSPHERE_MQ=Bus to WebSphere MQ
BasicAuthentication.displayName=Basic authentication
BasicAuthentication_i.description=Specifies whether clients communicating with this server must specify a user ID and password for any method request. For more information, see the extended help file by clicking the question mark (?) in the upper-right corner of the panel.
BasicAuthentication_o.description=Specifies whether basic authentication is used to authenticate with a downstream server. For more information, see the extended help file by clicking the question mark (?) in the upper-right corner of the panel.
CACerts.alias.description=Specifies the alias name to identify the certificate in the key store and used to label the CA certificate object.
CACerts.alias.displayName=Alias for the new certificate
CACerts.caCert.heading=CA Certificate
CACerts.caClient.NEW=New...
CACerts.caClient.description=Specifies the CA client used to create the certificate. If there are no CA clients, then no CA certificates can be created.
CACerts.caClient.displayName=CA client
CACerts.certRequest.description=Specifies the certificate request already defined in this keystore for the CA client to use to request the certificate from the CA.
CACerts.certRequest.displayName=Predefined request alias
CACerts.description=Issue a request to a CA (Certificate authority) to generate a certificate. Once received from the CA, the certificate will be stored in the key store from which you generated this request.
CACerts.newRequest.description=Specifies a CA certificate request will be created.
CACerts.newRequest.displayName=New request specification
CACerts.requestSpec.heading=Request Specification
CACerts.revokePassword.description=Specifies the password that is used to revoke this certificate. If a request is made to the CA to revoke this certificate at a later date, this password is needed.
CACerts.revokePassword.displayName=Revocation password
CAClient.baseDN.description=Specifies the distinguished name (DN) that should be used when creating a certificate on the CA.
CAClient.baseDN.displayName=Base DN for new certificates
CAClient.className.description=Specifies the name of the implementation class the works as a client to a CA server. It connects to the CA and performs a certificate create, revoke, or replace.
CAClient.className.displayName=Implementation class
CAClient.className.displayNameHL=Implementation Class
CAClient.description=Specifies the implementation settings for a connection to a Certificate Authority (CA). A connection to a Certificate Authority is used to create a signed certificate, revoke a certificate, or refresh a certificate.
CAClient.displayName=CA Client Configurations
CAClient.host.description=Specifies the host name of the CA server.
CAClient.host.displayName=CA server host name
CAClient.link.description=Specifies certificate authority (CA) client configurations.
CAClient.link.displayName=Certificate Authority (CA) client configurations
CAClient.name.description=Specifies the unique name of the CA client configuration.
CAClient.name.displayName=Name
CAClient.password.description=Specifies the password for the connection to the CA.
CAClient.password.displayName=Password
CAClient.pollingInterval.description=Specifies the amount of time, in minutes, between checks to the CA server to see if the certifiate is complete.
CAClient.pollingInterval.displayName=Polling interval when requesting certificates
CAClient.pollingTimes.description=Specifies the number of times to check the CA server to see if the certificate is complete.
CAClient.pollingTimes.displayName=Number of times to poll
CAClient.port.description=Specifies the port where the CA server will communicate.
CAClient.port.displayName=Port
CAClient.userName.description=Specifies the user Id used to connect to the CA.
CAClient.userName.displayName=User name
CLIENT_TO_WEBSPHERE_MQ=WebSphere MQ Client
CSI.Never=Never
CSI.Required=Required
CSI.Supported=Supported
CSIAuthentication.displayName=CSI authentication
CSIInbound.description=Use this panel to specify authentication settings for requests that are received and transport settings for connections that are accepted by this server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol.
CSIInbound.displayName=CSIv2 inbound communications
CSIInbound.domain.description=Use this panel to specify authentication settings for requests that are received and transport settings for connections that are accepted by this server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol. The configuration specified on this panel is applied only to this domain.
CSIOutbound.description=Use this panel to specify authentication settings for requests that are sent and transport settings for connections that are initiated by the server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol.
CSIOutbound.displayName=CSIv2 outbound communications
CSIOutbound.domain.description=Use this panel to specify authentication settings for requests that are sent and transport settings for connections that are initiated by the server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol. The configuration specified on this panel is applied only to this domain.
CSIOutbound.enableCacheLimit.description=Specifies whether the CSIv2 session cache limit is enabled.
CSIOutbound.enableCacheLimit.displayName=Enable CSIv2 session cache limit
CSIOutbound.error.serverIdAndBasicAuth=You cannot select Specify an alternate trusted identity when Message layer authentication is Supported or Required and Basic authentication is not selected. Select Use server trusted identity instead or select to enable Basic authentication.
CSIOutbound.idleTimeout.description=Specifies the period of time in seconds that a CSIv2 session can remain idle before it is deleted when the Maximum cache size is reached.
CSIOutbound.idleTimeout.displayName=Idle session timeout
CSIOutbound.maxCacheSize.description=Specifies the maximum size in entries of the CSIv2 session cache.
CSIOutbound.maxCacheSize.displayName=Maximum cache size
CSITransport.displayName=CSI transport
CSIia.description=Use this panel to specify authentication settings for requests that are received by the server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol.
CSIia.displayName=CSIv2 inbound authentication
CSIiaAdditionalSettings.certIdentityAssertion.description=Specifies that this server permits a trusted upstream server to assert client identities in the form of X.509 certificates.
CSIiaAdditionalSettings.certIdentityAssertion.displayName=Certificate identity assertion
CSIiaAdditionalSettings.clientAuthenticationType.KERBEROS=Kerberos
CSIiaAdditionalSettings.clientAuthenticationType.SAFUSERIDPASSWORD=SAF user ID and password
CSIiaAdditionalSettings.clientAuthenticationType.description=Specifies the type of client authentication that is supported for inbound requests.
CSIiaAdditionalSettings.clientAuthenticationType.displayName=Client authentication type
CSIiaAdditionalSettings.description=Specifies additional authentication settings for requests that are received by this server using the OMG Common Secure Interoperability (CSI) authentication protocol.
CSIiaAdditionalSettings.displayName=z/OS Additional Settings
CSIiaAdditionalSettings.dnIdentityAssertion.description=Specifies that this server permits a trusted upstream server to assert client identities in the form of distinguished names.
CSIiaAdditionalSettings.dnIdentityAssertion.displayName=Distinguished name identity assertion
CSIiaAdditionalSettings.safIdentityAssertion.description=Specifies that this server permits a trusted upstream server to assert client identities in the form of System Authorization Facility (SAF) user names.
CSIiaAdditionalSettings.safIdentityAssertion.displayName=SAF identity assertion
CSIiaAdditionalSettings.shortDescription=Specifies additional Common Secure Interoperability version 2 (CSIv2) inbound authentication settings.
CSIic.description=Use this panel to specify transport settings for connections that are accepted by this server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol.
CSIic.displayName=CSIv2 inbound transport
CSIic.instructions.displayName=WebSphere for z/OS Version 6.1 uses the channel framework for the IIOP inbound transport. For managing SSL configurations, it is recommended to use the centrally managed SSL configuration panel. Select Security -> SSL certificate and key management -> Manage endpoint security configurations. To make a direct selection of an SSL alias for a particular SSL Channel, select Servers -> Application Servers -> server_name -> Container Services -> ORB Service -> ORB Service Transport Chains.
CSIoa.description=Use this panel to specify authentication settings for requests that are sent by the server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol.
CSIoa.displayName=CSIv2 outbound authentication
CSIoaAdditionalSettings.clientAuthenticationType.KERBEROS=Kerberos
CSIoaAdditionalSettings.clientAuthenticationType.SAFUSERIDPASSWORD=SAF user ID and password
CSIoaAdditionalSettings.clientAuthenticationType.description=Specifies the type of client authentication that is supported for outbound requests.
CSIoaAdditionalSettings.clientAuthenticationType.displayName=Client authentication type
CSIoaAdditionalSettings.description=Specifies authentication settings for requests that are sent by this server using the OMG Common Secure Interoperability (CSI) authentication protocol.
CSIoaAdditionalSettings.displayName=z/OS additional settings
CSIoaAdditionalSettings.shortDescription=Specifies additional Common Secure Interoperability version 2 (CSIv2) outbound authentication settings for the z/OS(R) platform.
CSIoc.description=Use this panel to specify transport settings for connections that are initiated by the server using the Object Management Group (OMG) Common Secure Interoperability (CSI) authentication protocol.
CSIoc.displayName=CSIv2 outbound transport
CSIv2AttributeLayer.displayName=CSIv2 Attribute Layer
CSIv2AttributeLayer_i.description=Might contain an identity token, which is an identity from an upstream server that already is authenticated.
CSIv2MessageLayer.displayName=CSIv2 Message Layer
CSIv2MessageLayer_i.description=Might contain a user ID and password or an authenticated token with an expiration.
CSIv2TransportLayer.displayName=CSIv2 Transport Layer
CSIv2TransportLayer_i.description=Might contain a Secure Sockets Layer (SSL) client certificate as the identity.
CertExpMonitor.autoReplace.description=Specifies a new self-signed or chained certificate be generated using the same certificate information if the expiration notification threshold is reached. The old certificate is replaced and uses the same alias. All old signers managed by the key store configuration are also replaced. The system only replaces self-signed and chained certificates.
CertExpMonitor.autoReplace.displayName=Automatically replace expiring self-signed and chained certificates
CertExpMonitor.button.startNow=Start now
CertExpMonitor.delete.description=Specifies whether to completely remove old, self-signed certificates from the key store during a replace operation or leave them there under a renamed alias. If an old certificate is not deleted, the system renames the alias so that the new certificate can use the old alias, which might be referenced elsewhere in the configuration.
CertExpMonitor.delete.displayName=Delete expiring certificates and signers after replacement
CertExpMonitor.description=Configures the certificate expiration monitor.
CertExpMonitor.displayName=Manage certificate expiration
CertExpMonitor.expirationDay.description=Specifies that you want to schedule a specific day of the week on which the expiration monitor runs. For example, it might run on Sunday.
CertExpMonitor.expirationDay.displayName=Check by calendar
CertExpMonitor.expirationInterval.description=Specifies that you want to schedule a specific number of days between each run of the expiration monitor.
CertExpMonitor.expirationInterval.displayName=Check by number of days
CertExpMonitor.expirationNotify.description=Specifies the notification type when an expiration monitor runs. This notification can be indicated in an email or in the message log file.
CertExpMonitor.expirationNotify.displayName=Expiration check notification
CertExpMonitor.expirationSchedule.description=
CertExpMonitor.expirationSchedule.displayName=Expiration checking
CertExpMonitor.expirationTime.description=Specifies the scheduled time that the system checks for expired certificates.
CertExpMonitor.expirationTime.displayName=Scheduled time of day to check for expired certificates
CertExpMonitor.isEnabled.description=Specifies the certificate monitor is active and will run as scheduled.
CertExpMonitor.isEnabled.displayName=Enable checking
CertExpMonitor.isNotEnabled.message=Because certificate monitoring is disabled, a warning is not issued for expiring certificates. Track certificate expiration and manually replace certificates.
CertExpMonitor.nextStartDate.description=Specifies the date for the next scheduled check. This allows the deployment manager to be stopped and restarted without resetting the date.
CertExpMonitor.nextStartDate.displayName=Next start date
CertExpMonitor.notAutoReplace.message=Although certificate monitoring is enabled, the replacement of expiring certificates is disabled. The certificate monitor will issue warnings of future certificate expiration dates. However, certificates are not automatically replaced. Manually replace expiring certificates.
CertExpMonitor.preThreshold.description=Specifies the number of days before the threshold date, specified by Expiration notification threshold, which the application warns that a certificate is about to be replaced. When a certificate is within the expiration threshold and automatic replacement is enabled, certificates will be replaced. This value specifies the time period before the threshold when warnings are issued by the certificate monitor about upcoming replacement.
CertExpMonitor.preThreshold.displayName=Certificate pre-notification threshold
CertExpMonitor.short.description=Configures the certificate expiration monitor.
CertExpMonitor.threshold.description=Specifies a threshold number of days when a certificate is replaced when Certificate replacement is enabled. If Certificate replacement is disabled, a message is written to the log file.
CertExpMonitor.threshold.displayName=Expiration replacement threshold
CertificateMapMode.CERTIFICATE_FILTER=CERTIFICATE_FILTER
CertificateMapMode.EXACT_DN=EXACT_DN
ChainedCerts.alias.description=Specifies the alias name to identify the certificate in the key store and used to label the certificate object.
ChainedCerts.alias.displayName=Alias
ChainedCerts.description=A chained personal certificate is a personal certificate that is created using another certificate's private key to sign it.
ChainedCerts.signingCert.description=Specifies the personal certificate in the root key store used to create the chained personal certificate.
ChainedCerts.signingCert.displayName=Root certificate used to sign the certificate
ClientCertificateAuthentication.displayName=Client certificate authentication
ClientCertificateAuthentication_i.description=Specifies whether clients connecting to this server must authenticate using Secure Sockets Layer (SSL) client certificates before invoking a method. For more information, see the extended help file by clicking the question mark (?) in the upper-right corner of the panel.
ClientCertificateAuthentication_o.description=Specifies whether to use Secure Sockets Layer (SSL) client certificates to authenticate to downstream servers. For more information, see the extended help file by clicking the question mark (?) in the upper-right corner of the panel.
ClientServerAuthMechanism.displayName=Allow client to server authentication with:
ClientServerAuthMechanism_i.description=Allow client to server authentication using Kerberos, LTPA or Basic authentication.
ConfigureFederatedRepositories.description=Secure the application serving environment 
ConfigureFederatedRepositories.displayName=Configure security
ConfigureFederatedRepositoriesTask.step1=Configure federated repository
ConfigureFederatedRepositoriesTask.step1.instruction=A secure, file-based user repository is built into the system for storing administrative users or environments with a small number of users. The file-based user repository can be federated with one or more external LDAP repositories. If this is the first time security has been enabled using this repository, provide a new user name and password to act as an administrator. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the built-in repository.
ConfigureLocalOperatingSystem.description=Secure the application serving environment 
ConfigureLocalOperatingSystem.displayName=Configure security
ConfigureLocalOperatingSystemTask.step1=Configure local operating system
ConfigureLocalOperatingSystemTask.step1.instruction=The user account repository stores users and group names that are used for authentication and authorization. The default repository is built into the application serving system and can be federated with one or more external Lightweight Directory Access Protocol (LDAP) repositories. You can also select a standalone external repository.
ConfigureStandaloneCustomRegistry.description=Secure the application serving environment 
ConfigureStandaloneCustomRegistry.displayName=Configure security
ConfigureStandaloneCustomRegistryTask.step1=Configure standalone custom registry
ConfigureStandaloneCustomRegistryTask.step1.instruction=Custom repositories, such as a database repository, require the definition of a Java(TM) class to access the database. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the repository.
ConfigureStandaloneLDAP.description=Secure the application serving environment 
ConfigureStandaloneLDAP.displayName=Configure security
ConfigureStandaloneLDAPTask.step1=Configure standalone LDAP registry
ConfigureStandaloneLDAPTask.step1.instruction=The repository stores users and group names that are used for authentication and authorization. The application server infrastructure can register users and groups. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the repository.
CookieConfig.description=Secure the following session cookies by prohibiting programmatic configuration. When a session cookie is used by multiple applications, cookie configurations set by one application can affect the cookie configuration and behavior for other applications in the cell. The session cookies that you specify on this page cannot be modified by your applications.
CookieConfig.displayName=Programmatic session cookie configuration
CookieConfig.domain.description=Specify the domain where the cookie must be used; for example, www.domain_name.com. Use the asterisk symbol (*) to indicate all domains.
CookieConfig.domain.displayName=Cookie Domain
CookieConfig.error.adding=An error occurred adding {0}: {1}
CookieConfig.error.deleting=An error occurred removing {0}: {1}
CookieConfig.name.description=Specify an alphanumeric name for the cookie. Use the asterisk symbol (*) to indicate all names.
CookieConfig.name.displayName=Cookie Name
CookieConfig.path.description=Specify the directory in the domain where the cookie is valid; for example, /path_name. Use the asterisk symbol (*) to indicate all paths.
CookieConfig.path.displayName=Cookie Path
CookieConfig.short.description=Secure cookies by disallowing programmatic configuration.
CustomUserRegistry.customRegistryClassName.description=Specifies a dot-separated class name that implements the UserRegistry interface in the com.ibm.websphere.security package.
CustomUserRegistry.customRegistryClassName.displayName=Custom registry class name
CustomUserRegistry.description=Specifies a custom registry that implements the UserRegistry interface in the com.ibm.websphere.security package. For backward compatibility, the application server also supports a custom registry that implements the CustomRegistry interface in the com.ibm.websphere.security package. When security is enabled and any of the properties on this panel are changed, go to the Security > Global security panel. Click Apply or OK to validate the changes.
CustomUserRegistry.displayName=Standalone custom registry
CustomUserRegistry.short.description=Specifies a custom registry that implements the UserRegistry interface in the com.ibm.websphere.security package.
DynamicSSLConfig.button.get=Get certificate aliases
DynamicSSLConfig.certAlias.description=Specifies the certificate alias that is used as the identity for the connection.
DynamicSSLConfig.certAlias.displayName=Certificate alias
DynamicSSLConfig.description=Dynamic endpoint configuration scopes represent an association between an Secure Sockets Layer (SSL) configuration and target protocol, host, and port. When an outbound connection is attempted, this association is verified ahead of the SSL configuration scope association. Based on the protocol,host,port target, the outbound SSL configuration might be different than the default that is specified in the SSL scope configuration.
DynamicSSLConfig.description.description=Specifies text that describes the purpose of this dynamic selection criteria.
DynamicSSLConfig.description.displayName=Description
DynamicSSLConfig.displayName=Dynamic outbound endpoint SSL configurations
DynamicSSLConfig.name.description=Specifies a unique name for the dynamic endpoint configuration.
DynamicSSLConfig.name.displayName=Name
DynamicSSLConfig.newSelectInfo.description=Specifies select information in the form protocol,host,port for the outbound connection. Multiple selection criteria can be entered. An asterisk (*) can be used to mean all protocols, hosts, or ports for any field.
DynamicSSLConfig.newSelectInfo.displayName=Add connection information
DynamicSSLConfig.selectInfo.description=Specifies the set of target protocol, host, port for the outbound request in the form protocol,host,port.
DynamicSSLConfig.selectInfo.displayName=Connection information
DynamicSSLConfig.selectInfo.displayNameHL=Connection Information
DynamicSSLConfig.short.description=Specifies the dynamic endpoint configuration scopes, which represent an association between an Secure Sockets Layer (SSL) configuration and target protocol, host, and port. 
DynamicSSLConfig.sslConfig.description=Specifies the Secure Sockets Layer (SSL) configuration that is used by requests at this scope when a match occurs for the given selection criteria.
DynamicSSLConfig.sslConfig.displayName=SSL configuration
DynamicSSLConfig.sslConfig.displayNameHL=SSL Configuration
EnableSecurity.description=This wizard assists you in securing your application serving environment. The application serving infrastructure can store administrative users and passwords or can use an existing registry with stored administrative users, application users, or both.
EnableSecurity.displayName=Configure security
EnableSecurityTask.step1=Specify extent of protection
EnableSecurityTask.step1.instruction=This wizard assists you in securing your application serving environment. The application serving infrastructure can store administrative users and passwords or can use an existing registry with stored administrative users, application users, or both.
ExchangeSigners.button.add=Add >>
ExchangeSigners.description=Extract a certificate from one key store and add it to another key store.
ExchangeSigners.displayName=Exchange signers
ExchangeSigners.exchange.description=Specifies the trusted (signer) certificates that are selected for the exchange. The key store personal certificates and trust store signer certificates that are listed currently are stored in the two specified key stores.
ExchangeSigners.exchange.displayName=Signers to exchange
ExchangeSigners.personalCerts.description=Specifies the personal certificates that are currently stored in the specified key store.
ExchangeSigners.personalCerts.displayName={0} certificates
ExchangeSigners.signerCerts.description=Specifies the trusted (signer) certificates that are currently stored in the specified key store.
ExchangeSigners.signerCerts.displayName={0} signers
Fips.128.description=Specifies Suite B cryptography will be used and is configured to accept a 128 bit key size. Keystore certificate algorithms require eliptical curve (EC) cryptography.
Fips.128.displayName=Enable Suite B: Accept 128 bit keys
Fips.192.description=Specifies Suite B cryptography will be used and is configured to accept a 192 bit key size. Keystore certificate algorithms require eliptical curve (EC) cryptography.
Fips.192.displayName=Enable Suite B: Accept 192 bit keys
Fips.description=Configures the Federal Information Processing Standard (FIPS)-compliant Java(TM) cryptography engine.
Fips.disable.description=Specifies FIPS is disabled.
Fips.disable.displayName=Disable FIPS
Fips.displayName=Manage FIPS
Fips.enableNew.description=Specifies SP800-131 is enabled.
Fips.enableNew.displayName=Enable SP800-131
Fips.enableOld.description=Specifies FIPS 140-2 is enabled.
Fips.enableOld.displayName=Enable FIPS 140-2
Fips.enableOld.protocol.description=Update SSL configurations to require TLS.
Fips.short.description=Configures FIPS.
Fips.strict.description=Specifies SSL configuration protocols and keystore certificates must conform to the SP300-131 standard.
Fips.strict.displayName=Strict
Fips.strict.protocol.description=Update SSL configurations to require TLSv1.2.
Fips.transition.description=Specifies SSL configuration protocols and keystore certificates are not required to be compliant with the SP800-131 standard.
Fips.transition.displayName=Transition
Fips.transition.protocol.description=Update SSL configurations to require TLS and accept TLSv1.2.
Fips.transition.protocolV1.2.description=Specifies the SSL configuration protocols will be changed to TLSv1.2.
Fips.transition.protocolV1.2.displayName=Update SSL configurations to require TLSv1.2
FipsConvert.128.description=Specifies the SHA256withECDSA signature algorithm used to convert certificates to conform to the Suite B standard using 128 key sizes.
FipsConvert.128.displayName=Suite B with 128 bit keys
FipsConvert.192.description=Specifies the SHA384withECDSA signature algorithm used to convert certificates to conform to the Suite B standard using 192 key sizes.
FipsConvert.192.displayName=Suite B with 192 bit keys
FipsConvert.algorithm.description=Specifies the signature algorithm used to convert the certificate to the selected security standard.
FipsConvert.algorithm.displayName=Algorithm
FipsConvert.badCerts.description=Lists certificates that can not be converted to the new security standard.
FipsConvert.badCerts.displayName=The following certificates are not compliant with the specified security standard and can not be converted.
FipsConvert.badCertsList.description=Specifies a list of certificates that can not be converted to the specified security standard. The certificate may have been created by a CA (certificate authority) or may reside in a read-only keystore.
FipsConvert.badCertsList.displayName=Certificates that can not be converted
FipsConvert.both.description=Specifies the signature algorithm used to convert certificates to conform to the Suite B standard with either 128 or 192 key sizes.
FipsConvert.both.displayName=Both
FipsConvert.certSize.description=Specifies the key size to use when converting the certificates.
FipsConvert.certSize.displayName=New certificate key size
FipsConvert.description=Convert certificates that can be converted to the selected security standard. All certificates in keystores associated with an SSL configuration will be converted.
FipsConvert.displayName=Convert certificates
FipsConvert.short.description=Convert certificates.
FipsConvert.strict.description=Specifies the signature algorithm used to convert certificates to conform to the SP800-131 standard.
FipsConvert.strict.displayName=Strict
FipsConvert.strictWithSuiteB.description=Specifies the signature algorithm used to convert certificates to conform to the SP800-131 with Suite B standard.
FipsConvert.strictWithSuiteB.displayName=Strict with Suite B
IBMTransport.displayName=SAS transport
IBMic.description=Use this panel to specify transport settings for connections that are accepted by the server using the IBM Secure Association Service (SAS) authentication protocol.
IBMic.displayName=SAS inbound transport
IBMoc.description=Use this panel to specify transport settings for connections that are initiated by the server using the IBM Secure Association Service (SAS) authentication protocol.
IBMoc.displayName=SAS outbound transport
IDMgr.URAm.set.error=An error occurred setting attribute {0}: {1}
IIOPSecurityProtocolKind.BOTH=CSI and SAS
IIOPSecurityProtocolKind.CSI=CSI
IIOPSecurityProtocolKind.IBM=SAS
IdMgr.AdminUser.ConfirmPassword.description=Confirms the password of the administrative user who manages the application server resources and user accounts.
IdMgr.AdminUser.ConfirmPassword.displayName=Confirm password
IdMgr.AdminUser.Password.description=Specifies the password of the administrative user who manages the application server resources and user accounts. 
IdMgr.AdminUser.Password.displayName=Password
IdMgr.AdminUser.description=When the realm includes the built-in repository, the primary administrative user account is stored in it. Apply a password to this account to enable security. After security is enabled, you can manage this account with Users and Groups in the administrative console.
IdMgr.AdminUser.description.newUser=The primary administrative username {0} does not currently exist in the repository and will be created.
IdMgr.AdminUser.displayName=Administrative user password
IdMgr.AdminUser.short.description=Specifies the password of the administrative user who manages the application server resources and user accounts.
IdMgr.BaseEntry.displayName=Base entry
IdMgr.BaseEntry.displayNameHL=Base Entry
IdMgr.Custom.description=Specifies the configuration for access to a custom repository.
IdMgr.Custom.displayName=Custom repository configuration
IdMgr.Entity.Parent.description=Specifies a base entry as the default parent.
IdMgr.Entity.Parent.displayName=Base entry for the default parent
IdMgr.Entity.Parent.displayNameHL=Base Entry for the Default Parent
IdMgr.Entity.RDN.description=Specifies the relative distinguished name (RDN(TM)) properties for the specified entity type.
IdMgr.Entity.RDN.displayName=Relative Distinguished Name properties
IdMgr.Entity.RDN.displayNameHL=Relative Distinguished Name Properties
IdMgr.Entity.Type.description=Specifies the entity type name.
IdMgr.Entity.Type.displayName=Entity type
IdMgr.Entity.Type.displayNameHL=Entity Type
IdMgr.Fed.DBAdminId.description=Specifies the user name of the database administrator that is used to access the entry mapping repository.
IdMgr.Fed.DBAdminId.displayName=Database administrator user name
IdMgr.Fed.DBAdminPwd.description=Specifies the password that is used to enable the database administrator to access the entry mapping repository.
IdMgr.Fed.DBAdminPwd.displayName=Password
IdMgr.Fed.DBurl.description=Specifies the web address for the entry mapping repository.
IdMgr.Fed.DBurl.displayName=Database URL
IdMgr.Fed.DirectDBAccess.displayName=Specify the following values to directly access the database:
IdMgr.Fed.JDBCDriver.description=Specifies the Java(TM) Database Connectivity (JDBC) driver that is used to access the entry mapping repository, for example, com.ibm.db2.jdbc.app.DB2Driver.
IdMgr.Fed.JDBCDriver.displayName=JDBC driver
IdMgr.Fed.Name.description=Specifies the Java(TM) Naming and Directory Interface (JNDI) name of the data source that is used to access the entry mapping repository.
IdMgr.Fed.Name.displayName=Data source name
IdMgr.Fed.Type.description=Specifies the type of database that is used for the entry mapping repository.
IdMgr.Fed.Type.displayName=Database type
IdMgr.File.baseDir.description=Specifies the base directory where the file is created to store the data.
IdMgr.File.baseDir.displayName=Base directory
IdMgr.File.builtin.description=Specifies the configuration for access to the built-in file repository.
IdMgr.File.builtinReserved.error=The repository identifier InternalFileRepository is reserved and can not be used.
IdMgr.File.description=Specifies the configuration for access to a file repository.
IdMgr.File.digestAlgorithm.SHA1=SHA-1
IdMgr.File.digestAlgorithm.SHA256=SHA-256
IdMgr.File.digestAlgorithm.SHA384=SHA-384
IdMgr.File.digestAlgorithm.SHA512=SHA-512
IdMgr.File.digestAlgorithm.description=Specifies the message digest algorithm to use for hashing the password.
IdMgr.File.digestAlgorithm.displayName=Message digest algorithm
IdMgr.File.displayName=File repository configuration
IdMgr.File.fileName.description=Specifies the file name of the repository.
IdMgr.File.fileName.displayName=File name
IdMgr.File.salt.description=Specifies the salt length of the randomly generated salt for password hashing.
IdMgr.File.salt.displayName=Salt length
IdMgr.Hostserver.displayName=Host server
IdMgr.LA.DBAdminId.description=Specifies the user name of the database administrator that is used to access the property extension repository.
IdMgr.LA.DBAdminId.displayName=Database administrator user name
IdMgr.LA.DBAdminPwd.description=Specifies the password that is used to enable the database administrator to access the property extension repository.
IdMgr.LA.DBAdminPwd.displayName=Password
IdMgr.LA.DBurl.description=Specifies the web address for the property extension repository.
IdMgr.LA.DBurl.displayName=Database URL
IdMgr.LA.JDBCDriver.description=Specifies the Java(TM) Database Connectivity (JDBC) driver that is used to access the property extension repository, for example, com.ibm.db2.jdbc.app.DB2Driver.
IdMgr.LA.JDBCDriver.displayName=JDBC driver
IdMgr.LA.Limit.description=Specifies the maximum number of entities that the system can retrieve from the property extension repository with a single database query.
IdMgr.LA.Limit.displayName=Entity retrieval limit
IdMgr.LA.Limit.units=Entities
IdMgr.LA.Name.description=Specifies the Java(TM) Naming and Directory Interface (JNDI) name of the data source used to access the property extension repository.
IdMgr.LA.Name.displayName=Data source name
IdMgr.LA.Type.description=Specifies the type of database that is used for the property extension repository.
IdMgr.LA.Type.displayName=Database type
IdMgr.LDAP.AddFailoverServer.displayName=Add
IdMgr.LDAP.AddFailoverServerText.displayName=Failover server used when primary is not available:
IdMgr.LDAP.AddSSLConfigButton.description=Add SSLConfig description
IdMgr.LDAP.AddSSLConfigButton.displayName=Add...
IdMgr.LDAP.Attribute.description=LDAP attribute description
IdMgr.LDAP.Attribute.displayName=LDAP attribute used as the repository identifier
IdMgr.LDAP.AttributeForKrb.description=Specifies the LDAP attribute for Kerberos principal name. This field can be modified when Kerberos is configured and it is one of the active or preferred authentication mechanisms
IdMgr.LDAP.AttributeForKrb.displayName=LDAP attribute for Kerberos principal name
IdMgr.LDAP.AuthLevel.Kerberos=Kerberos
IdMgr.LDAP.AuthLevel.None=None - no password required
IdMgr.LDAP.AuthLevel.Simple=Simple - password required
IdMgr.LDAP.AuthLevel.Strong=Strong - password with SSL
IdMgr.LDAP.AuthLevel.description=Specifies the level of security to use when authenticating to the Lightweight Directory Access Protocol (LDAP) server.
IdMgr.LDAP.AuthLevel.displayName=Authentication level
IdMgr.LDAP.BindDN.description=Specifies the distinguished name for the application server to use when binding to the Lightweight Directory Access Protocol (LDAP) repository.
IdMgr.LDAP.BindDN.displayName=Bind distinguished name
IdMgr.LDAP.BindPwd.description=Specifies the password for the application server to use when binding to the Lightweight Directory Access Protocol (LDAP) repository.
IdMgr.LDAP.BindPwd.displayName=Bind password
IdMgr.LDAP.CentrallyManaged.description=Specifies that the selection of a Secure Sockets Layer (SSL) configuration is based upon the outbound topology view for the Java(TM) Naming and Directory Interface (JNDI) platform.
IdMgr.LDAP.CentrallyManaged.displayName=Centrally managed
IdMgr.LDAP.CertFilter.description=Specifies the filter certificate mapping property for the Lightweight Directory Access Protocol (LDAP) filter. The filter is used to map attributes in the client certificate to entries within the LDAP repository.
IdMgr.LDAP.CertFilter.displayName=Certificate filter
IdMgr.LDAP.CertMapping.description=Specifies whether to map X.509 certificates into a Lightweight Directory Access Protocol (LDAP) directory by exact distinguished name or certificate filter. Specify the certificate filter to use the specified filter for the mapping.
IdMgr.LDAP.CertMapping.displayName=Certificate mapping
IdMgr.LDAP.ChangeLog.description=Specifies the type of support for change tracking.
IdMgr.LDAP.ChangeLog.displayName=Support for repository change tracking
IdMgr.LDAP.ChangeType_native=native
IdMgr.LDAP.ChangeType_native.description=Specifies that the repository's native change tracking mechanism is used by virtual member manager to return changed entities.
IdMgr.LDAP.ChangeType_none=none
IdMgr.LDAP.ChangeType_none.description=Specifies there is no change tracking support for this repository.
IdMgr.LDAP.CustomProp.description=Custom properties description
IdMgr.LDAP.CustomProp.displayName=Custom properties
IdMgr.LDAP.DirectoryType.AD.displayName=Microsoft Windows Active Directory
IdMgr.LDAP.DirectoryType.AD2000.displayName=Microsoft Windows 2000 Server Active Directory
IdMgr.LDAP.DirectoryType.AD2003.displayName=Microsoft Windows Server 2003 Active Directory
IdMgr.LDAP.DirectoryType.ADAM.displayName=Microsoft Active Directory Application Mode
IdMgr.LDAP.DirectoryType.DOMINO.displayName=IBM Lotus Domino
IdMgr.LDAP.DirectoryType.DOMINO5.displayName=IBM Lotus Domino Version 5
IdMgr.LDAP.DirectoryType.DOMINO6.displayName=IBM Lotus Domino Version 6
IdMgr.LDAP.DirectoryType.DOMINO65.displayName=IBM Lotus Domino Version 6.5
IdMgr.LDAP.DirectoryType.IDS.displayName=IBM Tivoli Directory Server
IdMgr.LDAP.DirectoryType.IDS4.displayName=IBM Tivoli Directory Server Version 4
IdMgr.LDAP.DirectoryType.IDS51.displayName=IBM Tivoli Directory Server Version 5.1
IdMgr.LDAP.DirectoryType.IDS52.displayName=IBM Tivoli Directory Server Version 5.2
IdMgr.LDAP.DirectoryType.IDS6.displayName=IBM Tivoli Directory Server Version 6
IdMgr.LDAP.DirectoryType.NDS.displayName=Novell Directory Services
IdMgr.LDAP.DirectoryType.ZOSDS.displayName=z/OS Integrated Security Services LDAP Server
IdMgr.LDAP.DirectoryType.description=Specifies the type of Lightweight Directory Access Protocol (LDAP) server to which you connect.
IdMgr.LDAP.DirectoryType.displayName=Directory type
IdMgr.LDAP.EnableReferral.description=Enables support to follow other configured LDAP servers. Only available on federated repositories.
IdMgr.LDAP.EnableReferral.displayName=Enable referral to other LDAP servers
IdMgr.LDAP.EntityType.description=Use this page to list federated repositories entity types that are supported by the LDAP repository, to select an entity type to view or change its configuration properties, or to add or remove the entity type.
IdMgr.LDAP.EntityType.detail.description=Use this page to manage the entity type that is supported by the LDAP repository.
IdMgr.LDAP.EntityType.displayName=Federated repositories entity types to LDAP object classes mapping
IdMgr.LDAP.FailoverHost.description=Specifies the host name of the failover Lightweight Directory Access Protocol (LDAP) server.
IdMgr.LDAP.FailoverHost.displayName=Failover host name
IdMgr.LDAP.FailoverHost.displayNameHL=Failover Host Name
IdMgr.LDAP.FailoverPort.description=Specifies the port of the failover Lightweight Directory Access Protocol (LDAP) server.
IdMgr.LDAP.FailoverPort.displayName=Port
IdMgr.LDAP.FailoverServer.displayName=Failover server
IdMgr.LDAP.HostName.description=Specifies the host name of the primary Lightweight Directory Access Protocol (LDAP) server. This host name is either an IP address or a domain name service (DNS) name.
IdMgr.LDAP.HostName.displayName=Primary host name
IdMgr.LDAP.LDAPServer.description=LDAP server description
IdMgr.LDAP.LDAPServer.displayName=LDAP server
IdMgr.LDAP.LoginProps.description=Specifies the federated repository property names to use to log into the application server. This field takes multiple login properties, delimited by a semicolon (;). For example, uid;mail. When there are multiple properties, the first property is used as the user security name and its value must be unique across all the configured repositories. Do not use LDAP attribute names if they are not defined in the federated repository data model schema.
IdMgr.LDAP.LoginProps.displayName=Federated repository properties for login 
IdMgr.LDAP.Performance.description=Opening new network connections to the LDAP server, establishing a new JNDI context, or accessing the LDAP server over the network might impact performance. Initialization impacts to performance are minimized by adding opened connections and contexts to internally maintained pools and reusing them. Minimize the impact to performance by maintaining internal caches of retrieved data.
IdMgr.LDAP.Performance.displayName=Performance
IdMgr.LDAP.Performance.short.description=Specifies configuration settings used to improve performance.
IdMgr.LDAP.Port.description=Specifies the Lightweight Directory Access Protocol (LDAP) server port.
IdMgr.LDAP.Port.displayName=Port
IdMgr.LDAP.ReferralType_Follow=follow
IdMgr.LDAP.ReferralType_Ignore=ignore
IdMgr.LDAP.ReferralType_Throw=throw
IdMgr.LDAP.RequireSSL.description=Specifies whether secure socket communication is enabled to the Lightweight Directory Access Protocol (LDAP) server. When enabled, the Secure Sockets Layer (SSL) settings for LDAP are used, if specified.
IdMgr.LDAP.RequireSSL.displayName=Require SSL communications
IdMgr.LDAP.SSLConfigName.description=SSL configuration name description
IdMgr.LDAP.Security.description=Security description
IdMgr.LDAP.Security.displayName=Security
IdMgr.LDAP.SpecificSSLConfig.description=Indicates a specific Secure Sockets Layer (SSL) configuration that is associated with this endpoint.
IdMgr.LDAP.SpecificSSLConfig.displayName=Specific to this endpoint
IdMgr.LDAP.SupportReferrals.description=Specifies how referrals that are encountered by the Lightweight Directory Access Protocol (LDAP) server are handled.
IdMgr.LDAP.SupportReferrals.displayName=Support referrals to other LDAP servers
IdMgr.LDAP.ViewButton.description=View description
IdMgr.LDAP.ViewButton.displayName=View
IdMgr.LDAP.description=Specifies the configuration for secure access to a Lightweight Directory Access Protocol (LDAP) repository with optional failover servers.
IdMgr.LDAP.displayName=LDAP repository configuration
IdMgr.LDAPAtrr.Class.description=Specifies the object class of the group that uses this member attribute. If this field is not defined, this member attribute applies to all group object classes.
IdMgr.LDAPAtrr.Class.displayName=Object class
IdMgr.LDAPAtrr.Name.description=Specifies the name of the member attribute in Lightweight Directory Access Protocol (LDAP), for example, member or uniqueMember.
IdMgr.LDAPAtrr.Name.displayName=Name of member attribute
IdMgr.LDAPAtrr.Scope.description=Specifies the scope of the member attribute.
IdMgr.LDAPAtrr.Scope.displayName=Scope
IdMgr.LDAPAtrr.ScopeAll.displayName=All - Contains all direct, nested, and dynamic members
IdMgr.LDAPAtrr.ScopeDirect.displayName=Direct - Contains only immediate members of the group without members of subgroups
IdMgr.LDAPAtrr.ScopeNested.displayName=Nested - Contains direct members and members nested within subgroups of this group
IdMgr.LDAPAttrs.defaultAttr.description=Specifies the default attribute of the LDAP attribute. If you do not specify this LDAP attribute when you create an entity to which this LDAP attribute applies, the system uses this value as the default attribute.
IdMgr.LDAPAttrs.defaultAttr.displayName=Default attribute
IdMgr.LDAPAttrs.defaultValue.description=Specifies the default value of the LDAP attribute. If you do not specify this LDAP attribute when you create an entity to which this LDAP attribute applies, the system adds the attribute using this default value.
IdMgr.LDAPAttrs.defaultValue.displayName=Default value
IdMgr.LDAPAttrs.description=Use this panel to specify supported, unsupported, and external LDAP attributes.
IdMgr.LDAPAttrs.displayName=Federated repositories property names to LDAP attributes mapping
IdMgr.LDAPAttrs.entityTypes.description=Specifies one or more entity types. Use ';' (semicolon) as the delimeter to specify multiple entity types.
IdMgr.LDAPAttrs.entityTypes.displayName=Entity types
IdMgr.LDAPAttrs.external.description=Use this panel to specify the properties of an external LDAP attribute.
IdMgr.LDAPAttrs.external.displayName=External
IdMgr.LDAPAttrs.external.title=New external LDAP attribute
IdMgr.LDAPAttrs.name.description=Specifies the name of the LDAP attribute used in the repository LDAP adapter.
IdMgr.LDAPAttrs.name.displayName=Name
IdMgr.LDAPAttrs.nameOrPropName.displayName=Name/Property Name
IdMgr.LDAPAttrs.propertyName.description=Specifies the name of the corresponding federated repository property.
IdMgr.LDAPAttrs.propertyName.displayName=Property name
IdMgr.LDAPAttrs.short.description=Specify supported, unsupported, and external LDAP attributes.
IdMgr.LDAPAttrs.singular.displayName=LDAP attribute
IdMgr.LDAPAttrs.supported.description=Use this panel to specify the properties of a supported LDAP attribute.
IdMgr.LDAPAttrs.supported.displayName=Supported
IdMgr.LDAPAttrs.supported.title=New supported LDAP attribute
IdMgr.LDAPAttrs.syntax.description=Specifies the syntax of the LDAP attribute. The default value is 'string'. For example, the syntax of the 'unicodePwd' LDAP attribute is 'octetString'.
IdMgr.LDAPAttrs.syntax.displayName=Syntax
IdMgr.LDAPAttrs.type.displayName=Type
IdMgr.LDAPAttrs.unSupported.displayName=Unsupported
IdMgr.LDAPAttrs.unSupported.title=New unsupported LDAP attribute
IdMgr.LDAPAttrs.unsupported.description=Use this panel to specify the properties of an unsupported LDAP attribute.
IdMgr.LDAPAttrs.wimGenerate.description=Specifies whether or not the federated repository should generate the value of the LDAP attribute.
IdMgr.LDAPAttrs.wimGenerate.displayName=Generate value
IdMgr.LDAPDynamicAtrr.Class.description=Specifies the object class of the group that contains this dynamic member attribute, for example, groupOfURLs. If this property is not defined, the dynamic member attribute applies to all group object classes.
IdMgr.LDAPDynamicAtrr.Class.displayName=Dynamic object class
IdMgr.LDAPDynamicAtrr.Name.description=Specifies the name of the attribute that defines the filter for dynamic group members in Lightweight Directory Access Protocol (LDAP), for example, memberURL.
IdMgr.LDAPDynamicAtrr.Name.displayName=Name of dynamic member attribute
IdMgr.LDAPEntity.Bases.description=Specifies the search bases in LDAP that are used to search this entity type. If not specified, configured base entry in the repository will be used to search this entity type. Multiple search bases are delimited by a semicolon (;).
IdMgr.LDAPEntity.Bases.displayName=Search bases
IdMgr.LDAPEntity.Filter.description=Specifies the Lightweight Directory Access Protocol (LDAP) search filter that is used to search this entity type. If a search filter is not specified, the object classes are used as the search filter.
IdMgr.LDAPEntity.Filter.displayName=Search filter
IdMgr.LDAPEntity.ObjClasses.description=Specifies the object classes that are mapped to this entity type. Lightweight Directory Access Protocol (LDAP) entries that contain one or more of the object classes belong to this entity type. Multiple objectclasses are delimited by a semicolon (;).
IdMgr.LDAPEntity.ObjClasses.displayName=Object classes
IdMgr.LDAPEntity.ObjClasses.displayNameHL=Object Classes
IdMgr.LDAPEntity.ObjClassesCreation.description=Object classes for creation description
IdMgr.LDAPEntity.ObjClassesCreation.displayName=Object classes for creation
IdMgr.LDAPEntity.Type.description=Specifies the federated repositories entity type. For example, PersonAccount, Group, OrgContainer, etc.
IdMgr.LDAPEntity.Type.displayName=Entity type
IdMgr.LDAPEntity.Type.displayNameHL=Entity Type
IdMgr.LDAPGroup.AttributeName.description=Specifies the name of the group membership attribute.
IdMgr.LDAPGroup.AttributeName.displayName=Name of group membership attribute
IdMgr.LDAPGroup.AttributeScope.description=Specifies the scope of the group membership attribute.
IdMgr.LDAPGroup.AttributeScope.displayName=Scope of group membership attribute
IdMgr.LDAPGroup.AttributeScope_All=all
IdMgr.LDAPGroup.AttributeScope_Direct=direct
IdMgr.LDAPGroup.AttributeScope_Nested=nested
IdMgr.LDAPGroup.DynamicMemberAttribute.description=Use this page to manage Lightweight Directory Access Protocol (LDAP) dynamic member attributes.
IdMgr.LDAPGroup.DynamicMemberAttribute.displayName=Dynamic member attributes
IdMgr.LDAPGroup.MemberAttribute.description=Use this page to manage Lightweight Directory Access Protocol (LDAP) member attributes.
IdMgr.LDAPGroup.MemberAttribute.displayName=Member attributes
IdMgr.LDAPGroup.Name.displayName=Name
IdMgr.LDAPGroup.ObjectClass.displayName=Object class
IdMgr.LDAPGroup.ObjectClass.displayNameHL=Object Class
IdMgr.LDAPGroup.Scope.displayName=Scope
IdMgr.LDAPGroup.description=Use this page to specify the name of the group membership attribute. Every Lightweight Directory Access Protocol (LDAP) entry includes this attribute to indicate the groups to which this entry belongs.
IdMgr.LDAPGroup.displayName=Group attribute definition
IdMgr.LDAPGroup.short.description=Specifies the name of the group membership attribute. 
IdMgr.LDAPPerf.Cache.distPolicy.NONE=Not shared
IdMgr.LDAPPerf.Cache.distPolicy.PUSH=Push
IdMgr.LDAPPerf.Cache.distPolicy.PUSH_PULL=Push and pull
IdMgr.LDAPPerf.Cache.distPolicy.description=Specifies the distribution policy for the cache in a clustered environment.
IdMgr.LDAPPerf.Cache.distPolicy.displayName=Distribution policy
IdMgr.LDAPPerf.CacheAttributes.description=Specifies whether to cache the attributes that are returned from the Lightweight Directory Access Protocol (LDAP) server.
IdMgr.LDAPPerf.CacheAttributes.displayName=Cache the attributes
IdMgr.LDAPPerf.CacheAttributes.units=Attributes
IdMgr.LDAPPerf.CacheAttributes.validationLabel=Attribute cache size
IdMgr.LDAPPerf.CacheAttributesTimeout.units.description=Specifies the maximum number of seconds the cached attributes can stay in the cache.
IdMgr.LDAPPerf.CacheAttributesTimeout.validationLabel=Attribute cache timeout
IdMgr.LDAPPerf.CacheSearchResults.description=Specifies whether to cache the search results that are returned from the Lightweight Directory Access Protocol (LDAP) server.
IdMgr.LDAPPerf.CacheSearchResults.displayName=Cache the search results
IdMgr.LDAPPerf.CacheSearchResults.validationLabel=Search results cache size
IdMgr.LDAPPerf.CacheSearchResultsTimeout.units.description=Specifies the maximum number of seconds the cached search results can stay in the cache.
IdMgr.LDAPPerf.CacheSearchResultsTimeout.validationLabel=Search results cache timeout
IdMgr.LDAPPerf.CacheSize.description=Specifies the maximum size of the cache.
IdMgr.LDAPPerf.CacheSize.displayName=Cache size
IdMgr.LDAPPerf.CacheSize.units=Entries
IdMgr.LDAPPerf.CacheTimesOut.description=Specifies whether the cache times out after the specified number of seconds.
IdMgr.LDAPPerf.CacheTimesOut.displayName=Cache times out
IdMgr.LDAPPerf.Caches.description=Caches description
IdMgr.LDAPPerf.Caches.displayName=Caches
IdMgr.LDAPPerf.ConnectTimeout.description=Specifies whether to limit the time to wait before a connection attempt is aborted.
IdMgr.LDAPPerf.ConnectTimeout.displayName=Connect timeout
IdMgr.LDAPPerf.ConnectTimeout.units=seconds
IdMgr.LDAPPerf.ConnectTimeout.units.description=Specifies the time to wait in seconds before a connection attempt is aborted. The same value is used as the read timeout. A value of zero means to use the network protocol's (i.e., TCP's) timeout value.
IdMgr.LDAPPerf.ConnectTimeout.validationLabel=Connect timeout value
IdMgr.LDAPPerf.ConnectionPooling.description=Specifies whether to utilize the connection pooling function, which is provided in the Software Development Kit (SDK).
IdMgr.LDAPPerf.ConnectionPooling.displayName=Use connection pooling
IdMgr.LDAPPerf.ContextPool.description=Specifies whether context pooling is enabled to the Lightweight Directory Access Protocol (LDAP) server. To improve performance, use the context pool in combination with connection pooling.
IdMgr.LDAPPerf.ContextPool.displayName=Context pool
IdMgr.LDAPPerf.ContextPoolTimeout.validationLabel=Context pool timeout
IdMgr.LDAPPerf.ContextPoolTimesOut.description=Specifies whether the context pool times out and removes idle context instances.
IdMgr.LDAPPerf.ContextPoolTimesOut.displayName=Context pool times out
IdMgr.LDAPPerf.EnableContextPool.description=Specifies whether context pooling is enabled to the Lightweight Directory Access Protocol (LDAP) server. To improve performance, use the context pool in combination with connection pooling.
IdMgr.LDAPPerf.EnableContextPool.displayName=Enable context pool
IdMgr.LDAPPerf.InitialSize.description=Specifies the number of context instances in the pool when the pool is initially created by the Lightweight Directory Access Protocol (LDAP) repository.
IdMgr.LDAPPerf.InitialSize.displayName=Initial size
IdMgr.LDAPPerf.InitialSize.validationLabel=Initial size entries
IdMgr.LDAPPerf.LimitSearchReturns.description=Specifies whether to limit the number of entries that are returned in a search result.
IdMgr.LDAPPerf.LimitSearchReturns.displayName=Limit search returns
IdMgr.LDAPPerf.LimitSearchReturns.units=entries
IdMgr.LDAPPerf.LimitSearchReturns.units.description=Specifies the maximum number of entries that are returned in a search result.
IdMgr.LDAPPerf.LimitSearchReturns.validationLabel=Search entries returned
IdMgr.LDAPPerf.LimitSearchTime.description=Specifies whether to limit the time for a Lightweight Directory Access Protocol (LDAP) server to respond before stopping a search request.
IdMgr.LDAPPerf.LimitSearchTime.displayName=Limit search time
IdMgr.LDAPPerf.LimitSearchTime.units=milliseconds
IdMgr.LDAPPerf.LimitSearchTime.units.description=Specifies the time in milliseconds for a Lightweight Directory Access Protocol (LDAP) server to respond before stopping a search request.
IdMgr.LDAPPerf.LimitSearchTime.validationLabel=Search time value
IdMgr.LDAPPerf.MaximumSize.description=Specifies the maximum number of context instances that can be maintained concurrently by the context pool. Both in-use and idle context instances contribute to this number.
IdMgr.LDAPPerf.MaximumSize.displayName=Maximum size
IdMgr.LDAPPerf.MaximumSize.validationLabel=Maximum size entries
IdMgr.LDAPPerf.PreferredSize.description=Specifies the preferred number of context instances that the context pool maintains. Both in-use and idle context instances contribute to this number.
IdMgr.LDAPPerf.PreferredSize.displayName=Preferred size
IdMgr.LDAPPerf.PreferredSize.validationLabel=Preferred size entries
IdMgr.LDAPPerf.Timeout.units=Seconds
IdMgr.LDAPPerf.Timeout.units.description=Specifies the number of seconds for the context pool to time out and remove idle context instances.
IdMgr.Realm.AddRepositoryButton.displayName=New Repository...
IdMgr.Realm.BaseEntry.description=Specifies the distinguished name (DN) of the base (or parent) entry that uniquely identifies this set of entries in federated repositories.
IdMgr.Realm.BaseEntry.displayName=Unique distinguished name of the base (or parent) entry in federated repositories
IdMgr.Realm.NameInRepo.description=Specifies the distinguished name (DN) of the base entry or subtree within the main repository. The descendents of this DN are mapped to the base entry in the federated repositories (specified above) to uniquely identify them. If left blank, the root is used for LDAP repositories.
IdMgr.Realm.NameInRepo.displayName=Distinguished name of a subtree in the main repository
IdMgr.Realm.RepositoryId.description=Specifies a list of the available repositories.
IdMgr.Realm.RepositoryId.displayName=Repository identifier
IdMgr.Realm.SpecifyNameInRepo.description=Select the check box to specify the value of the distinguished name in the repository if it is different from the distinguished name in federated repositories.
IdMgr.Realm.SpecifyNameInRepo.displayName=Distinguished name in the repository is different
IdMgr.RealmCollection.displayName=Repositories in the realm:
IdMgr.RealmName.description=Specifies the name of the realm.
IdMgr.RealmName.displayName=Realm name
IdMgr.Repo.Config.displayName=Repository configuration
IdMgr.Repo.Host.description=Host server description
IdMgr.Repo.Host.displayName=Host server
IdMgr.Repo.Id.description=Specifies a unique identifier for the repository. This identifier uniquely identifies the repository within the cell.
IdMgr.Repo.Id.displayName=Repository identifier
IdMgr.Repo.Id.displayNameHL=Repository Identifier
IdMgr.Repo.Type.Custom=Custom repository
IdMgr.Repo.Type.DB=Database repository
IdMgr.Repo.Type.File=File repository
IdMgr.Repo.Type.LDAP=LDAP repository
IdMgr.Repo.Type.description=Specifies the repository type, such as File or LDAP.
IdMgr.Repo.Type.displayName=Repository type
IdMgr.Repo.Type.displayNameHL=Repository Type
IdMgr.RepositoryClass.description=Specifies the implementation class name for the repository adapter. For a User Registry bridge, use com.ibm.ws.wim.adapter.urbridge.URBridge.
IdMgr.RepositoryClass.displayName=Repository adapter class name
IdMgr.RepositoryClass.displayNameHL=Repository Adapter Class Name
IdMgr.RepositoryConfig.description=Repositories that are configured in the system are listed in the following table. You can add or delete external repositories.
IdMgr.RepositoryConfig.displayName=Manage repositories
IdMgr.RepositoryConfig.short.description=Specifies a list of repositories that are configured in the system.
IdMgr.RepositoryId.description=Specifies a unique identifier for the repository. This identifier uniquely identifies the repository within the cell.
IdMgr.RepositoryId.displayName=Repository identifier
IdMgr.RepositoryId.displayNameHL=Repository Identifier
IdMgr.RepositoryRef.description=Specifies a set of identity entries in a repository that are referenced by a base (or parent) entry into the directory information tree. If multiple repositories or multiple subtrees of the same repository are included in the same realm, it might be necessary to define additional distinguished names to uniquely identify this set of entries within the realm.
IdMgr.RepositoryRef.displayName=Repository reference
IdMgr.RepositoryRef.short.description=Specifies a set of identity entries in a repository that are referenced by a base (or parent) entry into the directory information tree.
IdMgr.RepositoryType.description=Specifies the repository type.
IdMgr.RepositoryType.displayName=Repository type
IdMgr.RepositoryType.displayNameHL=Repository Type
IdMgr.URAm.attribute.description=Specifies the name of the user regisry's user or group attribute to map.
IdMgr.URAm.attribute.displayName=Attribute
IdMgr.URAm.mappings.description=Specifies the mapping for a user registry's user or group attribute to a federated repostitory property.
IdMgr.URAm.mappings.displayName=Attribute mappings
IdMgr.URAm.propertyForInput.description=Specifies the name of the federated repository property that maps to the specified user registry attribute when it is an input parameter for the user registry interface.
IdMgr.URAm.propertyForInput.displayName=Property for Input
IdMgr.URAm.propertyForOutput.description=Specifies the name of the federated repository property that maps to the specified user registry attribute when it is an output parameter (return value) for the user registry interface.
IdMgr.URAm.propertyForOutput.displayName=Property for Output
IdMgr.VR.Add.displayName=Add repositories (LDAP, custom, etc)...
IdMgr.VR.Entity.description=Use this page to configure entity types that are supported by the member repositories.
IdMgr.VR.Entity.displayName=Supported entity types
IdMgr.VR.Fed.description=A database can be used to manage several aspects of federated repositories, such as preventing entry identifier collisions, maintaining references to identities whose identifiers might change, using multiple repositories for additional identities, and improving performance. Supply a valid data source, a direct connection configuration, or both. The system first tries to connect by way of the data source. If the data source is not available, then the system uses the direct access configuration.
IdMgr.VR.Fed.displayName=Entry mapping repository
IdMgr.VR.Fed.short.description=Specifies the entry mapping repository used to manage several aspects of federated repositories.
IdMgr.VR.LA.description=The properties of repository entries can be extended by using a database to associate additional properties with the entries. Supply a valid data source, a direct connection configuration, or both. The system first tries to connect by way of the data source. If the data source is not available, then the system uses the direct access configuration.
IdMgr.VR.LA.displayName=Property extension repository
IdMgr.VR.LA.short.description=Specifies the property extension repository that is used to extend the properties of repository entries.
IdMgr.VR.Remove.displayName=Remove
IdMgr.VR.URAm.description=Use this panel to set or modify the mapping for a user registry's user or group attribute to a federated repostitory property.
IdMgr.VR.URAm.displayName=User repository attribute mapping
IdMgr.VR.URAm.short.description=Specifies user or group attribute mappings to a federated repository.
IdMgr.VR.UseBuiltin.displayName=Use built-in repository
IdMgr.VR.description=By federating repositories, identities stored in multiple repositories can be managed in a single, virtual realm. The realm can consist of identities in the file-based repository that is built into the system, in one or more external repositories, or in both the built-in repository and one or more external repositories.
IdMgr.VR.displayName=Federated repositories
IdMgr.allowOps.description=Specifies whether operations (such as login, search, or get) are allowed even if the repositories in the realm are down.
IdMgr.allowOps.displayName=Allow operations if some of the repositories are down
IdMgr.dbType.db2=DB2
IdMgr.dbType.db2iseries=DB2 for iSeries
IdMgr.dbType.db2zos=DB2 for z/OS
IdMgr.dbType.derby=Derby
IdMgr.dbType.informix=Informix
IdMgr.dbType.oracle=Oracle
IdMgr.dbType.sqlserver=SQL Server
IdMgr.delimiter.description=Specifies the delimiter used for this realm.
IdMgr.delimiter.displayName=Realm delimiter
IdMgr.domain.useGlobalSchema.description=Specifies whether the global schema is used for this domain.
IdMgr.domain.useGlobalSchema.displayName=Use global schema for model
IdentityAssertion.displayName=Use identity assertion
IdentityAssertion.safMapCert.description=Maps a certificate received in the CSIv2 transport layer to an SAF user identity using an RACMAP filter.
IdentityAssertion.safMapCert.displayName=Map certificate using SAF distributed identity mapping
IdentityAssertion.safMapCertDN.description=Maps an asserted certificate and distinguished name to an SAF user identity using an RACMAP filter.
IdentityAssertion.safMapCertDN.displayName=Map certificate and DN using SAF distributed identity mapping
IdentityAssertion.specifyTrustedId.description=Specifies an alternative trusted identity that is used to establish trust with the target server.
IdentityAssertion.specifyTrustedId.displayName=Specify an alternative trusted identity
IdentityAssertion.trustedId.description=Specifies a trusted user identity that is used during identity assertion.
IdentityAssertion.trustedId.displayName=Trusted identity
IdentityAssertion.trustedPassword.description=Specifies the password that is used with the trusted identity
IdentityAssertion.trustedPassword.displayName=Password
IdentityAssertion.useServerId.description=Uses the server identity to establish trust with the target server. The server identity is specified on the Specify user identity for interoperability panel of the enabled repository.
IdentityAssertion.useServerId.displayName=Use server trusted identity
IdentityAssertionLayer.trustedServers.description=Specifies a pipe (|)-separated list of server identities, which are trusted to perform identity assertion to this server.
IdentityAssertionLayer.trustedServers.displayName=Trusted identities
IdentityAssertion_i.description=When you enable identity assertion, this server permits an upstream server to assert a client identity. The upstream server has already authenticated the identity as a method of authentication to this downstream server.
IdentityAssertion_o.description=When you enable identity assertion, this server can assert received client identities. These client identities are authenticated on this server to downstream servers as a method of authentication. The downstream server does not re-authenticate the asserted identity because it trusts this server. List the principal of this server in the trusted principal list for the downstream server.
Inbound.displayName=Inbound
JAASAuthData.1entry=1 entry
JAASAuthData.addNodename.description=Selecting this option will cause the system to automatically prefix each new alias that you create with the node name of the cell. Clear the checkbox if you do not have any scripts in the earlier releases that expect the node name in the alias.
JAASAuthData.addNodename.displayName=Prefix new alias names with the node name of the cell (for compatibility with earlier releases)
JAASAuthData.alias.description=Specifies the name of the authentication data entry.
JAASAuthData.alias.displayName=Alias
JAASAuthData.description=Specifies a list of user identities and passwords for Java(TM) 2 connector security to use.
JAASAuthData.description.description=Specifies an optional description for the authentication data entry. For example, this authentication data entry is used to connect to DB2(R).
JAASAuthData.description.displayName=Description
JAASAuthData.displayName=JAAS Authentication Data
JAASAuthData.domain.description=Specifies a list of user identities and passwords for Java(TM) 2 connector security to use. Resources in this security domain can access the global J2C authentication aliases as well as the aliases below.
JAASAuthData.entries={0} entries
JAASAuthData.password.description=Specifies the password to use for the target enterprise information system (EIS).
JAASAuthData.password.displayName=Password
JAASAuthData.userId.description=Specifies the Java(TM) 2 Connector (J2C) authentication data user ID.
JAASAuthData.userId.displayName=User ID
JAASConfiguration.description=
JAASConfiguration.displayName=JAAS Configuration
JAASConfiguration.entries.description=Specifies a list of login modules of the type javax.security.auth.login.AppConfigurationEntry.
JAASConfiguration.entries.displayName=Entries
JAASConfigurationEntry.1entry=1 login configuration
JAASConfigurationEntry.alias.description=Specifies the alias name for the Java(TM) Authentication and Authorization Service (JAAS) login.
JAASConfigurationEntry.alias.displayName=Alias
JAASConfigurationEntry.description=Defines login configurations that are used by Java(TM) Authentication and Authorization Service (JAAS). You cannot remove the default login configurations because doing so might cause applications to fail.
JAASConfigurationEntry.displayName=JAAS configuration entry
JAASConfigurationEntry.domain.description=Defines login configurations that are used by Java(TM) Authentication and Authorization Service (JAAS). Resources in this security domain can access the global application login configurations as well as the configurations below.
JAASConfigurationEntry.entries={0} login configurations
JAASConfigurationEntry.individual.warning={0} is a default login module and cannot be deleted.
JAASConfigurationEntry.loginModules.description=Each entry in the login configuration must contain at least one login module. However, you can define more than one login module for a login configuration. If more than one login module is defined for a login configuration, the login modules are processed in the order in which they are defined.
JAASConfigurationEntry.loginModules.displayName=JAAS login modules
JAASConfigurationEntry.short.description=Defines login configurations that are used by Java(TM) Authentication and Authorization Service (JAAS).
JAASConfigurationEntry.warning=You cannot delete the following default login modules: {0}
JAASConfigurationSetOrder.Alias=JAAS login module classname
JAASConfigurationSetOrder.SearchOrder.description=Specifies the Java(TM) Authentication and Authorization Service (JAAS) login module search order.
JAASConfigurationSetOrder.SearchOrder.displayName=JAAS login module search order
JAASConfigurationSetOrder.Select=Select
JAASConfigurationSetOrder.description=Specifies the Java(TM) Authentication and Authorization Service (JAAS) login module order.
JAASConfigurationSetOrder.displayName=JAAS login module order
JAASLoginModule.authenticationStrategy.description=Specifies the behavior as the authentication process proceeds through the stack of login modules.
JAASLoginModule.authenticationStrategy.displayName=Authentication strategy
JAASLoginModule.authenticationStrategy.displayNameHL=Authentication Strategy
JAASLoginModule.description=Each entry in the login configuration must contain at least one login module. However, you can define more than one login module for a login configuration. If you define more than one login module for a login configuration, they are processed in the order that they are defined.
JAASLoginModule.displayName=JAAS login modules
JAASLoginModule.moduleClassName.description=Specifies the class name of the given login module.
JAASLoginModule.moduleClassName.displayName=Module class name
JAASLoginModule.moduleClassName.displayNameHL=Module Class Name
JAASLoginModule.moduleOrder.description=The order of the given login module.
JAASLoginModule.moduleOrder.displayName=Module order
JAASLoginModule.moduleOrder.displayNameHL=Module Order
JAASLoginModule.options.description=These custom properties define module options that are in a space-separated list of login module-specific values. These values are passed directly to the underlying login modules. Options are defined by the login module and control the behavior within the module. For example, a login module might define options to support debugging or testing capabilities. To specify the debugging option in the configuration, use the following key and value pairing: debug=true. Separate the key and value by an equal sign. Note that there is not a limit to the number of options that you can define for a login module.
JAASLoginModule.options.displayName=Custom properties
JAASLoginModule.proxyClassName.description=Specifies the proxy class name of the given login module.
JAASLoginModule.proxyClassName.displayName=Proxy class name
JAASLoginModule.useProxy.description=Select this option to use an application server-defined login module proxy class that delegates calls to the real login module, which is defined in the Module class name field. Use the proxy when this login configuration is used by a version of the application server that contains a Software Development Kit (SDK) version prior to 1.4.2.
JAASLoginModule.useProxy.displayName=Use login module proxy
JAASModuleControlFlag.OPTIONAL=OPTIONAL
JAASModuleControlFlag.REQUIRED=REQUIRED
JAASModuleControlFlag.REQUISITE=REQUISITE
JAASModuleControlFlag.SUFFICIENT=SUFFICIENT
Kerberos.AllowOnlyKrb.description=Enables the WebSphere Application Server to have Kerberos as its only authenticationmechanism.
Kerberos.AllowOnlyKrb.displayName=Allow only Kerberos authentication
Kerberos.FederatedUserRepository.description=Federated user repositories
Kerberos.FederatedUserRepository.displayName=Federated user repositories
Kerberos.LDAPUserRegFilter.description=LDAP user registry filter settings
Kerberos.LDAPUserRegFilter.displayName=LDAP user registry filter settings
Kerberos.MappingPrincipal.label=Mapping Kerberos principal names to SAF identities
Kerberos.TrimUser.description=Specifies whether SPNEGO removes the suffix of the principal user name, starting from the @ that precedes the Kerberos realm name.
Kerberos.TrimUser.displayName=Trim Kerberos realm from principal name
Kerberos.configFile.description=The Kerberos configuration file, krb5.conf or krb5.ini, contains client configuration information, including the locations of the Key Distribution Centers (KDCs) for the realm of interest. The krb5.conf file is used for all platforms except Windows, which uses the krb5.ini file. This same file is used for both Kerberos authentication and SPNEGO web authentication
Kerberos.configFile.displayName=Kerberos configuration file with full path
Kerberos.configFile.domain.description=The Kerberos configuration file, krb5.conf or krb5.ini, contains client configuration information, including the locations of the Key Distribution Centers (KDCs) for the realm of interest. The krb5.conf file is used for all platforms except Windows, which uses the krb5.ini file.
Kerberos.description=Encrypts authentication information so that the application server can send the data from one server to another in a secure manner. The encryption of authentication information that is exchanged between servers involves the Kerberos mechanism. Kerberos must be configured before this option can be selected
Kerberos.displayName=Kerberos
Kerberos.keytabFile.description=The Kerberos keytab file contains one or more Kerberos service principal names and keys. This same file is used for both Kerberos authentication and SPNEGO web authentication
Kerberos.keytabFile.displayName=Kerberos keytab file name with full path
Kerberos.keytabFile.domain.description=The Kerberos keytab file contains one or more Kerberos service principal names and keys.
Kerberos.realm.description=The name of your Kerberos realm. In most cases, your realm is your domain. name in uppercase letters. For example, a machine with the domain name of test.austin.ibm.com would usually have a Kerberos realm name of AUSTIN.IBM.COM.
Kerberos.realm.displayName=Kerberos realm name
Kerberos.realm.displayNameHL=Kerberos Realm Name
Kerberos.service.description=By convention, a Kerberos service principal is divided into three parts: the primary, the instance, and the Kerberos realm name. The format of the Kerberos service principal name is <service>/<fully qualified host name>@KERBEROS_REALM. The service name is the first part of the Kerberos service principal name. For example, in WAS/test.austin.ibm.com@AUSTIN.IBM.COM, the service name is WAS.
Kerberos.service.displayName=Kerberos service name
Kerberos.useMapModule.description=Choose this option to map a Kerberos principal to an SAF user, where the Kerberos principal is specified in the KERB segment of that SAF user.
Kerberos.useMapModule.displayName=Use the KERB segment of an SAF user profile
Kerberos.useNone.description=Choose this option if the Kerberos principal name exactly matches an SAF user so that mapping is not necessary, or if a JAAS login module is configured to do the mapping.
Kerberos.useNone.displayName=Do not use SAF profiles for mapping Kerberos principals to SAF identities
Kerberos.useRACMAP.description=Choose this option to map a Kerberos principal to an SAF user, where the Kerberos principal and the Kerberos realm are specified in the RACMAP profiles of the SAF product. To select this option, the SAF product must support distributed identity mapping.
Kerberos.useRACMAP.displayName=Use the RACMAP profiles in the SAF product for distributed identity mapping
KerberosAndLTPA.description=Kerberos authentication with LTPA supported
KerberosAndLTPA.displayName=Kerberos and LTPA
KerberosAndLTPA.restricted.displayName=<strong>(This function is currently disabled. See the IBM Support site for possible future updates.)</strong>
KerberosConfig.description=Encrypts authentication information so that the application server can send the data from one server to another in a secure manner. The encryption of authentication information that is exchanged between servers involves the KRB5 or LTPA mechanism.
KerberosConfig.displayName=Kerberos configuration
KeyManager.algorithm.description=Specifies the algorithm name of the key manager that is implemented by the selected provider.
KeyManager.algorithm.displayName=Algorithm
KeyManager.className.description=Specifies the name of the key manager implementation class.
KeyManager.className.displayName=Class name
KeyManager.className.displayNameHL=Class Name
KeyManager.description=Specifies the implementation settings for key managers. A key manager is invoked during a Secure Sockets Layer (SSL) handshake to determine which certificate alias is used. The default key manager (WSX509KeyManager) performs alias selection. If more advanced function is desired, define a custom key manager  on the Secure communications > Manage endpoint security configurations panel.
KeyManager.displayName=Key managers
KeyManager.implCustom.description=Specifies that the key manager selection that is based on a custom implementation class. The class implements the javax.net.ssl.X509KeyManager interface and optionally the com.ibm.wsspi.ssl.KeyManagerExtendedInfo interface to obtain additional connection information that is not otherwise available.
KeyManager.implCustom.displayname=Custom
KeyManager.implSettings.description=Specifies the implementation settings for this key manager.
KeyManager.implSettings.displayName=Implementation settings
KeyManager.implStandard.description=Specifies that the key manager selection that is available from a Java(TM) provider that is installed in the java.security file. This provider might be shipped by Java(TM) Secure Sockets Extension (JSSE) or be a custom provider that implements an X509KeyManager interface.
KeyManager.implStandard.displayName=Standard
KeyManager.name.description=Specifies the name of the key manager, which you can select on the SSL configuration panel.
KeyManager.name.displayName=Name
KeyManager.provider.description=Specifies the provider name that has an implementation of an X509KeyManager interface. This provider is typically set to IBMJSSE2.
KeyManager.provider.displayName=Provider
KeyManager.short.description=Specifies the implementation settings for key managers.
KeyStore.bothOrNeither.keyringUsers=You must specify both the control region user and servant region user or specify neither.
KeyStore.changePassword=Change password...
KeyStore.chgPwd.description=Change the password for the key store.
KeyStore.chgPwd.displayName=Change password
KeyStore.crLink.description=Specifies the properties for the control region keyring for this key store.
KeyStore.crLink.displayName=Control region keyring
KeyStore.crUser.description=Specifies the Control region Started Task user ID in which the Control region SAF keyring will be created. The user ID must match the exact ID being used by the Control region. Note: This option only applies when creating writable SAF keyrings on z/OS.
KeyStore.crUser.displayName=Control region user
KeyStore.description.description=Specifies a description of the key store.
KeyStore.description.displayName=Description
KeyStore.exchangeCerts=Exchange personal certificates...
KeyStore.exchangeSigners=Exchange signers...
KeyStore.fileBased.description=Specifies whether the keystore type is file-based or process-based. Process-based key stores require MBean calls for updates.
KeyStore.fileBased.displayName=File-based key store
KeyStore.hostList.description=Specifies a host (or list of hosts) to contact to perform the key store operation. Multiple hosts may be listed, separated by a | character, but updates are not guaranteed to be atomic. This means that if a key store on one host could not be reached, the key store on another host in the list will be updated anyway, and therefore would contain differences. They are not guaranteed to stay in sync with each other.
KeyStore.hostList.displayName=Host list
KeyStore.initAtStartup.description=Specifies whether the key store needs to be initialized before it can be used for cryptographic operations. If enabled, the key store is initialized at server start up.
KeyStore.initAtStartup.displayName=Initialize at startup
KeyStore.keystoreClassName.description=
KeyStore.keystoreClassName.displayName=Custom key store class name
KeyStore.managed.description=Specifies whether the key store is remotely managed, which means that a remote MBean call is needed to update the key store based on the host name specified in the host list field. Most hardware cryptographic token devices are remotely managed. If a key store is marked remotely managed, list the host name of the server where the device is installed in the Host list field.
KeyStore.managed.displayName=Remotely managed
KeyStore.newTemplate=New from template
KeyStore.security.changePassword.displayName=Change password
KeyStore.security.description=Defines keystore types, including cryptography, RACF(R), CMS, Java(TM), and all truststore types. 
KeyStore.security.displayName=Key stores and certificates
KeyStore.security.name.description=Specifies the unique name that is used to identify the key store. This name is typically scoped by the ManagementScope scopeName and based upon the location of the key store. The name must be unique within the existing key store collection.
KeyStore.security.name.displayName=Name
KeyStore.security.password.description=Specifies the password used to protect the KeyStore. For the default KeyStores (names ending in DefaultKeyStore or DefaultTrustStore), the password is WebAS. This default password must be changed.
KeyStore.security.password.displayName=Password
KeyStore.security.path.description=Specifies the location of the key store file in the format needed by the key store type. This file can be a DLL for cryptographic devices or a filename or file URL for file-based key stores. It can be an SAF keyring URL for RACF(R) keyrings.
KeyStore.security.path.displayName=Path
KeyStore.security.type.description=Specifies the implementation for key store management. This value defines the tool that operates on this key store type.
KeyStore.security.type.displayName=Type
KeyStore.short.description=Defines keystore types, including cryptography, RACF(R), CMS, Java(TM), and all truststore types. 
KeyStore.srLink.description=Specifies the properties for the servant region keyring for this key store.
KeyStore.srLink.displayName=Servant region keyring
KeyStore.srUser.description=Specifies the Servant region Started Task user ID in which the Servant region SAF keyring will be created. The user ID must match the exact ID being used by the Servant region. Note: This option only applies when creating writable SAF keyrings on z/OS.
KeyStore.srUser.displayName=Servant region user
KeyStore.stashPassword.description=Indicates whether to copy the password to a file. This option applies to Cryptographic Message Syntax (CMS) key store types only.
KeyStore.stashPassword.displayName=Stash password to file
KeyStore.type.custom=Custom key store type
KeyStore.type.custom.description=Specifies a custom type of key store file.
KeyStore.type.predefined=Predefined keystore type
KeyStore.type.predefined.description=Specifies one of the predefined key store types.
KeyStore.type.predefined.select=Select type
KeyStore.type.predefined.select.description=Enables the selection of a key store type. The key store type determines how the certificate information is stored. For hardware cryptographic tokens, the key store type is IBMPKCS11Impl. On the z/OS(R) platform, the key store type is JCE4758KS.
KeyStore.writeable.description=Specifies whether the application server can write to the key store. If not, certain operations cannot be performed, such as creating or importing certificates.
KeyStore.writeable.displayName=Read only
KeyStore.writeableKeyring.heading=Writable SAF Keyrings
Keystore.security.hwcrypto.description=Specifies whether a hardware cryptographic device is used for cryptographic operations only. Operations that require login are not supported when using this option. Note that checking this option will also enable the hardware cryptographic card for hardware acceleration.
Keystore.security.hwcrypto.displayName=Enable cryptographic operations on hardware device
KrbAuthMechanism.description=When configured, Kerberos will be the primary authentication mechanism. Configure EJB authentication to resources by accessing the resource references links on the applications details panel.
KrbAuthMechanism.displayName=Kerberos Authentication Mechanism
KrbAuthMechanism.relatedConfiguration.description=The Kerberos authentication configuration must be saved before SPNEGO can be configured.
KrbAuthMechanism.relatedConfiguration.displayName=Related Configuration
LDAPDirectoryType.ACTIVE_DIRECTORY=Microsoft Active Directory
LDAPDirectoryType.CUSTOM=Custom
LDAPDirectoryType.DOMINO502=IBM Lotus Domino
LDAPDirectoryType.IBM_DIRECTORY_SERVER=IBM Tivoli Directory Server
LDAPDirectoryType.IPLANET=Sun Java System Directory Server
LDAPDirectoryType.NDS=Novell eDirectory
LDAPDirectoryType.NETSCAPE=Netscape
LDAPDirectoryType.SECUREWAY=IBM SecureWay Directory Server
LDAPDirectoryType.ZOS_LDAP=zOS LDAP with an SDBM (SAF) Backend
LDAPSearchFilter.certificateFilter.description=If you specify the certificate map mode, use this property to specify the Lightweight Directory Access Protocol (LDAP) filter, which maps attributes in the client certificate to entries in LDAP.
LDAPSearchFilter.certificateFilter.displayName=Certificate filter
LDAPSearchFilter.certificateMapMode.description=Specifies whether to map X.509 certificates into a Lightweight Directory Access Protocol (LDAP) directory by EXACT_DN or CERTIFICATE_FILTER. Specify CERTIFICATE_FILTER to use the specified certificate filter for the mapping.
LDAPSearchFilter.certificateMapMode.displayName=Certificate map mode
LDAPSearchFilter.description=Specify advanced Lightweight Directory Access Protocol (LDAP) user registry settings when users and groups reside in an external LDAP directory. When security is enabled and any of these advanced settings are changed, go to the Security > Global security panel. Click Apply or OK to validate the changes.
LDAPSearchFilter.displayName=Advanced Lightweight Directory Access Protocol (LDAP) user registry settings
LDAPSearchFilter.groupFilter.description=Specifies a Lightweight Directory Access Protocol (LDAP) filter clause for searching the user registry for groups.
LDAPSearchFilter.groupFilter.displayName=Group Filter
LDAPSearchFilter.groupIdMap.description=Specifies a Lightweight Directory Access Protocol (LDAP) filter that maps the short name of a group to an LDAP entry.
LDAPSearchFilter.groupIdMap.displayName=Group ID map
LDAPSearchFilter.groupMemberIdMap.description=Specifies a Lightweight Directory Access Protocol (LDAP) filter that identifies user to group memberships.
LDAPSearchFilter.groupMemberIdMap.displayName=Group member ID map
LDAPSearchFilter.kerberos.description=Specifies the LDAP attribute that holds a Kerberos principal name. It can be modified when Kerberos is configured and is one of the active or preferred authentication mechanisms.
LDAPSearchFilter.kerberos.displayName=Kerberos user filter
LDAPSearchFilter.nullCertificateFilter=When the Certificate map mode value is not EXACT_DN, you must specify the certificate filter.
LDAPSearchFilter.recursiveSearch.description=Specifies whether to perform a recursive nested group search. Select this option only if the Lightweight Directory Access Protocol (LDAP) server does not support recursive server-side searches.
LDAPSearchFilter.recursiveSearch.displayName=Perform a nested group search
LDAPSearchFilter.searchFilter.description=Specifies a test filter clause for searching the Lightweight Directory Access Protocol (LDAP) registry for users.
LDAPSearchFilter.searchFilter.displayName=Search filter string
LDAPSearchFilter.searchLimit.description=Specifies the maximum number of results (max 100).
LDAPSearchFilter.searchLimit.displayName=Search limit
LDAPSearchFilter.testQuery.description=Initiates a test query with the specified string filter.
LDAPSearchFilter.testQuery.displayName=Test Query
LDAPSearchFilter.userFilter.description=Specifies a Lightweight Directory Access Protocol (LDAP) filter clause for searching the user registry for users.
LDAPSearchFilter.userFilter.displayName=User filter
LDAPSearchFilter.userIdMap.description=Specifies a Lightweight Directory Access Protocol (LDAP) filter that maps the short name of a user to an LDAP entry.
LDAPSearchFilter.userIdMap.displayName=User ID map
LDAPSearchQuery.description=This panel is only for testing LDAP server connections and search filters. These settings cannot be saved.
LDAPSearchQuery.displayName=LDAP Test Query
LDAPUserRegistry.baseDN.description=Specifies the base distinguished name of the directory service, which indicates the starting point for Lightweight Directory Access Protocol (LDAP) searches in the directory service. For example, ou=Rochester, o=IBM, c=us.
LDAPUserRegistry.baseDN.displayName=Base distinguished name (DN)
LDAPUserRegistry.bindDN.description=Specifies the distinguished name for the application server, which is used to bind to the directory service.
LDAPUserRegistry.bindDN.displayName=Bind distinguished name (DN)
LDAPUserRegistry.bindPassword.description=Specifies the password for the application server, which is used to bind to the directory service.
LDAPUserRegistry.bindPassword.displayName=Bind password
LDAPUserRegistry.description=Uses the Lightweight Directory Access Protocol (LDAP) user registry settings when users and groups reside in an external LDAP directory. When security is enabled and any of these properties are changed, go to Security > Global security panel. Click Apply or OK to validate the changes.
LDAPUserRegistry.displayName=Standalone LDAP registry
LDAPUserRegistry.enableTAM.description=Select this option to indicate that Tivoli(R) Access Manager uses its password and account policies for authentication. This option requires that you have previously installed the Tivoli(R) Access Manager server.
LDAPUserRegistry.enableTAM.displayName=Use Tivoli Access Manager for account policies
LDAPUserRegistry.failoverHosts.description=Specifies additional host and port named endpoints to use if the main one is not reachable.
LDAPUserRegistry.failoverHosts.displayName=Failover hosts
LDAPUserRegistry.host.description=Specifies the Lightweight Directory Access Protocol (LDAP) server host name. This host name is either an IP address or a domain name service (DNS) name.
LDAPUserRegistry.host.displayName=Host
LDAPUserRegistry.hosts.description=Specifies the host port of the Lightweight Directory Access Protocol (LDAP) server. The default port number is 389.
LDAPUserRegistry.hosts.displayName=Hosts
LDAPUserRegistry.monitorInterval.description=Specifies the time interval, in minutes, to monitor the responsiveness of Lightweight Directory Access Protocol (LDAP) servers.
LDAPUserRegistry.monitorInterval.displayName=Monitor interval
LDAPUserRegistry.port.description=Specifies the Lightweight Directory Access Protocol (LDAP) server port.
LDAPUserRegistry.port.displayName=Port
LDAPUserRegistry.reuseConnection.description=Specifies, by default, that the application server reuses the Lightweight Directory Access Protocol (LDAP) connection.
LDAPUserRegistry.reuseConnection.displayName=Reuse connection
LDAPUserRegistry.searchFilter.description=Specifies the filter clauses for searching user, group, and other information in the Lightweight Directory Access Protocol (LDAP) user registry. When security is enabled and any of these properties are changed, go to the Security > Global security panel. Click Apply or OK to validate the changes.
LDAPUserRegistry.searchFilter.displayName=Advanced LDAP settings
LDAPUserRegistry.searchTimeout.description=Specifies the timeout value, in seconds, for a Lightweight Directory Access Protocol (LDAP) server to respond before canceling a request.
LDAPUserRegistry.searchTimeout.displayName=Search timeout
LDAPUserRegistry.securityFields.description=Specifies the security-related configuration settings for the LDAP server
LDAPUserRegistry.securityFields.displayName=Security
LDAPUserRegistry.serverFields.description=Specifies the configuration settings for the LDAP server.
LDAPUserRegistry.serverFields.displayName=LDAP server
LDAPUserRegistry.short.description=Uses the Lightweight Directory Access Protocol (LDAP) user registry settings when users and groups reside in an external LDAP directory.
LDAPUserRegistry.sslConfig.description=Specifies which Secure Sockets Layer (SSL) configuration to use for Lightweight Directory Access Protocol (LDAP).
LDAPUserRegistry.sslConfig.displayName=Use specific SSL alias
LDAPUserRegistry.sslEnabled.description=Specifies whether secure socket communications is enabled with the Lightweight Directory Access Protocol (LDAP) server. When this option is selected, LDAP Secure Sockets Layer (SSL) settings are used, if specified.
LDAPUserRegistry.sslEnabled.displayName=SSL enabled
LDAPUserRegistry.sslManaged.description=Specifies that the selection of a Secure Sockets Layer (SSL) configuration is based upon the outbound topology view for the Java(TM) Naming and Directory Interface (JNDI) (LDAP) protocol.
LDAPUserRegistry.sslManaged.displayName=Centrally managed
LDAPUserRegistry.sslSettings.description=Specifies the settings for the Secure Sockets Layer (SSL) protocol.
LDAPUserRegistry.sslSettings.displayName=SSL Settings
LDAPUserRegistry.testConnection.button=Test connection
LDAPUserRegistry.type.description=Specifies the type of Lightweight Directory Access Protocol (LDAP) server that you are connecting to the Application Server.
LDAPUserRegistry.type.displayName=Type of LDAP server
LTPA.description=Encrypts authentication information so that the application server can send the data from one server to another in a secure manner. The encryption of authentication information that is exchanged between servers involves the LTPA mechanism.
LTPA.displayName=LTPA
LocalOSUserRegistry.description=Specifies the registry for the local operating system of the application server. When security is enabled and you change any of these properties, go to the Security > Global security. Click Apply or OK to validate the changes.
LocalOSUserRegistry.displayName=Local operating system
LocalOSUserRegistry.short.description=Specifies the registry for the local operating system of the application server.
LoginConfigRMIInbound.description=Specifies the type of login configuration that is used for inbound authentication. To add custom processing, click Global security > Java Authentication and Authorization Service > System login.
LoginConfigRMIInbound.displayName=Login configuration
LoginConfigRMIOutbound.description=Specifies the type of login configuration that is used for outbound processing. To add custom processing, click Global security > Java Authentication and Authorization Service > System login.
LoginConfigRMIOutbound.displayName=Login configuration
MessageLayer.isStateful.description=When enabled, stateful sessions are established for secure association between the client and the server.
MessageLayer.isStateful.displayName=Stateful sessions
MessageLayerAuthentication.displayName=Message layer authentication
MessageLayerAuthentication_i.description=Message layer authentication
New.displayName=New
NoneDefined.displayName=none defined
Outbound.displayName=Outbound
PersonalCertRequests.certInfo.displayName=Certificate information
PersonalCertRequests.commonName.description=Specifies the name of the entity that the certificate represents. This common name can represent a person, company, or machine. For websites, the common name is frequently the DNS host name where the server resides.
PersonalCertRequests.commonName.displayName=Common name
PersonalCertRequests.country.description=Specifies the country portion of the distinguished name.
PersonalCertRequests.country.displayName=Country or region
PersonalCertRequests.description=Manages personal certificate requests, which are temporary place holders for certificates that will be signed by a certificate authority (CA). 
PersonalCertRequests.displayName=Personal certificate requests
PersonalCertRequests.extract.description=Extracts a certificate request and puts it in a file which can later be sent to a certificate authority (CA).
PersonalCertRequests.extract.displayName=Extract certificate request
PersonalCertRequests.extractButton.displayName=Extract...
PersonalCertRequests.extractFile.description=Specifies the file name where the extracted certificate request is placed.
PersonalCertRequests.extractFile.displayName=File name
PersonalCertRequests.extractPath.description=Specifies the location of the requested personal certificate to be extracted.
PersonalCertRequests.extractPath.displayName=Path
PersonalCertRequests.file.description=Specifies the fully qualified file name from which the certificate request is exported. This portion of the certificate request can be given to the certificate authority (CA) to generate the real certificate. After the real certificate is generated, you can perform an Receive from CA from the personal certificate collection view.
PersonalCertRequests.file.displayName=File for certificate request
PersonalCertRequests.fingerprint.description=Specifies the SHA hash of the signer certificate. This hash can be used to verify the certificate hash at the target location.
PersonalCertRequests.fingerprint.displayName=Fingerprint (SHA digest)
PersonalCertRequests.keyLabel.description=Specifies the alias that represents the personal certificate request in the key store.
PersonalCertRequests.keyLabel.displayName=Key label
PersonalCertRequests.keyLabel.displayNameHL=Key Label
PersonalCertRequests.keySize.description=Specifies the size of the keys that are generated.
PersonalCertRequests.keySize.displayName=Key size
PersonalCertRequests.locality.description=Specifies the locality portion of the distinguished name. This is an optional value.
PersonalCertRequests.locality.displayName=Locality
PersonalCertRequests.organization.description=Specifies the organization portion of the distinguished name.
PersonalCertRequests.organization.displayName=Organization
PersonalCertRequests.ou.description=Specifies the organization unit portion of the distinguished name. This is an optional value.
PersonalCertRequests.ou.displayName=Organizational unit
PersonalCertRequests.path.description=Specifies the location of the requested personal certificate.
PersonalCertRequests.path.displayName=Path
PersonalCertRequests.queryButton.displayName=Query
PersonalCertRequests.requestedBy.description=Specifies the Subject distinguished name (DN) that represents the identity of the certificate request.
PersonalCertRequests.requestedBy.displayName=Requested by
PersonalCertRequests.requestedBy.displayNameHL=Requested By
PersonalCertRequests.short.description=Manages personal certificate requests, which are temporary place holders for certificates that will be signed by a certificate authority (CA). 
PersonalCertRequests.signatureAlg.description=Specifies the algorithm that is used to sign the certificate.
PersonalCertRequests.signatureAlg.displayName=Signature algorithm
PersonalCertRequests.state.description=Specifies the state portion of the distinguished name. This is an optional value.
PersonalCertRequests.state.displayName=State or province
PersonalCertRequests.zip.description=Specifies the zip code portion of the distinguished name. This is an optional value.
PersonalCertRequests.zip.displayName=Zip code
PersonalCerts.alias.description=Specifies the alias that the personal certificate is referenced by in the key store.
PersonalCerts.alias.displayName=Alias
PersonalCerts.commonName.description=Specifies the common name portion of the distinguished name (DN). It is recommended this name is the host name of the machine where the certificate resides. In some cases, the common name is used to login during Secure Sockets Layer (SSL) certificate authentication, so this name might be used as a user ID for a local operating system registry in some cases.
PersonalCerts.commonName.displayName=Common name
PersonalCerts.country.description=Specifies the country portion of the distinguished name.
PersonalCerts.country.displayName=Country or region
PersonalCerts.deleteCert.description=Specifies whether you want to delete the old certificate and all associated signer certificates after the new certificate replaces it. If you do not replace the old personal certificate, it might get a new alias name.
PersonalCerts.deleteCert.displayName=Delete old certificate after replacement
PersonalCerts.deleteSigners.description=Specifies whether you want to delete the old signer certificates that are associated with the old certificate after the new signer certificates replace them. If you do not delete the old signer certificates, they might get a new alias name.
PersonalCerts.deleteSigners.displayName=Delete old signers
PersonalCerts.description=Manages personal certificates.
PersonalCerts.displayName=Personal certificates
PersonalCerts.empty.message=
PersonalCerts.expiration.description=Specifies the expiration date of the signer certificate for validation purposes.
PersonalCerts.expiration.displayName=Expiration
PersonalCerts.export.description=Exports a certificate, including the private key, to a specified key store file or existing key store.
PersonalCerts.export.displayName=Export certificates to a key file or key store
PersonalCerts.exportAlias.description=Displays the name of the certificate that you selected to export on the previous panel.
PersonalCerts.exportAlias.displayName=Certificate alias to export
PersonalCerts.exportButton.description=Exports a certificate, including the private key, to a specified key store file.
PersonalCerts.exportButton.displayName=Export...
PersonalCerts.exportFile.description=Specifies the fully qualified key store file name into which the exported certificate is added. The key store filename must already exist.
PersonalCerts.exportFile.displayName=Key file name
PersonalCerts.exportPassword.description=Specifies the password that is used to access the key store file.
PersonalCerts.exportPassword.displayName=Key file password
PersonalCerts.exportPath.description=Specifies the fully qualified path of the key store file, not including the key store file name.
PersonalCerts.exportPath.displayName=Path
PersonalCerts.exportType.description=Specifies the type of key store file, as listed in the menu.
PersonalCerts.exportType.displayName=Type
PersonalCerts.extract.description=Extracts a certificate from the key store to be added to another key store.
PersonalCerts.extract.displayName=Extract certificate
PersonalCerts.extractAlias.description=Displays the name of the certificate that you selected for extraction on the previous panel.
PersonalCerts.extractAlias.displayName=Certificate alias to extract
PersonalCerts.extractButton.description=Extracts a certificate from the key store that will be added to another key store.
PersonalCerts.extractButton.displayName=Extract...
PersonalCerts.extractFile.description=Specifies the fully qualified file name that contains the extracted certificate.
PersonalCerts.extractFile.displayName=Certificate file name
PersonalCerts.extractPath.description=Specifies the fully qualified path for the certificate file.
PersonalCerts.extractPath.displayName=Path
PersonalCerts.extractType.description=Specifies the format of the file that is either Base64 encoded ASCII data or Binary DER data.
PersonalCerts.extractType.displayName=Data type
PersonalCerts.fingerprint.description=Specifies the SHA hash of the personal certificate, which can be used to verify that the certificate has not been altered when it is used in a remote connection.
PersonalCerts.fingerprint.displayName=Fingerprint (SHA digest)
PersonalCerts.import.description=Imports a certificate, including the private key, from a key store file or from an existing key store.
PersonalCerts.import.displayName=Import certificates from a key file or key store
PersonalCerts.import.keyFileAlias.mismatch=You must click the Get Key File Aliases button to retrieve the certificate aliases for the selected key file.
PersonalCerts.import.keyStoreAlias.mismatch=You must click the Get key store aliases button to retrieve the certificate aliases for the selected key store.
PersonalCerts.importButton.description=Imports a certificate, including the private key, from a key store file.
PersonalCerts.importButton.displayName=Import...
PersonalCerts.importFile.description=Specifies the fully qualified key store file name that contains the certificate to import.
PersonalCerts.importFile.displayName=Key file name
PersonalCerts.importGetAliases.displayName=Get Key File Aliases
PersonalCerts.importGetKeyStoreAliases.displayName=Get key store aliases
PersonalCerts.importKeyStoreAlias.description=Specifies the alias of the key store to use for the import or export.
PersonalCerts.importKeyStoreAlias.displayName=Key store
PersonalCerts.importKeyStorePassword.description=Specifies the password of the key store to use for the import or export.
PersonalCerts.importKeyStorePassword.displayName=Key store password
PersonalCerts.importNewCertAlias.description=Specifies the new alias that you want the certificate to be named in the current key store.
PersonalCerts.importNewCertAlias.displayName=Imported certificate alias
PersonalCerts.importOldCertAlias.description=Specifies the certificate alias within the specified key file name, which is specified in the Key file name field, that you want to import into the current key store.
PersonalCerts.importOldCertAlias.displayName=Certificate alias to import
PersonalCerts.importPassword.description=Specifies the password that is used to access the key store file.
PersonalCerts.importPassword.displayName=Key file password
PersonalCerts.importPath.description=Specifies the fully qualified path of the key store file, not including the key store file name. The key store to import from must be located on the physical machine where the administrative server process is running (for example, AdminConsole, wsadmin connection).
PersonalCerts.importPath.displayName=Path
PersonalCerts.importType.description=Specifies the type of key store file. The valid types are listed in the menu.
PersonalCerts.importType.displayName=Type
PersonalCerts.importUseAudit.description=Specifies to use an audit encryption key store for the import or export.
PersonalCerts.importUseAudit.displayName=Audit encryption key store
PersonalCerts.importUseFile.description=Specifies to use a key store file for the import.
PersonalCerts.importUseFile.displayName=Key store file
PersonalCerts.importUseManaged.description=Specifies to use a managed key store for the import or export.
PersonalCerts.importUseManaged.displayName=Managed key store
PersonalCerts.issuedBy.description=Specifies the distinguished name of the entity that issues the certificate. This name is the same as the issued to distinguished name when the personal certificate is self-signed.
PersonalCerts.issuedBy.displayName=Issued by
PersonalCerts.issuedBy.displayNameHL=Issued By
PersonalCerts.issuedTo.description=Specifies the distinguished name of the entity that requested the certificate.
PersonalCerts.issuedTo.displayName=Issued to
PersonalCerts.issuedTo.displayNameHL=Issued To
PersonalCerts.keySize.1024=1024
PersonalCerts.keySize.2048=2048
PersonalCerts.keySize.4096=4096
PersonalCerts.keySize.512=512
PersonalCerts.keySize.description=Specifies the key size of the private key that is used by the personal certificate.
PersonalCerts.keySize.displayName=Key size
PersonalCerts.locality.description=Specifies the locality portion of the distinguished name. This is an optional value.
PersonalCerts.locality.displayName=Locality
PersonalCerts.newButton.caSigned=CA-signed Certificate...
PersonalCerts.newButton.chained=Chained Certificate...
PersonalCerts.newButton.description=Enables the application server to create a new self-signed certificate.
PersonalCerts.newButton.displayName=Create
PersonalCerts.newButton.selfSigned=Self-signed Certificate...
PersonalCerts.newCert.description=Specifies the certificate that replaces the old certificate.
PersonalCerts.newCert.displayName=Replace with
PersonalCerts.newSelfSigned.displayName=Create self-signed Certificate...
PersonalCerts.oldCert.description=Specifies the certificate that you want to have replaced.
PersonalCerts.oldCert.displayName=Old certificate
PersonalCerts.organization.description=Specifies the organization portion of the distinguished name.
PersonalCerts.organization.displayName=Organization
PersonalCerts.ou.description=Specifies the organization unit portion of the distinguished name. This is an optional value.
PersonalCerts.ou.displayName=Organization unit
PersonalCerts.receive.description=Receive your personal certificate from the certificate authority (CA) to replace the temporary certificate associated with the public/private keys in the certificate request that is stored in the key store.
PersonalCerts.receive.displayName=Receive certificate from CA
PersonalCerts.receiveButton.description=Enables the application server to receive a certificate authority (CA)-generated certificate from a file to complete a certificate request.
PersonalCerts.receiveButton.displayName=Receive from a certificate authority...
PersonalCerts.receiveFile.description=Specifies the fully qualified file name that contains the certificate that is generated by the certificate authority.
PersonalCerts.receiveFile.displayName=Certificate file name
PersonalCerts.receivePath.description=Specifies the fully qualified path of the certificate file.
PersonalCerts.receivePath.displayName=Path
PersonalCerts.receiveType.description=Specifies the format of the file that is either Base64 encoded ASCII data or Binary DER data.
PersonalCerts.receiveType.displayName=Data type
PersonalCerts.renewButton.displayName=Renew
PersonalCerts.replace.description=Replaces a certificate with a new certificate. Also replaces signer certificates.
PersonalCerts.replace.displayName=Replace certificate
PersonalCerts.replaceButton.description=Replaces a self-signed certificate with another self-signed certificate that contains the same information, but with a new expiration period. The signer from the old certificate that is contained in any managed key store in the cell is replaced by the signer from the new certificate.
PersonalCerts.replaceButton.displayName=Replace...
PersonalCerts.revoke.description=Revokes the certificate.
PersonalCerts.revoke.displayName=Revoke certificate
PersonalCerts.revokeAlias.description=Displays the name of the certificate that you selected for revocation on the previous panel.
PersonalCerts.revokeAlias.displayName=Certificate alias to revoke
PersonalCerts.revokeButton.displayName=Revoke...
PersonalCerts.revokePassword.description=Specifies the password to use to revoke the certificate.
PersonalCerts.revokePassword.displayName=Revocation password
PersonalCerts.revokeReason.description=Specifies the reason the certificate is being revoked.
PersonalCerts.revokeReason.displayName=Revocation reason
PersonalCerts.selfSigned.description=Creates a new self-signed certificate.
PersonalCerts.selfSigned.displayName=Self-signed
PersonalCerts.serial.description=Specifies the certificate serial number that is generated by the issuer of the certificate.
PersonalCerts.serial.displayName=Serial number
PersonalCerts.serial.displayNameHL=Serial Number
PersonalCerts.short.description=Manages personal certificates.
PersonalCerts.signOther.description=Specifies this certificate is allowed to sign other certificates.
PersonalCerts.signOther.displayName=Add critical base constraint to allow this certificate to sign other certificates
PersonalCerts.signatureAlg.description=Specifies the algorithm that is used to sign the certificate.
PersonalCerts.signatureAlg.displayName=Signature algorithm
PersonalCerts.state.description=Specifies the state portion of the distinguished name. This is an optional value.
PersonalCerts.state.displayName=State/Province
PersonalCerts.status.chained=Chained
PersonalCerts.status.disabled=Disabled
PersonalCerts.status.revoked=Revoked
PersonalCerts.status.valid=Valid
PersonalCerts.validity.description=Specifies the length, in days, when the certificate is valid. The default is 365 days.
PersonalCerts.validity.displayName=Validity period
PersonalCerts.version.X509v1=X509 V1
PersonalCerts.version.X509v2=X509 V2
PersonalCerts.version.X509v3=X509 V3
PersonalCerts.version.description=Specifies the version of the personal certificate. Valid versions include X509 V3, X509 V2, or X509 V1. It is recommended that you use X509 V3 certificates.
PersonalCerts.version.displayName=Version
PersonalCerts.zip.description=Specifies the zip code portion of the distinguished name. This is an optional value.
PersonalCerts.zip.displayName=Zip code
QoP.None=None
QoP.Required=Required
QoP.Supported=Supported
QoP.button.add=Add >>
QoP.button.remove=<< Remove
QoP.button.updateCiphers=Update selected ciphers
QoP.cipherGroups.description=Specifies the various cipher suite groups that can be chosen depending upon the security needs. The stronger the cipher suite strength, the better the security. However, the strong cipher suite strength can result in performance consequences.
QoP.cipherGroups.displayName=Cipher suite groups
QoP.cipherSuites.description=Specifies the ciphers that are used during the Secure Sockets Layer (SSL) handshake.
QoP.cipherSuites.displayName=Cipher suites
QoP.cipherSuitesSettings.displayName=Cipher suite settings
QoP.ciphers.description=Specifies the list of ciphers in Selected ciphers field that is used during the Secure Sockets Layer (SSL) handshake.
QoP.ciphers.displayName=Cipher suite selection
QoP.clientAuth.description=Specifies whether Secure Sockets Layer (SSL) client authentication should be requested if the SSL connection is used for the server side of the connection. If None is selected, the server does not request that a client certificate be sent during the handshake. If Supported is selected, the server requests that a client certificate be sent. If the client does not have a certificate, the handshake might still succeed. If Required is selected, the server requests that a client certificate be sent. If the client does not have a certificate, the handshake fails.
QoP.clientAuth.displayName=Client authentication
QoP.description=Specifies the security level, ciphers, and mutual authentication settings.
QoP.displayName=Quality of protection (QoP) settings
QoP.protocol.SSL=SSL
QoP.protocol.SSL_TLS=SSL_TLS
QoP.protocol.SSLv2=SSLv2
QoP.protocol.SSLv3=SSLv3
QoP.protocol.TLS=TLS
QoP.protocol.TLSV1=TLSv1
QoP.protocol.description=Specifies the SSL handshake protocol. Typically, this is SSL_TLS, which supports all handshake protocols except for SSLv2 on the server side. When FIPS is enabled, TLS automatically is used regardless of this setting.
QoP.protocol.displayName=Protocol
QoP.provider.IBMJSSE=IBMJSSE
QoP.provider.IBMJSSEFIPS=IBMJSSEFIPS
QoP.provider.description=Specifies a package that implements a subset of the cryptography aspects for the Java(TM) security application programming interface (API). This value is a Java(TM) Secure Sockets Extension (JSSE) provider name that is listed in the java.security file. Note that cipher suites and protocol values depend upon the provider.
QoP.provider.displayName=Provider
QoP.provider.predefined=Predefined JSSE provider
QoP.selectedCiphers.description=Specifies the ciphers that are effective when the configuration is saved. These ciphers are used to negotiate with the remote side of the connection during the handshake. A common cipher needs to be selected or the handshake fails.
QoP.selectedCiphers.displayName=Selected ciphers
QoP.short.description=Specifies the security level, ciphers, and mutual authentication settings.
QoP.supportedCiphers.displayName=Supported ciphers
RMIOutboundEnabled.description=Invokes the outbound login configuration, specified previously, whenever you need a custom login module to map or perform other functions before the outbound call. Also, the outbound login configuration is invoked whenever you enable security attribute propagation.
RMIOutboundEnabled.displayName=Custom outbound mapping
RSA.token.desc=RSA token is an authentication mechanism using certificates for signing and encryption portions of the security information being propagated.
RSA.token.text=RSA token (recommended for flexible systems administration)
Repository.displayName=Repository
SAF.SMFrecords.ASIS=ASIS
SAF.SMFrecords.DEFAULT=Default
SAF.SMFrecords.NOFAIL=NOFAIL
SAF.SMFrecords.NONE=NONE
SPNEGO.NTLMToken.description=Specifies the URL of a resource that contains the content that SPNEGO includes in the HTTP response, which is displayed by the (browser) client application if the client sent an NTLM token.
SPNEGO.NTLMToken.displayName=NTLM token received error page URL
SPNEGO.allowFallback.description=If SPNEGO authentication fails, allow fall back to the authentication mechanism defined during application assembly time.
SPNEGO.allowFallback.displayName=Allow fall back to application authentication mechanism
SPNEGO.autoReload.description=Enables you to dynamically update the SPNEGO run time when SPNEGO changes occur without restarting the application server.
SPNEGO.autoReload.displayName=Dynamically update SPNEGO
SPNEGO.canonicalHost.description=Enable this feature if you would like to resolve the alias host name to the actual host name for SPNEGO single sign-on. If you do not have an alias host name for the application server then you should disable this feature.
SPNEGO.canonicalHost.displayName=Use the alias host name for the application server
SPNEGO.description=Specifies the values for SPNEGO filter.
SPNEGO.displayName=Filter
SPNEGO.enableKrbCred.description=Enables you to indicate whether the client Kerberos delegated credentials and Kerberos tickets should be placed in the subject by SPNEGO.
SPNEGO.enableKrbCred.displayName=Enable delegation of Kerberos credentials
SPNEGO.enableSPENGO.description=Use to enable the Simple and Protected GSS-API Negotiation Mechanism (SPNEGO) as a web authenticator for WebSphere Application Server.
SPNEGO.enableSPENGO.displayName=Enable SPNEGO
SPNEGO.enableSafRacmap.description=Choose this option to map the Kerberos principal in the SPNEGO token to an SAF user, where the Kerberos principal and the Kerberos realm are specified in the RACMAP profiles of the SAF product. To select this option, the SAF product must support distributed identity mapping.
SPNEGO.enableSafRacmap.displayName=Map Kerberos principals to SAF identities using the SAF RACMAP profiles
SPNEGO.enabled.description=Specifies that SPNEGO is enabled.
SPNEGO.enabled.displayName=Enable SPNEGO
SPNEGO.filter.description=Display the values for a particular SPNEGO Filter
SPNEGO.filter.displayName=Filter
SPNEGO.filterClass.description=The name of the Java class that is used by SPNEGO to select which HTTP requests are subject to SPNEGO authentication. The Java class that is specified must implement the com.ibm.wsspi.security.spnego.SpnegoFilter interface. If no filter class is specified, the default com.ibm.ws.security.spnego.HTTPHeaderFilter implementation class is used.
SPNEGO.filterClass.displayName=Filter class
SPNEGO.filterCriteria.description=The filtering parameter used by the class specified as the Filter class. It defines arbitrary criteria that is meaningful to the implementation class used.  If not specified, the application server will use SPNEGO web authentication for all HTTP requests.
SPNEGO.filterCriteria.displayName=Filter criteria
SPNEGO.filterCriteria.displayNameHL=Filter Criteria
SPNEGO.hostName.description=The fully qualified host name in the SPN that is used by SPNEGO to establish a Kerberos secure context.
SPNEGO.hostName.displayName=Host name
SPNEGO.hostName.displayNameHL=Host Name
SPNEGO.notSupported.description=Specifies the URL of a resource that contains the content which SPNEGO includes in the HTTP response that is displayed by the (browser) client application if it does not support SPNEGO authentication.
SPNEGO.notSupported.displayName=SPNEGO not supported error page URL
SPNEGO.reloadTimeout.description=SPNEGO Configuration reload timeout value in minutes
SPNEGO.reloadTimeout.displayName=minutes
SPNEGOConfig.description=SPNEGO provides a way for web clients and the server to negotiate the web authentication protocol used to permit communications.
SPNEGOConfig.displayName=SPNEGO web authentication
SPNEGOConfig.domain.description=SPNEGO provides a way for web clients and the server to negotiate the web authentication protocol used to permit communications. Any additions, deletions, or modifications to the filters below are local to this domain.
SPNEGOFilter.description=List of SPNEGO Filters in the security configuration.
SPNEGOFilter.displayName=SPNEGO Filters:
SSL.Default=DefaultSSLSettings
SSL.ORB=Specifies which Secure Sockets Layer (SSL) configuration in the repertoire to use.
SSL.newJSSE=New JSSE Configuration
SSL.newSSSL=New SSSL Configuration
SSLConfig.button.get=Get certificate aliases
SSLConfig.certAlias.description=Specifies the certificate alias that is used as the identity for this Secure Sockets Layer (SSL) configuration if one has not been specified elsewhere.
SSLConfig.certAlias.displayName=Default server certificate alias
SSLConfig.clientCertAlias.description=Specifies the description for a client certificate alias
SSLConfig.clientCertAlias.displayName=Default client certificate alias
SSLConfig.description=Defines a list of Secure Sockets Layer (SSL) configurations.
SSLConfig.displayName=SSL configurations
SSLConfig.keyStore.description=Specifies a reference to a specific key store. The key store holds personal certificates that represent the identity of one side of a connection. The public key of this personal certificate is sent to the other side of the connection to establish trust during the handshake. The remote side of the connection needs the root certificate authority (CA) certificate or self-signed public key (signer) to be in the trust store to validate this personal certificate.
SSLConfig.keyStore.displayName=Keystore name
SSLConfig.keyring.description=Specifies the name of the keyring for the System SSL configuration. This field implies the keystore and trust store.
SSLConfig.keyring.displayName=Keyring name
SSLConfig.mgmtScope.description=Specifies the scope where this Secure Sockets Layer (SSL) configuration is visible. For example, if you choose a specific node, then the configuration is only visible on that node and any servers that are part of that node.
SSLConfig.mgmtScope.displayName=Management scope
SSLConfig.mgmtScope.displayNameHL=Management Scope
SSLConfig.name.description=Specifies the unique name of the Secure Sockets Layer (SSL) configuration within the management scope in which it resides. For ways to programmatically access the properties that are configured for this SSL configuration, see the com.ibm.websphere.ssl.JSSEHelper application programming interface (API).
SSLConfig.name.displayName=Name
SSLConfig.short.description=Defines Secure Sockets Layer (SSL) configurations.
SSLConfig.sslConfig.description=Specifies which Secure Sockets Layer (SSL) configuration to use for this transport.
SSLConfig.sslConfig.displayName=Use specific SSL alias
SSLConfig.sslManaged.description=Specifies that the selection of a Secure Sockets Layer (SSL) configuration is based upon the topology view.
SSLConfig.sslManaged.displayName=Centrally managed
SSLConfig.trustStore.description=Specifies a reference to a specific trust store used by Java(TM) Secure Sockets Extension (JSSE). The trust store holds signer certificates that validate the trust of certificates sent by remote connections during an Secure Sockets Layer (SSL) handshake.
SSLConfig.trustStore.displayName=Trust store name
SSLConfig.type.description=Specifies the type of the Secure Sockets Layer (SSL).
SSLConfig.type.displayName=Type
SSLConfig.v3Timeout.description=Specifies the SSL v3 timeout value. The valid range is 1-86400.
SSLConfig.v3Timeout.displayName=V3 timeout
SSLSecurityLevel.CUSTOM=Custom
SSLSecurityLevel.HIGH=Strong
SSLSecurityLevel.LOW=Weak
SSLSecurityLevel.MEDIUM=Medium
SSLSettings.displayName=SSL settings
SSLSettings_csi_i.description=Specifies a list of predefined Secure Sockets Layer (SSL) settings for inbound connections. Configure these settings on the SSL panel by clicking Secure communications on the administrative console.
SSLSettings_csi_o.description=Specifies a list of predefined Secure Sockets Layer (SSL) settings for outbound connections. Configure these settings on the SSL panel by clicking Secure Communications on the administrative console.
SSLSettings_ibm_i.description=Specifies a list of predefined Secure Sockets Layer (SSL) settings for inbound connections. Configure these settings on the SSL panel by clicking Secure Communications on the administrative console.
SSLSettings_ibm_o.description=Specifies a list of predefined Secure Sockets Layer (SSL) settings for outbound connections. Configure these settings on the SSL panel that is located by clicking Secure Communications on the administrative console.
SecAudit3PartyEmit.className.description=Specifies the class implementing the audit service provider interface.
SecAudit3PartyEmit.className.displayName=Third party emitter class name
SecAudit3PartyEmit.displayName=Third party emitter
SecAudit3PartyEmit.newName=New third party emitter
SecAuditBinEmit.displayName=Binary file-based emitter
SecAuditBinEmit.file.description=Specifies the file path location for the audit log files.
SecAuditBinEmit.file.displayName=Audit log file location
SecAuditBinEmit.newName=New binary file-based emitter
SecAuditBinEmit.numFiles.description=Specifies the maximum number of audit log files to use.
SecAuditBinEmit.numFiles.displayName=Maximum number of audit log files
SecAuditBinEmit.size.description=Specifies the maximum number of megabytes to write to any one audit log file.
SecAuditBinEmit.size.displayName=Audit log file size:
SecAuditBinEmit.size.units=MB
SecAuditBinEmit.wrapLog.NOWRAP=Stop server
SecAuditBinEmit.wrapLog.NOWRAP.description=Auditing service stops and server is gracefully quiesced.
SecAuditBinEmit.wrapLog.SILENT_FAIL=Stop logging
SecAuditBinEmit.wrapLog.SILENT_FAIL.description=Auditing service stops but server operations continue.
SecAuditBinEmit.wrapLog.WRAP=Overwrite oldest
SecAuditBinEmit.wrapLog.WRAP.description=Overwrites the oldest log to allow the auditing service to continue without interruption.
SecAuditBinEmit.wrapLog.description=Specifies the behavior of the binary audit log when the maximum number of binary audit log files is reached.
SecAuditBinEmit.wrapLog.displayName=Behavior when maximum is reached
SecAuditEncrypt.certificate.description=Specifies the certificate used for encryption
SecAuditEncrypt.certificate.displayName=Encryption certificate
SecAuditEncrypt.description=By encrypting the audit records, only a user given the Auditor role will be able to read the audit records.
SecAuditEncrypt.displayName=Audit record encryption configuration
SecAuditEncrypt.enabled.description=Specifies whether encryption is enabled for the audit records.
SecAuditEncrypt.enabled.displayName=Enable encryption
SecAuditEncrypt.keystore.NEW=New...
SecAuditEncrypt.keystore.description=Specifies the audit keystore used to store the encryption certificate.
SecAuditEncrypt.keystore.displayName=The Audit keystore containing the encryption certificate.
SecAuditEncrypt.noLink.displayName=Audit record encryption configuration
SecAuditEncrypt.short.description=Specifies the configuration options for audit record encryption.
SecAuditFactory.3PartyClassName.description=Specifies the class name of the third party audit event factory.
SecAuditFactory.3PartyClassName.displayName=Third party audit event factory class name
SecAuditFactory.className.description=Specifies the class name of the audit event factory.
SecAuditFactory.className.displayName=Class name
SecAuditFactory.className.displayNameHL=Class Name
SecAuditFactory.description=Defines the audit event factories.
SecAuditFactory.displayName=Audit event factory configuration
SecAuditFactory.encryptPolicy.description=Specifies the encryption policy for the event factory
SecAuditFactory.encryptPolicy.displayName=Encryption policy
SecAuditFactory.factory3Party.description=Specifies the type of this factory as a third party event factory using the following class name and unique identifier.
SecAuditFactory.factory3Party.displayName=Third party audit event factory
SecAuditFactory.factoryIBM.description=Specifies the type of this factory as an IBM audit event factory
SecAuditFactory.factoryIBM.displayName=IBM audit event factory
SecAuditFactory.filters.description=Specifies the filters for this audit event factory.
SecAuditFactory.filters.displayName=Audit event factory filters
SecAuditFactory.filters.enabled.description=Specifies the filters enabled for this audit event factory configuration
SecAuditFactory.filters.enabled.displayName=Enabled filters
SecAuditFactory.filters.selectable.description=Specifies the available filters
SecAuditFactory.filters.selectable.displayName=Selectable filters
SecAuditFactory.name.description=Specifies a unique name to identify this audit event factory configuration.
SecAuditFactory.name.displayName=Name
SecAuditFactory.provider.3Party=Third party emitter
SecAuditFactory.provider.binary=Binary file based emitter
SecAuditFactory.provider.configure=Configure
SecAuditFactory.provider.description=Specifies the audit service provider for this factory.
SecAuditFactory.provider.displayName=Audit service provider
SecAuditFactory.provider.setAsCurrent=Set as current
SecAuditFactory.short.description=Specifies the configuration options for the audit event factories.
SecAuditFactory.type.description=Specifies the type of this audit event factory configuration as either an IBM audit event factory or a third party audit event factory.
SecAuditFactory.type.displayName=Type
SecAuditFilter.description=Defines the audit filters configured for the implementation, including what auditable event type and outcome are to be filtered.
SecAuditFilter.displayName=Event type filters
SecAuditFilter.enabled.description=Specifies that the audit filter is enabled.
SecAuditFilter.enabled.displayName=Enable
SecAuditFilter.event.SECURITY_AUTHN=Authentication events
SecAuditFilter.event.SECURITY_AUTHN_CREDS_MODIFY=Events to modify user credentials
SecAuditFilter.event.SECURITY_AUTHN_DELEGATION=Delegation events, including Identity Assertion, RunAs, and Low Assertion
SecAuditFilter.event.SECURITY_AUTHN_MAPPING=Mapping of principal/credentials
SecAuditFilter.event.SECURITY_AUTHN_TERMINATE=Authentication termination events
SecAuditFilter.event.SECURITY_AUTHZ=Authorization checks
SecAuditFilter.event.SECURITY_ENCRYPITON=Encryption events
SecAuditFilter.event.SECURITY_MGMT_AUDIT=Management operations of the audit subsystem
SecAuditFilter.event.SECURITY_MGMT_CONFIG=Configuration operations for a security server
SecAuditFilter.event.SECURITY_MGMT_KEY=Management operations for certificates/key stores
SecAuditFilter.event.SECURITY_MGMT_POLICY=Management of security policies
SecAuditFilter.event.SECURITY_MGMT_PROVISIONING=Provisioning security events
SecAuditFilter.event.SECURITY_MGMT_REGISTRY=Registry management events
SecAuditFilter.event.SECURITY_MGMT_RESOURCE=Resource management
SecAuditFilter.event.SECURITY_RESOURCE_ACCESS=Accesses to a resource
SecAuditFilter.event.SECURITY_RUNTIME=Runtime starting and stopping of security servers
SecAuditFilter.event.SECURITY_RUNTIME_KEY=Runtime operations for certificates/key stores
SecAuditFilter.event.SECURITY_SIGNING=Signing operations
SecAuditFilter.event.description=Specifies the events that are associated with the selected filter.
SecAuditFilter.event.displayName=Events to associate with an audit filter
SecAuditFilter.event.enabled.description=Specifies the events that are enabled for this filter.
SecAuditFilter.event.enabled.displayName=Enabled events
SecAuditFilter.event.selectable.description=Specifies the events that are available to be associated to this filter.
SecAuditFilter.event.selectable.displayName=Selectable events
SecAuditFilter.eventsAndOutcomes.description=Specifies the defined events and outcomes for this filter.
SecAuditFilter.eventsAndOutcomes.displayName=Events and outcomes
SecAuditFilter.eventsAndOutcomes.displayNameHL=Events and Outcomes
SecAuditFilter.name.description=Specifies the unique name of the filter.
SecAuditFilter.name.displayName=Name
SecAuditFilter.outcome.description=Specifies the event outcomes that are associated with the selected filter.
SecAuditFilter.outcome.displayName=Event outcomes to associate with an audit filter
SecAuditFilter.outcome.enabled.description=Specifies the event outcomes that are associated with the selected filter.
SecAuditFilter.outcome.enabled.displayName=Enabled event outcomes
SecAuditFilter.outcome.selectable.description=Specifies the event outcomes that are available to be associated to this filter.
SecAuditFilter.outcome.selectable.displayName=Selectable event outcomes
SecAuditFilter.short.description=Specifies configuration options for event type filtering.
SecAuditKeyStore.description=Defines the keystores used for storing the encryption certificate.
SecAuditKeyStore.displayName=Audit encryption key stores and certificates
SecAuditKeyStore.name.description=Specifies the unique name that is used to identify the keystore. This name is typically scoped by the ManagementScope scopeName and based upon the location of the key store. The name must be unique within the existing key store collection.
SecAuditKeyStore.name.displayName=Name
SecAuditKeyStore.noLink.displayName=Audit encryption key stores and certificates
SecAuditKeyStore.password.description=Specifies the password used to protect the keystore. For the default keystores (names ending in DefaultKeyStore or DefaultTrustStore), the password is WebAS. This default password must be changed.
SecAuditKeyStore.password.displayName=Password
SecAuditKeyStore.path.description=Specifies the location of the keystore file in the format needed by the keystore type. This file can be a DLL for cryptographic devices or a filename or file URL for file-based key stores. It can be an SAF keyring URL for RACF(R) keyrings.
SecAuditKeyStore.path.displayName=Path
SecAuditKeyStore.short.description=Defines the keystores used for storing the encryption certificate.
SecAuditKeyStore.type.description=Specifies the implementation for keystore management. This value defines the tool that operates on this keystore type.
SecAuditKeyStore.type.displayName=Type
SecAuditMonitor.auditNotify.description=Specifies the notification when audit monitoring is enabled. This notification can be indicated in email or in the message log file.
SecAuditMonitor.auditNotify.displayName=Monitor notification
SecAuditMonitor.description=The audit monitor notifies email recipients when the auditing subsystem is not operating.  It does not send notifications for other security events.
SecAuditMonitor.displayName=Audit monitor
SecAuditMonitor.enabled.description=Specifies the auditing monitor is active.
SecAuditMonitor.enabled.displayName=Enable monitoring
SecAuditMonitor.name.description=Specifies the unique name for the monitor.
SecAuditMonitor.name.displayName=Name
SecAuditMonitor.short.description=Configures the audit monitor.
SecAuditNotify.displayName=Notifications
SecAuditNotify.emailList.displayName=List of the email addresses
SecAuditNotify.emailList.displayNameHL=List of the Email Addresses
SecAuditNotify.messageLog.displayName=Message log
SecAuditNotify.messageLog.displayNameHL=Message Log
SecAuditNotify.name.displayName=Notification name
SecAuditNotify.name.displayNameHL=Notification Name
SecAuditProvider.NEW.displayName=New
SecAuditProvider.description=Audit service providers define the implementation details of the service provider. There are three types of audit service providers: binary file-based, SMF, and third party.
SecAuditProvider.displayName=Audit service provider
SecAuditProvider.filters.description=Specifies the filters for this emitter.
SecAuditProvider.filters.displayName=Audit service provider filters
SecAuditProvider.filters.enabled.description=Specifies the filters enabled for this emitter.
SecAuditProvider.filters.enabled.displayName=Enabled filters
SecAuditProvider.filters.selectable.description=Specifies the available filters.
SecAuditProvider.filters.selectable.displayName=Selectable filters
SecAuditProvider.formatClassName.description=Specifies which event formatter class will be used to process the audit records.
SecAuditProvider.formatClassName.displayName=Event formatting module class name
SecAuditProvider.formatClassName.displayNameHL=Event Formatting Module Class Name
SecAuditProvider.name.description=Specifies a unique identifier to associate with this implementing emitter class.
SecAuditProvider.name.displayName=Name
SecAuditProvider.short.description=Specifies configuration options for the audit service providers.
SecAuditProvider.type.displayName=Type
SecAuditSMFEmit.displayName=SMF emitter
SecAuditSMFEmit.newName=New SMF emitter
SecAuditSMFEmit.warning=Audit records written to an SMF provider can not be signed or encrypted. Therefore, configuration of signing and encryption for audit records is not required.
SecAuditSign.certificate.description=Specifies the certificate used for signing the audit records.
SecAuditSign.certificate.displayName=Signing certificate
SecAuditSign.description=Signing audit records provides a means of tamper-proofing the recording of the auditable events.
SecAuditSign.displayName=Audit record signing configuration
SecAuditSign.enabled.description=Specifies whether signing is enabled for the audit records.
SecAuditSign.enabled.displayName=Enable signing
SecAuditSign.keystore.description=Specifies the centrally managed keystore file used to store the signing certificate.
SecAuditSign.keystore.displayName=Managed keystore containing the signing certificate
SecAuditSign.noLink.displayName=Audit record signing configuration
SecAuditSign.short.description=Specifies the configuration options for audit record signing.
SecAuditSignEncrypt.certAlias.description=Specifies the certificate to use in the selected keystore file.
SecAuditSignEncrypt.certAlias.displayName=Certificate alias
SecAuditSignEncrypt.certInKeystore.description=Specifies the certificate to use in the selected keystore file.
SecAuditSignEncrypt.certInKeystore.displayName=Certificate in keystore
SecAuditSignEncrypt.certKeystoreInfo.displayName=Keystore and certificate information
SecAuditSignEncrypt.certNew.description=Specifies that a new certificate will be created in the selected keystore file.
SecAuditSignEncrypt.certNew.displayName=Create a new certificate in the selected keystore file
SecAuditSignEncrypt.encryptCert.description=Specifies that the certificate used for encryption will be imported into the signing keystore file and used for signing.
SecAuditSignEncrypt.encryptCert.displayName=Import the encryption certificate
SecAuditSignEncrypt.existingCert.description=Specifies that an existing self-signed certificate will be imported and used.
SecAuditSignEncrypt.existingCert.displayName=Import a certificate
SecAuditSignEncrypt.genCert.description=Specifies that the application server will auto-generate the certificate.
SecAuditSignEncrypt.genCert.displayName=Automatically generate certificate
SecAuditSignEncrypt.import.keyFileAlias.mismatch=You must click the Get Key File Aliases button to retrieve the certificate aliases for the selected key file.
SecAuditSignEncrypt.importCertAlias.description=Specifies the new alias that you want for the certificate in the keystore file.
SecAuditSignEncrypt.importCertAlias.displayName=Certificate alias for imported certificate
SecAuditSignEncrypt.importFile.description=Specifies the key store file name that contains the certificate to import.
SecAuditSignEncrypt.importFile.displayName=Key file name
SecAuditSignEncrypt.importGetAliases.displayName=Get Key File Aliases
SecAuditSignEncrypt.importOldCertAlias.description=Specifies the certificate alias from the key file name specified in the Key file name field, that you want to import into the key store.
SecAuditSignEncrypt.importOldCertAlias.displayName=Certificate alias to import
SecAuditSignEncrypt.importPassword.description=Specifies the password that is used to access the key store file.
SecAuditSignEncrypt.importPassword.displayName=Key file password
SecAuditSignEncrypt.importPath.description=Specifies the fully qualified path of the keystore file, not including the keystore file name. The keystore must be located on the physical machine where the administrative server process is running (for example, AdminConsole, wsadmin connection).
SecAuditSignEncrypt.importPath.displayName=Path
SecAuditSignEncrypt.importType.description=Specifies the type of keystore file. The valid types of keystore files are listed in the menu.
SecAuditSignEncrypt.importType.displayName=Type
SecAuditSignEncrypt.keystorePassword.description=Specifies the key store password.
SecAuditSignEncrypt.keystorePassword.displayName=Password
SecAuditSignEncrypt.keystorePath.description=Specifies the location of the key store.
SecAuditSignEncrypt.keystorePath.displayName=Path
SecAuditSignEncrypt.keystoreType.description=Specifies the type of the key store.
SecAuditSignEncrypt.keystoreType.displayName=Type
SecCache.description=Use this panel to specify your authentication cache settings.
SecCache.displayName=Authentication cache settings
SecCache.domain.description=Use this panel to specify your authentication cache settings. The configuration specified on this panel is applied only to this domain.
SecCache.enable.description=Specifies whether the authentication cache is enabled.
SecCache.enable.displayName=Enable authentication cache
SecCache.initialSize.description=Specifies the initial cache size.
SecCache.initialSize.displayName=Initial cache size
SecCache.maxSize.description=Specifies the maximum cache size.
SecCache.maxSize.displayName=Maximum cache size
SecCache.remove.button=Remove
SecCache.removeAll.button=Remove All Users
SecCache.revokeUsers.description=Use this section to remove users from the cache.
SecCache.revokeUsers.displayName=Revoke Users
SecCache.size.units=entries
SecCache.timeout.description=Specifies the period of time after which the cached authentication data is not valid.
SecCache.timeout.displayName=Cache timeout
SecCache.timeout.setting={0} minute authentication cache timeout
SecCache.timeoutPanel.displayName=Cache timeout on the Security > Global security > Authentication cache settings panel
SecCache.useBasicAuthKeys.description=Specifies whether to enable caching of basic authentication (userName/password) cache keys.
SecCache.useBasicAuthKeys.displayName=Use basic authentication cache keys (password one-way hashed)
SecCache.useCustomKeys.description=Specifies whether to use custom cache keys as the lookup in the cache.
SecCache.useCustomKeys.displayName=Use custom cache keys
SecCache.user.description=Specifies the name of the user to be removed from cache.
SecCache.user.displayName=Remove the following user from cache
SecDomain.app.appDisabled=Application security disabled
SecDomain.app.appEnabled=Application security enabled
SecDomain.app.description=Specifies the settings for application security.
SecDomain.app.disabled=Disabled
SecDomain.app.displayName=Application Security:
SecDomain.app.enabled=Enabled
SecDomain.authProvider.description=Specifies the settings for the authorization provider.
SecDomain.authProvider.displayName=Authorization Provider:
SecDomain.authProviderDefault.displayName=Built-in authorization
SecDomain.authProviderSAF.displayName=SAF authorization
SecDomain.authorization.description=Specifies the authorization configured for this domain.
SecDomain.authorization.displayName=Authorization provider:
SecDomain.copy.description=Use this panel to provide a name and description for the security domain. Once you apply the name, you can modify the security attributes of this domain and assign it to cell resources.
SecDomain.copyGlobal.button=Copy Global Security...
SecDomain.copySelected.button=Copy Selected Domain...
SecDomain.description=Security domains provide a mechanism to use different security settings for administrative applications and user applications. They also provide the ability to support multiple security settings so different applications can use different security attributes like user registry or login configurations.
SecDomain.description.description=Specifies a description for the domain.
SecDomain.description.displayName=Description
SecDomain.displayName=Security domains
SecDomain.edit.description=Use this panel to configure the security attributes of this domain and to assign the domain to cell resources. For each security attribute, you can use the global security settings or customize settings for this domain.
SecDomain.editGlobal.description=Use this panel to assign servers and clusters to the Global security domain when you have another domain assigned to the cell.
SecDomain.globalDomain.description1=This is a special security domain that allows you to directly associate servers and clusters with Global security. This domain is beneficial when you have an application security domain assigned to the cell, but want to assign select scopes to Global security.
SecDomain.globalDomain.description2=Security attributes are not configurable from this panel. You can configure the global security attributes on the panel accessed through the Global security link in the Security section of the main navigation.
SecDomain.j2c.aliases=Aliases
SecDomain.j2c.description=Specifies the settings for the JAAS J2C authentication data.
SecDomain.j2c.displayName=JAAS J2C Authentication Data:
SecDomain.jaasAppLog.description=Specifies the settings for the JAAS application logins.
SecDomain.jaasAppLog.displayName=JAAS Application Logins:
SecDomain.jaasAppLog.logins=Application Logins
SecDomain.jaasSysLog.description=Specifies the settings for the JAAS system logins.
SecDomain.jaasSysLog.displayName=JAAS System Logins:
SecDomain.jaasSysLog.logins=System Logins
SecDomain.jaspi.description=Specifies the settings for JAVA authentication SPI.
SecDomain.jaspi.disabled=Disabled
SecDomain.jaspi.displayName=Java Authentication SPI (JASPI):
SecDomain.jaspi.enabled=Enabled
SecDomain.jaspi.providers=Providers
SecDomain.java2.description=Specifies the settings for Java 2 security.
SecDomain.java2.disabled=Disabled
SecDomain.java2.displayName=Java 2 Security:
SecDomain.java2.enabled=Enabled
SecDomain.ltpa.description=Specifies the settings for authentication mechanisms.
SecDomain.ltpa.displayName=Authentication Mechanism Attributes:
SecDomain.ltpa.setting={0} minute LTPA timeout
SecDomain.manageGroups.description=Manage the groups of the federated repository for this domain.
SecDomain.manageGroups.displayName=Manage groups
SecDomain.manageGroups.global.description=Manage the groups of the global federated repository.
SecDomain.manageUsers.description=Manage the users of the federated repository for this domain.
SecDomain.manageUsers.displayName=Manage users
SecDomain.manageUsers.global.description=Manage the users of the global federated repository.
SecDomain.manageUsersGroups.save=Changes have been made to the domain configuration. You must save these changes to the master configuration in order to manage the users and groups of the federated repository for this domain.
SecDomain.name.description=Specifies a unique name for the domain.
SecDomain.name.displayName=Name
SecDomain.name.reserved.error=The domain name, {0}, is reserved and can not be used to create a domain.
SecDomain.new.description=Use this panel to provide a name and description for the security domain. Once you apply the name, you can configure the security attributes of this domain and assign it to cell resources.
SecDomain.one.description=Use this link to view and modify the effective security domain for this resource.
SecDomain.one.displayName=Security domain
SecDomain.resources.description=Assign the security domain to the entire cell or select the specific servers, clusters, and service integration buses to include in this security domain.
SecDomain.resources.heading=Assigned Scopes
SecDomain.rmiIIOP.description=Specifies the settings for RMI/IIOP.
SecDomain.rmiIIOP.displayName=RMI/IIOP Security:
SecDomain.security.heading=Security Attributes
SecDomain.short.description=Specifies the configuration of security domains.
SecDomain.spnego.description=Specifies the settings for SPNEGO.
SecDomain.spnego.disabled=Disabled
SecDomain.spnego.displayName=SPNEGO Web Authentication:
SecDomain.spnego.dynamicUpdate=Dynamically update SPNEGO
SecDomain.spnego.enabled=Enabled
SecDomain.spnego.fallback=Allow fall back to application authentication mechanism
SecDomain.spnego.krbConfigFile=Kerberos configuration file: {0}
SecDomain.spnego.krbKeytabFile=Kerberos keytab files: {0}
SecDomain.spnego.noDynamicUpdate=Do not dynamically update SPNEGO
SecDomain.spnego.noFallback=Do not allow fall back to application authentication mechanism
SecDomain.spnego.spnegoDisabled=SPNEGO disabled
SecDomain.spnego.spnegoEnabled=SPNEGO enabled
SecDomain.trustAssoc.description=Specifies the settings for trust association.
SecDomain.trustAssoc.disabled=Disabled
SecDomain.trustAssoc.displayName=Trust Association:
SecDomain.trustAssoc.enabled=Enabled
SecDomain.trustAssoc.interceptors=Interceptors
SecDomain.useCustom.description=Specifies the settings are defined in the domain.
SecDomain.useCustom.displayName=Customize for this domain
SecDomain.useCustomEntries.displayName=Use global and domain-specific entries
SecDomain.useCustomLogins.displayName=Use global and domain-specific logins
SecDomain.useGlobal.description=Specifies the global security settings are being used.
SecDomain.useGlobal.displayName=Use global security settings
SecDomain.userRealm.baseDN=Base Distinguished Name (DN): {0}
SecDomain.userRealm.bindDN=Bind Distinguished Name (DN): {0}
SecDomain.userRealm.class=Class name: {0}
SecDomain.userRealm.description=Specifies the settings for the user realm.
SecDomain.userRealm.displayName=User Realm:
SecDomain.userRealm.host=Host: {0}
SecDomain.userRealm.port=Port: {0}
SecDomain.userRealm.type=Repository type: {0}
SecDomain.userRealmType.description=Specifies the type of the user realm configured for this domain.
SecDomain.userRealmType.displayName=Realm type
SecDomain.usingCustom.description=Specifies the settings are defined in the domain.
SecDomain.usingCustom.displayName=Customized
SecDomain.usingCustomInsert.displayName=Customized - {0}
SecDomain.usingGlobal.description=Specifies the global security settings are being used.
SecDomain.usingGlobal.displayName=Global security settings
SecDomain.usingGlobalInsert.displayName={0}
SecDomain.usingGlobalRealm.displayName=Administrative realm
SecDomain.webService.category=Web Service Bindings
SecDomain.zos.both=Both enabled
SecDomain.zos.description=Specifies the settings for z/OS.
SecDomain.zos.displayName=z/OS security options:
SecDomain.zos.identityOnly=Only thread identity synchronization enabled
SecDomain.zos.neither=Neither thread identity enabled
SecDomain.zos.runAsOnly=Only RunAs thread identity enabled
SecDomainCopy.description=Use this page to provide a name and descrition for the new security domain.
SecDomainCopy.displayName=Copy security domains
SecDomainCopy.root.displayName=Copy of {0}
SecDomainTree.cell.name=Cell
SecDomainTree.clusterMembers.name=Cluster members
SecTrustRealm.ADD.description=Specifies to add an external realm to the table
SecTrustRealm.ADD.displayName=Add External Realm...
SecTrustRealm.Add.displayName=Add external realm
SecTrustRealm.Add.inbound.description=Use this panel to trust a WebSphere realm that is external to this cell.
SecTrustRealm.Add.outbound.description=Use this panel to trust a WebSphere realm that is external to this cell.
SecTrustRealm.NOTRUST.description=Specifies not to trust the selected realms
SecTrustRealm.NOTRUST.displayName=Not Trusted
SecTrustRealm.REMOVE.description=Specifies to remove the selected external realms from the table
SecTrustRealm.REMOVE.displayName=Remove External Realm
SecTrustRealm.TRUST.description=Specifies to trust the selected realms
SecTrustRealm.TRUST.displayName=Trusted
SecTrustRealm.addName.description=Specifies the name of the external realm.
SecTrustRealm.addName.displayName=External realm name
SecTrustRealm.inbound.description=Use this panel to configure which realms to grant inbound trust to. This realm will accept messages from trusted realms and will not accept messages from untrusted realms. All realms in this cell display below. Use the Add External Realm button to add trust for realms that are external to this cell. Marking an external realm as untrusted will remove it from this panel.
SecTrustRealm.inbound.displayName=Trusted authentication realms - inbound
SecTrustRealm.inbound.federatedRegistry.description=Inbound trust is the only domain-specific configurable property for federated repositories. All other configuration is defined through Global security and referenced by the domain. Use this panel to configure which realms to grant inbound trust to. This realm will accept messages from trusted realms and will not accept messages from untrusted realms. All realms in this cell display below. Use the Add External Realm button to add trust for realms that are external to this cell. Marking an external realm as untrusted will remove it from this panel.
SecTrustRealm.inboundTrust.description=Specifies whether the realm is trusted.
SecTrustRealm.inboundTrust.displayName=Inbound Trust
SecTrustRealm.name.description=Specifies the name of the realm
SecTrustRealm.name.displayName=Name
SecTrustRealm.notTrusted.displayName=Not trusted
SecTrustRealm.outbound.description=Use this panel to specify which realms have outbound trust. The RMI/IIOP protocol can be used to send messages to trusted realms and cannot be used to send messages to untrusted realms. All realms in this cell display below. Use the Add External Realm button to add trust for realms that are external to this cell. Marking an external realm as untrusted will remove it from this panel.
SecTrustRealm.outbound.displayName=Trusted authentication realms - outbound
SecTrustRealm.outboundTrust.description=Specifies whether the realm is trusted.
SecTrustRealm.outboundTrust.displayName=Outbound Trust
SecTrustRealm.realm.displayName=Realm
SecTrustRealm.realms.description=Specifies the list of realms
SecTrustRealm.realms.displayName=Realms
SecTrustRealm.trust.description=Specifies the selected trust.
SecTrustRealm.trust.displayName=Trust
SecTrustRealm.trustAll.description=Specifies that all realms are trusted.
SecTrustRealm.trustAll.displayName=Trust all realms (including those external to this cell)
SecTrustRealm.trustSome.description=Specifies the realms are trusted according to the information in the table.
SecTrustRealm.trustSome.displayName=Trust realms as indicated below
SecTrustRealm.trusted.displayName=Trusted
SecureEndpoint.certAlias.description=Specifies the certificate to use in the key store.
SecureEndpoint.certAlias.displayName=Certificate alias in key store
SecureEndpoint.description=Displays Secure Sockets Layer (SSL) configurations for selected scopes, such as a cell, node, server, or cluster.
SecureEndpoint.direction.description=Specifies the direction to which the Secure Sockets Layer (SSL) configuration applies. Inbound refers to any listener port. Outbound refers to outbound end point connections.
SecureEndpoint.direction.displayName=Direction
SecureEndpoint.displayName=Manage endpoint security configurations
SecureEndpoint.displayName.empty=
SecureEndpoint.inbound=Inbound
SecureEndpoint.inherited.description=Specifies the inherited Secure Sockets Layer (SSL) configuration information that is used if none is specified at this scope.
SecureEndpoint.inherited.displayName=Inherited SSL configuration
SecureEndpoint.inheritedCert.description=Specifies the certificate alias that is inherited from a higher-level scope. This field displays for server and node groups within the object hierarchy.
SecureEndpoint.inheritedCert.displayName=Inherited certificate alias
SecureEndpoint.inheritedSSL.description=Specifies the name of the Secure Sockets Layer (SSL) configuration that is inherited from a higher level scope.
SecureEndpoint.inheritedSSL.displayName=Inherited SSL configuration name
SecureEndpoint.manageCerts.button=Manage certificates
SecureEndpoint.name.description=Specifies the name of Secure Sockets Layer (SSL) configuration scope, which is derived from a selected object in the hierarchy
SecureEndpoint.name.displayName=Name
SecureEndpoint.outbound=Outbound
SecureEndpoint.override.description=Specifies the Secure Sockets Layer (SSL) configuration to be used for this scope and any lower scopes that have not already designated an SSL configuration. This field displays for server and node groups within the object hierarchy. This field displays for server and node groups within the object hierarchy.
SecureEndpoint.override.displayName=Override inherited values
SecureEndpoint.overrideCategory.description=Specifies a specific Secure Sockets Layer (SSL) configuration that is associated with this endpoint.
SecureEndpoint.overrideCategory.displayName=Specific SSL configuration for this endpoint
SecureEndpoint.scopes.displayName=Scopes
SecureEndpoint.short.description=Displays Secure Sockets Layer (SSL) configurations for selected scopes, such as a cell, node, server, or cluster.
SecureEndpoint.sslConfig.description=Specifies the Secure Sockets Layer (SSL) configuration that is used by requests at this scope.
SecureEndpoint.sslConfig.displayName=SSL configuration
SecureEndpoint.updateCerts.button=Update certificate alias list
SecureSocketLayer.availableCiphers.description=Specifies the various cipher suite groups that can be chosen depending upon your security needs. The stronger the cipher suite strength, the better the security but with performance consequences.
SecureSocketLayer.availableCiphers.displayName=Cipher suite groups
SecureSocketLayer.button.add=Add >>
SecureSocketLayer.button.remove=<< Remove
SecureSocketLayer.cipherSuites.description=Specifies the list of ciphers that are used during the Secure Sockets Layer (SSL) handshake.
SecureSocketLayer.cipherSuites.displayName=Cipher suites
SecureSocketLayer.clientAuthentication.description=Specifies the whether Secure Sockets Layer (SSL) client authentication should be requested if the SSL connection is used for the server side of the connection. If None is selected, the server does not request a client certificate be sent during the handshake. If Supported is selected, the server requests that a client certificate be sent. If the client does not have a certificate, the handshake might still succeed. If Required is selected, the server requests that a client certificate be sent. If the client does not have a certificate the handshake fails.
SecureSocketLayer.clientAuthentication.displayName=Client authentication
SecureSocketLayer.cryptoHardware.description=Specifies information about the cryptographic tokens that is related to Secure Sockets Layer (SSL) support.
SecureSocketLayer.cryptoHardware.displayName=Cryptographic token
SecureSocketLayer.description=Specifies the configuration settings that are related to the Secure Sockets Layer (SSL) protocol.
SecureSocketLayer.displayName=Secure Sockets Layer
SecureSocketLayer.enableCryptoHardwareSupport.description=Enables and disables cryptographic hardware support.
SecureSocketLayer.enableCryptoHardwareSupport.displayName=Cryptographic token
SecureSocketLayer.keyFile.description=Defines a file that contains public keys and might contain private keys.
SecureSocketLayer.keyFile.displayName=Key file
SecureSocketLayer.keyFileFormat.description=Specifies the format of the key file. For more secure key files, use the JCEK format.
SecureSocketLayer.keyFileFormat.displayName=Key file format
SecureSocketLayer.keyFileName.description=Provides the fully qualified path to the key file that contains public keys and might contain private keys.
SecureSocketLayer.keyFileName.displayName=Key file name
SecureSocketLayer.keyFilePassword.description=Specifies the password that is used to access the key file.
SecureSocketLayer.keyFilePassword.displayName=Key file password
SecureSocketLayer.properties.description=Provides the arbitrary name and value pairs for data. The name is a property key and the value is a string value that you can use to set internal system configuration properties.
SecureSocketLayer.properties.displayName=Custom properties
SecureSocketLayer.protocol.SSL=SSL
SecureSocketLayer.protocol.SSL_TLS=SSL_TLS
SecureSocketLayer.protocol.SSLv2=SSLv2
SecureSocketLayer.protocol.SSLv3=SSLv3
SecureSocketLayer.protocol.TLS=TLS
SecureSocketLayer.protocol.TLSV1=TLSv1
SecureSocketLayer.protocol.description=Specifies the Secure Sockets Layer (SSL) handshake protocol. This protocol is typically SSL_TLS, which supports all handshake protocols except for SSLv2 on the server side. When United States Federal Information Processing standard (FIPS) option is enabled, TLS is automatically used regardless of this setting.
SecureSocketLayer.protocol.displayName=Protocol
SecureSocketLayer.provider.IBMJSSE=IBMJSSE
SecureSocketLayer.provider.IBMJSSE2=IBMJSSE2
SecureSocketLayer.provider.IBMJSSEFIPS=IBMJSSEFIPS
SecureSocketLayer.provider.custom=Custom JSSE provider
SecureSocketLayer.provider.custom.description=Specifies a custom provider. For a custom provider, you first must enter the cipher suites by clicking Secure communication > Manage endpoint security configurations > connection_type. Under Related Items, click SSL configurations > configuration_name. Under Additional properties, click Quality of protection (QoP) settings.
SecureSocketLayer.provider.custom.displayName=Custom JSSE provider
SecureSocketLayer.provider.custom.select=Custom provider
SecureSocketLayer.provider.description=Specifies which Java(TM) Secure Sockets Extension (JSSE) provider is used. The only predefined JSSE provider is IBMJSSE2. When United States Federal Information Processing standard (FIPS) option is enabled, this provider uses IBMJCEFIPS for the Secure Sockets Layer (SSL) encryption and signing.
SecureSocketLayer.provider.displayName=Provider
SecureSocketLayer.provider.predefined=Predefined JSSE provider
SecureSocketLayer.provider.predefined.description=Specifies one of the predefined JSSE providers. IBMJSSE is the only predefined JSSE provider that is supported on the i5/OS(TM) platform. IBMJSSEFIPS is the Federal Information Processing Standard (FIPS)-approved version of the IBMJSSE provider.
SecureSocketLayer.provider.predefined.displayName=Predefined JSSE provider
SecureSocketLayer.provider.predefined.select=Select provider
SecureSocketLayer.securityLevel.description=Specifies one of the pre-configured security levels. High, which is the default, specifies 128-bit ciphers; medium specifies 40-bit ciphers; and low specifies digital signing ciphers only without encryption.
SecureSocketLayer.securityLevel.displayName=Security level
SecureSocketLayer.selectedCiphers.description=Specifies the ciphers that are effective when the configuration is saved. These ciphers are used to negotiate with the remote side of the connection during the handshake. A common cipher needs to be selected or the handshake fails.
SecureSocketLayer.selectedCiphers.displayName=Selected ciphers
SecureSocketLayer.trustFile.description=Specifies a file that contains public keys.
SecureSocketLayer.trustFile.displayName=Trust file
SecureSocketLayer.trustFileFormat.description=Specifies the format of the trust file. For more secure key files, use the JCEK format.
SecureSocketLayer.trustFileFormat.displayName=Trust file format
SecureSocketLayer.trustFileName.description=Provides the fully qualified path to a trust file that contains the public keys.
SecureSocketLayer.trustFileName.displayName=Trust file name
SecureSocketLayer.trustFilePassword.description=Specifies the password that is used to access the trust file.
SecureSocketLayer.trustFilePassword.displayName=Trust file password
Security.CSI.description=Specifies the configuration for the Object Management Group (OMG) Common Secure Interoperability version 2 (CSIv2) security protocol.
Security.CSI.displayName=CSI
Security.IBM.description=Specifies the configuration for the IBM(R) Secure Authentication Service (SAS) security protocol that is used to communicate with WebSphere(R) Application Server versions 3.x and 4.x. The SAS protocol is not supported by WebSphere(R) Application Server Version 6.1, but is available for previous versions in a cell.
Security.IBM.displayName=SAS
Security.SecurityCenter.displayName=Security
Security.activeAuthMechanism.CustomAuthMechanism.displayName=Custom
Security.activeAuthMechanism.LTPA.displayName=Lightweight Third Party Authentication (LTPA) 
Security.activeAuthMechanism.SWAMAuthentication.displayName=Simple WebSphere Authentication Mechanism (SWAM) 
Security.activeAuthMechanism.description=Specifies the active authentication mechanism that is used when you enable security.
Security.activeAuthMechanism.displayName=Active authentication mechanism
Security.activeProtocol.description=Specifies the active security authentication protocol when you enable security.
Security.activeProtocol.displayName=Active RMI/IIOP authentication protocol
Security.activeUserRegistry.WIMUserRegistry.description=Manages identities in a single, virtual realm that are stored in multiple repositories.
Security.activeUserRegistry.WIMUserRegistry.displayName=Federated repositories
Security.activeUserRegistry.description=Specifies the active user registry when you enable security. The LDAP or custom user registry is required when running as a UNIX(R) non-root user or running in a multi-node environment.
Security.activeUserRegistry.displayName=Realm definition
Security.applicationLoginConfig.description=Specifies a list of Java(TM) Authentication and Authorization Service (JAAS) login configurations that the application code can use including enterprise beans, Java(TM) ServerPages (JSP) files, servlets, and resource adapters.
Security.applicationLoginConfig.displayName=JAAS - Application logins
Security.associations.displayName=Associations
Security.authConfig.description=
Security.authConfig.displayName=Authentication configuration
Security.authDataEntries.description=Specifies a list of user identities and passwords for Java(TM) 2 Connector security to use.
Security.authDataEntries.displayName=JAAS - J2C authentication data
Security.authMechanisms.CustomAuthMechanism.displayName=Custom authentication mechanism
Security.authMechanisms.LTPA.displayName=LTPA authentication mechanism
Security.authMechanisms.SWAMAuthentication.displayName=SWAM authentication mechanism
Security.authMechanisms.description=Specifies a list of authentication mechanisms that are configured in the system. Only one authentication mechanism can be active in the system at a time.
Security.authMechanisms.displayName=Authentication mechanisms
Security.authorizationTableImpl.description=
Security.authorizationTableImpl.displayName=Authorization table implementation
Security.bits=bits
Security.button.add=Add >>
Security.button.addOneArrow=Add >
Security.button.remove=<< Remove
Security.communications.SSLConfig.1.description=The Secure Sockets Layer (SSL) protocol provides secure communications between remote server processes or endpoints. SSL security can be used for establishing communications inbound to and outbound from an endpoint. To establish secure communications, a certificate and an SSL configuration must be specified for the endpoint.
Security.communications.SSLConfig.2.description=In previous versions of this product, it was necessary to manually configure each endpoint for Secure Sockets Layer (SSL). In this version, you can define a single configuration for the entire application-serving environment. This capability enables you to centrally manage secure communications. In addition, trust zones can be established in multiple node environments by overriding the default, cell-level SSL configuration.
Security.communications.SSLConfig.3.description=If you have migrated a secured environment to this version using the migration utilities, the old Secure Sockets Layer (SSL) configurations are restored for the various endpoints. However, it is necessary for you to re-configure SSL to take advantage of the centralized management capability.
Security.communications.SSLConfig.displayName=SSL configurations
Security.communications.SSLConfig.short.description=Provides secure communications between remote server processes or endpoints. Secure Sockets Layer (SSL) security can be used for establishing communications inbound to and outbound from an endpoint.
Security.communications.description=
Security.communications.displayName=SSL certificate and key management
Security.communications.dynamicUpdate.description=Specifies that all of the Secure Sockets Layer (SSL)-related attributes that change should be read from the configuration dynamically after they have been saved and then used for new connections. To not impact customers, it is recommended that changes to production servers be made during off-peak periods.
Security.communications.dynamicUpdate.displayName=Dynamically update the run time when SSL configuration changes occur
Security.communications.settings.displayName=Configuration settings
Security.communications.short.description=Manages endpoint security configurations, trust zones, and certificate expiration.
Security.communications.useFIPS.description=Specifies the Federal Information Processing Standard (FIPS)-compliant Java(TM) cryptography engine is enabled.
Security.communications.useFIPS.displayName=Use the United States Federal Information Processing Standard (FIPS) algorithms. Note: This option requires the TLS handshake protocol, which some browsers do not enable by default.
Security.confirmKeyPassword.description=Confirms the password that is provided in the Password field.
Security.confirmKeyPassword.displayName=Confirm password
Security.days=days
Security.defaultSSLSettings.description=Applies the default SSL configuration to the entire administrative domain.
Security.defaultSSLSettings.displayName=Default SSL settings
Security.domainActiveUserRegistry.WIMUserRegistry.displayName=Global federated repositories
Security.enabled.description=Enables administrative security for this application server domain.
Security.enabled.displayName=Enable administrative security
Security.enforceJCASecurity.description=Enable this option to restrict application access to sensitive Java(TM) Connector Architecture (JCA) mapping authentication data.
Security.enforceJCASecurity.displayName=Include restricted access to back-end server login data
Security.enforceJCASecurity.warn=When you select the Restrict access to resource authentication data option, verify that any Java 2 Platform, Enterprise Edition (J2EE) applications that use the WSPrincipalMappingLoginModule implementation directly in the Java Authentication and Authorization Service (JAAS) login are granted the accessRuntimeClasses WebSphereRuntimePermission.
Security.enforceJava2Security.description=Specifies whether to enable Java(TM) 2 security. If Java(TM) 2 security is enabled and an application requires more Java(TM) 2 security permissions than are granted in the default policy, then the application might fail to run properly. 
Security.enforceJava2Security.displayName=Use Java 2 security to restrict application access to local resources
Security.error.lessThanOther=The field, {0}, should be greater than the field, {1}.
Security.hours=hours
Security.issuePermissionWarning.description=Specifies that a warning is issued during application installation if an application requires a Java(TM) 2 security permission that normally is not granted to an application.
Security.issuePermissionWarning.displayName=Warn if application permissions conflict with restrictions
Security.minutes=minutes
Security.options=Options
Security.property.description=Specifies arbitrary name and value pairs of data. The name is a property key and the value is a string value that can be used to set internal system configuration properties.
Security.property.description.description=Specifies an optional description for this property value.
Security.property.description.displayName=Description
Security.property.detail.description=Specifies an arbitrary name and value pair of data. The name is a property key and the value is a string value that can be used to set internal system configuration properties.
Security.property.displayName=Custom properties
Security.property.displayNameHL=Custom Properties
Security.property.domain.description=Specifies arbitrary name and value pairs of data. The name is a property key and the value is a string value that can be used to set internal system configuration properties. The name and value pairs below are local to this domain and override the global custom properties. Any name and value pairs not listed below will be obtained from the global custom properties.
Security.property.name.description=Specifies the name of the property.
Security.property.name.displayName=Name
Security.property.required.description=Indicates whether this property is required to have a value.
Security.property.required.displayName=Required
Security.property.short.description=Specifies arbitrary name and value pairs of data. The name is a property key and the value is a string value that can be used to set internal system configuration properties.
Security.property.validationExpression.description=The administrative console or other tools use this expression to validate the value of this property.
Security.property.validationExpression.displayName=Validation expression
Security.property.value.description=Specifies a string value that can be used to set this property.
Security.property.value.displayName=Value
Security.repertoire.description=Specifies a list of Secure Sockets Layer (SSL) configurations.
Security.repertoire.displayName=SSL configurations
Security.roleBasedAuthorization.description=Specifies a list of system components that use the generalized role-based authorization for access control.
Security.roleBasedAuthorization.displayName=Role-based authorization
Security.seconds=seconds
Security.systemLoginConfig.description=Specifies a list of Java(TM) Authentication and Authorization Service (JAAS) login configurations that are used by system resources including the authentication mechanism, principal mapping, and credential mapping. You cannot remove the default login configurations because doing so might cause applications to fail.
Security.systemLoginConfig.displayName=JAAS - System logins
Security.systemLoginConfig.domain.description=Specifies a list of Java(TM) Authentication and Authorization Service (JAAS) login configurations that are used by system resources including the authentication mechanism, principal mapping, and credential mapping. Resources in this security domain can access the global system login configurations as well as the configurations below.
Security.updateRuntime=Update run time
Security.useFIPS.backup.description=Enables the Federal Information Processing Standard (FIPS)-compliant cryptographic engine.
Security.useFIPS.displayName=Use the Federal Information Processing Standard (FIPS)
Security.useLocalSecurityServer.description=Specifies whether an application server uses a local instance of the security server or uses the security server in the node agent on the local node, on a remote node, or in the cell manager. The order is specific for the security server.
Security.useLocalSecurityServer.displayName=Use the local security server
Security.userRegistries.description=Specifies the configuration for a registry of users that is defined in the system. User registry configuration is required when you enable the security configuration. The local operating system is the default type of registry.
Security.userRegistries.displayName=Federated repositories
Security.values=Values
Security.webAuthentication.behavior.description=Specifies the general settings for web authentication.
Security.webAuthentication.behavior.displayName=Web security - General settings
Security.webAuthentication.description=Specifies the settings for web authentication.
Security.webAuthentication.displayName=Web authentication
Security.weeks=weeks
SecurityAudit.auditorID.description=Specifies a valid user ID from the current active user realm that has been assigned the Auditor role.
SecurityAudit.auditorID.displayName=Primary auditor user name
SecurityAudit.auditorPassword.description=Specifies the password for the auditor ID.
SecurityAudit.auditorPassword.displayName=Auditor password
SecurityAudit.batch.description=Specifies whether auditable events will be batched prior to being emitted. This can provide some performance improvement, depending on the number of filters enabled.
SecurityAudit.batch.displayName=Enable batching of events
SecurityAudit.description=Security auditing provides a means to gather and store auditable event records to help assure the integrity of the business computing environment.
SecurityAudit.displayName=Security auditing
SecurityAudit.enabled.description=Specifies whether the security auditing functionality is enabled.
SecurityAudit.enabled.displayName=Enable security auditing
SecurityAudit.failAction.FATAL=Terminate server
SecurityAudit.failAction.NOWARN=No warning
SecurityAudit.failAction.WARN=Log warning
SecurityAudit.failAction.description=Specifies the behavior of the auditing subsystem in the event of a failure.
SecurityAudit.failAction.displayName=Audit subsystem failure action
SecurityAudit.short.description=Specifies the configuration options for the security auditing subsystem.
SecurityAudit.verbose.description=Specifies whether verbose auditing will be captured.
SecurityAudit.verbose.displayName=Enable verbose auditing
SecurityCerts.type.base64.displayName=Base64-encoded ASCII data
SecurityCerts.type.binary.displayName=Binary DER data
SecurityUtil.errorCreateResource=An exception occurred creating a new security.xml file and security extent in context {0}
SecurityWizard.adminID.description=Specifies the name of the user with administrative privileges that is defined in the registry.
SecurityWizard.adminID.displayName=Primary administrative user name
SecurityWizard.customPage.description=Custom repositories, such as a database repository, require the definition of a Java(TM) class to access the database. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the repository.
SecurityWizard.description=Secure the application serving environment
SecurityWizard.displayName=Configure security
SecurityWizard.extentPage1.description=This wizard assists you in securing your application serving environment. The application serving infrastructure can store administrative users and passwords or can use an existing registry with stored administrative users, application users, or both.
SecurityWizard.extentPage2.description=If you are using an existing registry such as the local operating system, LDAP, or a custom registry, you need the following information:
SecurityWizard.extentPage3.description=Configuration information to connect to the existing registry
SecurityWizard.extentPage4.description=An existing user name in the registry to act as the primary administrative user
SecurityWizard.extentPage5.description=At a minimum, this task provides for secure administration. However, administrative security alone does not provide full security. In most environments, it is recommended that you also enable application and resource security.
SecurityWizard.keystorePage.description=Capabilities such as single sign-on require the transmission of authentication data between servers. Encryption keys are secured with a password in a key store.
SecurityWizard.ldapPage.description=The repository stores users and group names that are used for authentication and authorization. The application server infrastructure can register users and groups. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the repository.
SecurityWizard.localOSPage.description=You can specify the local operating system user and group definitions as the repository. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the repository.
SecurityWizard.password.description=Specifies the password of the administrative user who manages the application server resources and user accounts. 
SecurityWizard.password.displayName=Password
SecurityWizard.propertiesPage.description=Custom repositories often require that you specify one or more properties that are specific to the repository implementation.
SecurityWizard.registryPage.description=The user account repository stores users and group names that are used for authentication and authorization. The default repository is built into the application serving system and can be federated with one or more external Lightweight Directory Access Protocol (LDAP) repositories. You can also select a standalone external repository.
SecurityWizard.summaryPage.description=
SecurityWizard.summaryPage.displayName=Displays the list of values that are selected during the wizard and are used to enable security.
SecurityWizard.summaryPageTitle.displayName=Summary
SecurityWizard.userRegistry.displayName=User repository
SecurityWizard.wimPage.description=A secure, file-based user repository is built into the system for storing administrative users or environments with a small number of users. The file-based user repository can be federated with one or more external LDAP repositories. If this is the first time security has been enabled using this repository, provide a new user name and password to act as an administrator. If security was previously enabled using this repository, provide the name of a user with administrator privileges that is in the built-in repository.
SecurityWizard.wimPage2.description=Note: Use this panel to configure a federated repository with a built-in, file-based repository in the realm. To configure a federated repository with a non file-based repository in the realm, you must use the User accounts repository section on the Global security panel.
SelectRegistry.description=Secure the application serving environment
SelectRegistry.displayName=Configure security
SelectRegistryTask.step1=Select user repository
SelectRegistryTask.step1.instruction=The user account repository stores users and group names that are used for authentication and authorization. The default repository is built into the application serving system and can be federated with one or more external Lightweight Directory Access Protocol (LDAP) repositories. You can also select a standalone external repository.
SelectRegistryTask.step2=Summary
SelectRegistryTask.step2.instruction=Displays the list of values that are selected during the wizard and are used to enable security. 
ServerSSLConfig.description=Defines a list of Secure Sockets Layer (SSL) configurations at the cell level.
ServerSSLConfig.displayName=SSL configuration - cell level
ServerSecurity.description=Security settings can be defined for specific servers and for the entire cell. Server-specific settings take precedence over cell settings.
ServerSecurity.displayName=Server security
ServerSecurity.enable.description=Security settings for this server override the cell settings
ServerSecurity.enable.displayName=Security settings for this server override the cell settings
ServerSecurity.enableAuth.description=RMI/IIOP security for this server overrides the cell settings
ServerSecurity.enableAuth.displayName=RMI/IIOP security for this server overrides the cell settings
ServerSecurity.enableSAS.description=SAS security for this server overrides the cell settings.
ServerSecurity.enableSAS.displayName=SAS security for this server overrides the cell settings
ServerSecurity.short.description=Defines the security settings for specific servers and for the entire cell. Server-specific settings take precedence over cell settings.
ServerZosSecurityOptions.description=Configure additional server-level security options for the z/OS(R) platform
ServerZosSecurityOptions.displayName=z/OS security options
SignerCerts.add.description=Adds a signer certificate to a key store.
SignerCerts.add.displayName=Add signer certificate
SignerCerts.addButton.displayName=Add
SignerCerts.addFile.description=Specifies the fully qualified file name where the encoded signer certificate is located.
SignerCerts.addFile.displayName=File name
SignerCerts.addPath.description=Specifies the fully qualified path where the signer certificate file name is located, not including the file name.
SignerCerts.addPath.displayName=Path
SignerCerts.addType.description=Specifies the format of the file that is either Base64 encoded ASCII data or Binary DER data.
SignerCerts.addType.displayName=Data type
SignerCerts.alias.changed=The signer certificate alias has been changed. The signer certificate already exists in the database and has been connected to the keyring using the existing alias.
SignerCerts.alias.description=Specifies the alias that this signer certificate is referenced by in the key store.
SignerCerts.alias.displayName=Alias
SignerCerts.description=Manages signer certificates in key stores.
SignerCerts.displayName=Signer certificates
SignerCerts.extract.description=Extracts a signer certificate from a personal certificate to a file.
SignerCerts.extract.displayName=Extract signer certificate
SignerCerts.extractButton.displayName=Extract
SignerCerts.extractFile.description=Specifies the fully qualified file name where the extracted signer certificate is placed.
SignerCerts.extractFile.displayName=File name
SignerCerts.extractPath.description=Specifies the location of the signer certificate file.
SignerCerts.extractPath.displayName=Path
SignerCerts.extractType.description=Specifies the format of the file that is either Base64 encoded ASCII data or Binary DER data.
SignerCerts.extractType.displayName=Data type
SignerCerts.fingerprint.description=Specifies the SHA hash of the certificate. This hash can be used to verify the certificate hash at another location such as the client side of a connection.
SignerCerts.fingerprint.displayName=Fingerprint (SHA digest)
SignerCerts.fingerprint.displayNameHL=Fingerprint (SHA Digest)
SignerCerts.issuedBy.description=Specifies the distinguished name of the entity that issued the certificate. This name is the same as the issued to distinguished name when the signer certificate is self-signed.
SignerCerts.issuedBy.displayName=Issued by
SignerCerts.issuedTo.description=Specifies the distinguished name of the entity that requested the certificate.
SignerCerts.issuedTo.displayName=Issued to
SignerCerts.issuedTo.displayNameHL=Issued To
SignerCerts.keySize.description=Specifies the key size of the public key that is used by the signer certificate.
SignerCerts.keySize.displayName=Key size
SignerCerts.managedButton.displayName=Add from managed port
SignerCerts.retrieve.button=Retrieve signer information
SignerCerts.retrieved.description=Specifies the signer certificate information if the information is retrieved from the remote host and port.
SignerCerts.retrieved.displayName=Retrieved signer information
SignerCerts.serial.description=Specifies the certificate serial number that is generated by the issuer of the certificate.
SignerCerts.serial.displayName=Serial number
SignerCerts.short.description=Manages signer certificates in key stores.
SignerCerts.signatureAlg.description=Specifies the algorithm that is used to sign the certificate.
SignerCerts.signatureAlg.displayName=Signature algorithm
SignerCerts.unmanaged.description=Makes a test connection to a Secure Sockets Layer (SSL) port and retrieves the signer from the server during the handshake.
SignerCerts.unmanaged.displayName=Retrieve from port
SignerCerts.unmanagedAlias.description=Specifies the certificate alias name that you want to reference the signer in the key store, which is specified in the SSL configuration.
SignerCerts.unmanagedAlias.displayName=Alias
SignerCerts.unmanagedButton.displayName=Retrieve from port
SignerCerts.unmanagedHost.description=Specifies the host name to which you connect when attempting to retrieve the signer certificate from the Secure Sockets Layer (SSL) port.
SignerCerts.unmanagedHost.displayName=Host
SignerCerts.unmanagedPort.description=Specifies the Secure Sockets Layer (SSL) port to which you connect when attempting to retrieve the signer certificate.
SignerCerts.unmanagedPort.displayName=Port
SignerCerts.unmanagedSSLConfig.description=Specifies the Secure Sockets Layer (SSL) configuration that is used to connect to the previously specified SSL port. This configuration is also the SSL configuration that contains the signer after retrieval. This SSL configuration does not need to have the trusted certificate for the SSL port as it is retrieved during validation and presented here.
SignerCerts.unmanagedSSLConfig.displayName=SSL configuration for outbound connection
SignerCerts.validity.description=Specifies the begin and end dates of the certificate.
SignerCerts.validity.displayName=Validity period
SignerCerts.version.description=Specifies the version of the personal certificate. Valid versions include X509 V3, X509 V2, or X509 V1.
SignerCerts.version.displayName=Version
SingleSignon.description=Specifies the configuration values for single sign-on.
SingleSignon.displayName=Single sign-on (SSO)
SingleSignon.domainName.description=Specifies the domain name (ibm.com, for example) that contains a set of hosts to which the single sign-on applies.
SingleSignon.domainName.displayName=Domain name
SingleSignon.enabled.description=Specifies that single sign-on is enabled. Web applications that use Java(TM) 2 Platform, Enterprise Edition (J2EE) FormLogin-style login pages require single sign-on enablement.
SingleSignon.enabled.displayName=Enabled
SingleSignon.error.cookiesMatch=The LTPA V2 cookie name and LTPA V1 cookie name must be different.
SingleSignon.httpOnlyCookie.description=Specifies that LTPA and WASReqURL cookies include the HTTPOnly field.  When checked, browsers that support the HTTPOnly attribute do not allow cookies to be accessed by client-side scripts. For session cookies, see the session settings for servers, applications, and web modules.
SingleSignon.httpOnlyCookie.displayName=Set security cookies to HTTPOnly to help prevent cross-site scripting attacks
SingleSignon.interopMode.description=Specifies that an interoperable cookie is sent to the browser to support back-level servers.
SingleSignon.interopMode.displayName=Interoperability mode
SingleSignon.ltpaCookie.description=Specifies the single sign-on (SSO) cookie name when using the LTPA token version 1. The default name is LtpaToken.
SingleSignon.ltpaCookie.displayName=LTPA V1 cookie name
SingleSignon.propagation.description=When web inbound security attribution propagation is enabled, security attributes are propagated to front-end application servers. When this option is disabled, the single sign-on (SSO) token is used to login and recreate the Subject from the user registry. 
SingleSignon.propagation.displayName=Web inbound security attribute propagation
SingleSignon.requiresSSL.description=Specifies that single sign-on (SSO) is enabled only when requests are made over HTTPS Secure Sockets Layer (SSL) connections.
SingleSignon.requiresSSL.displayName=Requires SSL
SingleSignon.ssoCookie.description=Specifies the single sign-on (SSO) cookie name when using the LTPA token version 2. The default name is LtpaToken2.
SingleSignon.ssoCookie.displayName=LTPA V2 cookie name
StatefulSession.description=Specifies a comma-separated list of server user identities that are trusted to perform identity assertion to this server.
StatefulSession.displayName=Stateful sessions
SubjectPropagation_i.description=Accepts a Common Secure Interoperability Version 2 (CSIv2) authorization token that contains the subject objects, security context tokens, or both.
SubjectPropagation_i.displayName=Propagate security attributes
SubjectPropagation_i.error=WebSphere Application Server receives propagated security attributes within the Common Secure Interoperability Version 2 (CSIv2) authorization token only if the active authentication mechanism is Lightweight Third Party Authentication (LTPA).
SubjectPropagation_o.description=Accepts a Common Secure Interoperability Version 2 (CSIv2) authorization token that contains the subject objects, security context tokens, or both.
SubjectPropagation_o.displayName=Propagate security attributes
SubjectPropagation_o.error=WebSphere Application Server propagates security attributes within the Common Secure Interoperability Version 2 (CSIv2) authorization token only if the active authentication mechanism is Lightweight Third Party Authentication (LTPA).
SubjectPropagation_o.warning=When you select Security attribute propagation, also select Enable global security.
SystemSSLConfig.keyFileName.description=The name of the System Authorization Facility (SAF) keyring that contains public keys and perhaps private keys.
SystemSSLConfig.keyFileName.displayName=Key ring name
SystemSecureSocketLayer.keyFileName.description=Specifies the name of the System Authorization Facility (SAF) keyring that contains public keys and perhaps private keys.
SystemSecureSocketLayer.keyFileName.displayName=Key ring name
SystemSecureSocketLayer.v3Timeout.description=Specifies the SSL v3 timeout value. The valid range is 1-86400.
SystemSecureSocketLayer.v3Timeout.displayName=V3 timeout value
TAInterceptor.description=Specifies the trust information for reverse proxy servers.
TAInterceptor.displayName=Interceptors
TAInterceptor.domain.description=Specifies the trust information for reverse proxy servers. The global interceptors are copied into this domain for convenience. However any additions, deletions, or modifications to the interceptors below are local to this domain.
TAInterceptor.interceptorClassName.description=Selects the trust association interceptor class name.
TAInterceptor.interceptorClassName.displayName=Interceptor class name
TAInterceptor.interceptorClassName.displayNameHL=Interceptor Class Name
TAInterceptor.trustProperties.description=Specifies arbitrary name and value pairs of data. The name is a property key and the value is a string value that is used to set internal system configuration properties.
TAInterceptor.trustProperties.displayName=Custom properties
TargetRealms.description=Specifies a list of trusted target realms that are separated by the pipe (|) symbol.
TargetRealms.displayName=Trusted target realms
Transport.SSL-Required=SSL-required
Transport.SSL-Supported=SSL-supported
Transport.TCPIP=TCP/IP
Transport_i.description=Specifies which type of listener port is opened for inbound requests. For more information, see the extended helps by clicking the question mark (?) in the upper-right corner of the panel.
Transport_o.description=Specifies which type of listener port is opened for connections with downstream servers. For more information, see the extended helps by clicking the question mark (?) in the upper-right corner of the panel.
TrustAssociation.description=Enables trust association. Trust association is used to connect reversed proxy servers to the application server. Use of TAIs for SPNEGO authentication is deprecated.  The SPNEGO web authentication panels provide a much easier and less error-prone way to configure SPNEGO.
TrustAssociation.displayName=Trust association
TrustAssociation.enabled.description=Enables trust association.
TrustAssociation.enabled.displayName=Enable trust association 
TrustAssociation.interceptors.description=Specifies a list of trust association interceptor implementations.
TrustAssociation.interceptors.displayName=Interceptors
TrustKeyManagers.addlTrust.description=Specifies additional trust managers that are used in the order shown for this Secure Sockets Layer (SSL) configuration.
TrustKeyManagers.addlTrust.displayName=Additional ordered trust managers
TrustKeyManagers.defaultKey.description=Specifies the key manager that is used for this Secure Sockets Layer (SSL) configuration.
TrustKeyManagers.defaultKey.displayName=Key manager
TrustKeyManagers.defaultTrust.description=Specifies the default trust manager, which is typically the IbmX509 trust manager by the IBMJSSE2 provider. The other default trust manager is IbmPKIX, which can be selected when certificate revocation checks should be made using the X509Certificate CRL distribution list. The IbmPKIX trust manager does not perform as well as the IbmX509 trust manager.
TrustKeyManagers.defaultTrust.displayName=Default trust manager
TrustKeyManagers.description=Defines trust and key managers for the selected SSL configuration.
TrustKeyManagers.displayName=Trust and key managers
TrustKeyManagers.short.description=Defines trust and key managers for the selected SSL configuration.
TrustManager.algorithm.description=Specifies the algorithm name of the trust manager that is implemented by the selected provider.
TrustManager.algorithm.displayName=Algorithm
TrustManager.className.description=Specifies the name of the key manager implementation class. This class implements javax.net.ssl.X509TrustManager interface and, optionally, the com.ibm.wsspi.ssl.TrustManagerExtendedInfo interface.
TrustManager.className.displayName=Class name
TrustManager.className.displayNameHL=Class Name
TrustManager.description=Defines the implementation settings for the trust manager. A trust manager is a class that is invoked during an Secure Sockets Layer (SSL) handshake to make trust decisions about the remote end point. A default trust manager is used to validate the signature and expiration of the certificate. Custom trust managers can be plugged in to perform an extended certificate and host name check.
TrustManager.displayName=Trust managers
TrustManager.implCustom.description=Specifies that the trust manager selection is based upon a custom implementation class that implements the javax.net.ssl.X509TrustManager interface and, optionally, the com.ibm.wsspi.ssl.TrustManagerExtendedInfo interface to obtain additional connection information that is not otherwise available.
TrustManager.implCustom.displayname=Custom
TrustManager.implSettings.description=Specifies the implementation settings for this trust manager.
TrustManager.implSettings.displayName=Implementation settings
TrustManager.implStandard.description=Specifies that the trust manager selection is available from a Java(TM) provider that is installed in the java.security file. This provider might be shipped by the Java(TM) Secure Sockets Extension (JSSE) or might be a custom provider that implements the javax.net.ssl.X509TrustManager interface.
TrustManager.implStandard.displayName=Standard
TrustManager.name.description=Specifies the name of the trust manager. This name is used as a selection in the SSL configuration panel.
TrustManager.name.displayName=Name
TrustManager.provider.description=Specifies the provider name that has an implementation of the javax.net.ssl.X509TrustManager interface. This provider is typically set to IBMJSSE2.
TrustManager.provider.displayName=Provider
TrustManager.short.description=Defines the implementation settings for the trust manager.
UserRegistry.SAFProperties.description=Configures System Authorization Facility (SAF) authorization properties.
UserRegistry.SAFProperties.displayName=SAF authorization options
UserRegistry.Serveruserid.description=Version 7.0 distinguishes between the user identities for administrators who manage the environment and server identities for authenticating server to server communications. In most cases, server identities are automatically generated and are not stored in a repository. However, if you are adding a Version 5.0.x or 6.0.x node to a Version 7.0 cell, you must ensure that the Version 5.x or Version 6.0.x server identity and password are defined in the repository for this cell.
UserRegistry.Serveruserid.displayName=Server user identity
UserRegistry.description=Specifies a registry that maintains subjects, or users and groups, for the system.
UserRegistry.displayName=User registry
UserRegistry.generateId.description=Enables the application server to generate the server identity that is used for internal process communication. When Kerberos authentication mechanism is enabled, the server identity subject will not have Kerberos credential, the  server-to-server communication will use LTPA instead
UserRegistry.generateId.displayName=Automatically generated server identity
UserRegistry.generateRealm.description=Specifies the system will generate a unique realm name.
UserRegistry.generateRealm.displayName=Allow the system to create a realm name
UserRegistry.generatedRealm.description=Specifies the name of the user realm that is generated by the system.
UserRegistry.generatedRealm.displayName=System-generated realm
UserRegistry.ignoreCase.description=Specifies that a case-insensitive authorization check is performed.
UserRegistry.ignoreCase.displayName=Ignore case for authorization
UserRegistry.limit.description=Specifies the maximum number of entries that are expected when the Application Server retrieves user and group information from the user registry. Refine the search criterion when too many entries result from the search.
UserRegistry.limit.displayName=Limit
UserRegistry.localOSType.description=Click the SAF properties link under Additional Properties to configure the System Authorization Facility (SAF).
UserRegistry.properties.description=Specifies a set of arbitrary configuration properties for the user registry whose names are specific to a given type of pluggable user registry.
UserRegistry.properties.displayName=Custom properties
UserRegistry.realm.description=Specifies the name of the user realm.
UserRegistry.realm.displayName=Realm
UserRegistry.safAuthorization.description=Use SAF EJBROLE profiles for user to role authorization for both J2EE applications and the Role-based authorization requests (naming and administration) that are associated with the application server run time.
UserRegistry.safAuthorization.displayName=Enable SAF authorization
UserRegistry.safDelegation.description=Specifies that the SAF EJBROLE profiles determine the user ID used for the security role 'run as'. The information in the application deployment descriptors is ignored.
UserRegistry.safDelegation.displayName=Enable SAF delegation
UserRegistry.safMapDelRACMAP.description=Choose this option to map the delegated user specified in the APPLDATA field of the EJBROLE profile to an SAF user using the filters defined in the SAF RACMAP profiles. To select this option, the SAF product must support distributed identity mapping.
UserRegistry.safMapDelRACMAP.displayName=Map the delegated user to an SAF user using the SAF RACMAP filters
UserRegistry.safProfilePrefix.description=Specifies a prefix which will be prepended to all the SAF EJBROLE profiles used for the J2EE roles. In addition, this prefix is used as the APPL profile name and is inserted into the profile name used for CBIND checks.
UserRegistry.safProfilePrefix.displayName=SAF profile prefix
UserRegistry.safProfmapper.description=Specifies the name of SAF EJBRole profile to which a Java(TM) 2 Platform, Enterprise Edition role name is mapped. The name that you specify implements the com.ibm.websphere.security.SAFRoleMapper interface.
UserRegistry.safProfmapper.displayName=SAF profile mapper
UserRegistry.safSMFAudit.description=Determines when an audit record is written to the System Management Facility (SMF). On each authorization call, RACF(R) or an equivalent SAF-based product, can write an audit record to SMF with the result of the authorization check.
UserRegistry.safSMFAudit.displayName=SMF audit record strategy
UserRegistry.safSuppressMsgs.description=Suppresses the ICH4081 authorization failed messages issued by the z/OS security product when performing security role authorization.
UserRegistry.safSuppressMsgs.displayName=Suppress authorization failed messages from the z/OS security product
UserRegistry.safUnauthenticatedId.description=Specifies the MVS(TM) user identity that is used to represent unauthenticated callers when SAF authorization is enabled.
UserRegistry.safUnauthenticatedId.displayName=Unauthenticated user ID
UserRegistry.serverId.description=Specifies the user ID that is used to run the application server for security purposes.
UserRegistry.serverId.displayName=Server user ID or administrative user on a Version 6.0.x node
UserRegistry.serverPassword.description=Specifies the password that corresponds to the server identity.
UserRegistry.serverPassword.displayName=Password
UserRegistry.specifyId.description=Specifies a user ID in the repository that is used for internal process communication.
UserRegistry.specifyId.displayName=Server identity that is stored in the repository
UserRegistry.specifyIdzos.description=Specifies the user identity that is associated with the z/OS(R) started task. Each controller and server can have its own identity.
UserRegistry.specifyIdzos.displayName=User identity for the z/OS started task
UserRegistry.specifyRealm.description=Specifies a user-specified realm name will be used.
UserRegistry.specifyRealm.displayName=Provide a realm name
UserRegistry.zos.ignoreCase.description=Specifies that a case-insensitive authorization check is performed. This option applies to the Lightweight Directory Access Protocol (LDAP) and System Authorization Facility (SAF)-managed user registries.
UserRegistry.zos.ignoreCase.displayName=Ignore case for authorization
UserRegistry.zos.useAPPL.description=Specifies that the profile name for the APPL class in RACF (Resource Access Control Facility) will be used for restricting access. If the APPL class is not presently active, this setting will have no effect on the security configuration.
UserRegistry.zos.useAPPL.displayName=Use the APPL profile to restrict access to the application server
UserRegistryServerId.description=Version 7.0 distinguishes between the user identities for administrators who manage the environment and server identities for authenticating server to server communications. In most cases, server identities are automatically generated and are not stored in a repository. However, if you are adding a Version 5.0.x or 6.0.x node to a Version 7.0 cell, you must ensure that the Version 5.x or Version 6.0.x server identity and password are defined in the repository for this cell. For the z/OS(R) and i5/OS(TM) platforms, you do not need to enter a server identity and password.
WSKeySet.activeKeyHistory.addRef.description=Adds a reference to a key that already exists in a key store. If a key generation class is configured, the references are added automatically during generation and they do not need to be added manually.
WSKeySet.activeKeyHistory.addRef.displayName=Add key alias reference
WSKeySet.activeKeyHistory.addRefButton.displayName=Add key alias reference
WSKeySet.activeKeyHistory.addRefName.description=Specifies the name of the alias as it appears in the key store.
WSKeySet.activeKeyHistory.addRefName.displayName=Alias reference
WSKeySet.activeKeyHistory.addRefName.displayNameHL=Alias Reference
WSKeySet.activeKeyHistory.description=Manages key alias references in key stores.
WSKeySet.activeKeyHistory.displayName=Active key history
WSKeySet.activeKeyHistory.genKeyButton.displayName=Generate key
WSKeySet.activeKeyHistory.password.description=Specifies the key password to get access to the key. This password is enforced by the key store for that specific key. If the key does not have a password, this field can be left blank.
WSKeySet.activeKeyHistory.password.displayName=Password
WSKeySet.activeKeyHistory.short.description=Manages key alias references in key stores.
WSKeySet.aliasPrefix.description=Specifies the prefix for the key alias when a new key is generated and stored in a key store. The rest of the key alias comes from the key reference version number. For example, if the alias prefix is mykey and the key reference version is 2, then the key store references the key using alias mykey_2. If the key reference already has a specified alias for a key that exists in the key store, then this field is ignored.
WSKeySet.aliasPrefix.displayName=Key alias prefix name
WSKeySet.aliasPrefix.displayNameHL=Key Alias Prefix Name
WSKeySet.autoGenerationClass.description=Specifies the class name that generates keys. If the class implements com.ibm.websphere.crypto.KeyGenerator, then a getKey() method should return a java.security.Key object that is set in the key store using the setKey method without a certificate chain. If the class implements com.ibm.websphere.crypto.KeyPairGenerator, then a getKeyPair() method should return a com.ibm.websphere.crypto.KeyPair object containing either a java.security.PublicKey and java.security.PrivateKey or a java.security.cert.Certificate[] and a java.security.PrivateKey. The key generator class and the KeySetHelper API should know the details of the keys that are generated.
WSKeySet.autoGenerationClass.displayName=Key generator class name
WSKeySet.deleteOldKeys.description=Specifies that the keys are deleted from the keystore at the same time that the key reference is deleted. The server deletes the older key references as the Maximum number of keys referenced value is exceeded.
WSKeySet.deleteOldKeys.displayName=Delete key references that are beyond the maximum number of keys
WSKeySet.description=Manages key sets that control key instances of the same type for use in cryptographic operations.
WSKeySet.displayName=Key sets
WSKeySet.isKeyPair.description=Specifies that a key references a key pair instead of a key. The key pair contains both a public key and a private key.
WSKeySet.isKeyPair.displayName=Generates key pair
WSKeySet.keyPassword.description=Specifies the password that is used to protect the key in the key store. If a password is specified in the key reference as well, this password is ignored. This password is used for keys that are generated by a key generator class.
WSKeySet.keyPassword.displayName=Key password
WSKeySet.keyStoreAlias.description=Specifies the key store that contains the keys for storage, retrieval, or both.
WSKeySet.keyStoreAlias.displayName=Key store
WSKeySet.keyStoreAlias.displayNameHL=Key Store
WSKeySet.name.description=Specifies the key set name that is used to select the key set from a key set group and from run-time application programming interfaces (API).
WSKeySet.name.displayName=Key set name
WSKeySet.name.displayNameHL=Key Set Name
WSKeySet.short.description=Manages key sets that control key instances of the same type for use in cryptographic operations. 
WSKeySet.versionCount.description=Specifies the maximum number of key instances that are returned when keys from this key set are requested. The oldest key reference gets removed whenever a new key reference gets generated once the maximum has been reached.
WSKeySet.versionCount.displayName=Maximum number of keys referenced
WSKeySetGenerator.autoGenerate.description=Specifies that the keys are generated automatically on a schedule. When a new key is generated, the security.xml file is updated and saved by the runtime to track the key reference version. This can cause save conflicts when updating the same file from admin applications.
WSKeySetGenerator.autoGenerate.displayName=Automatically generate keys
WSKeySetGenerator.autoGenerate.displayNameHL=Automatically Generate Keys
WSKeySetGenerator.autoGenerationDay.description=Specifies whether to have the generation occur on a specific day of the week. It is best to auto-generate keys during a low peak day.
WSKeySetGenerator.autoGenerationDay.displayName=Generate on a specific day
WSKeySetGenerator.autoGenerationInterval.description=Generates keys at the specified frequency regardless of the day of the week on which generation occurs.
WSKeySetGenerator.autoGenerationInterval.displayName=Generate at an interval
WSKeySetGenerator.autoGenerationTime.description=Specifies the scheduled time when the system generates selected key set group or groups. You can specify the scheduled time in hours and minutes; specify either A.M. or P.M., or specify 24-hour. 
WSKeySetGenerator.autoGenerationTime.displayName=Scheduled time for generation
WSKeySetGenerator.description=Manages groups of public, private, and shared keys that enable the application server to control multiple sets of Lightweight Third Party Authentication (LTPA) keys.
WSKeySetGenerator.displayName=Key set groups
WSKeySetGenerator.genKeyButton.displayName=Generate keys
WSKeySetGenerator.keyGenSettings.displayName=Key generation
WSKeySetGenerator.keySets.description=Specifies a set of key instances of the same type for use in cryptographic operations. 
WSKeySetGenerator.keySets.displayname=Key sets
WSKeySetGenerator.name.description=Specifies the name of key set group used. This name can be referenced using the com.ibm.websphere.crypto.KeySetHelper API to retrieve the managed keys from an application. 
WSKeySetGenerator.name.displayName=Key set group name
WSKeySetGenerator.name.displayNameHL=Key Set Group Name
WSKeySetGenerator.short.description=Manages groups of public, private, and shared keys that enable the application server to control multiple sets of Lightweight Third Party Authentication (LTPA) keys.
WSNotification.description=Specifies the generic notification definitions that are used in certificate expiration monitors.
WSNotification.displayName=Notifications
WSNotification.email.description=Specifies the email address to receive the notification. You must specify the SMTP server for each email address. If an email address is not specified, by default the application server assumes that the SMTP server is called smtp-server.
WSNotification.email.displayName=Email address to add
WSNotification.emailList.description=Defines a list of email addresses that will receive notification.
WSNotification.emailList.displayName=List of email addresses
WSNotification.emailList.displayNameHL=List of Email Addresses
WSNotification.emailSent.description=Specifies that this configuration intends to send certificate expiration information in an email to the email list.
WSNotification.emailSent.displayName=Email sent to notification list
WSNotification.emailSent.displayNameHL=Send Email
WSNotification.emailSettings.description=Specifies that this configuration intends to send the certificate expiration information in an email to the email list.
WSNotification.emailSettings.displayName=Email notification
WSNotification.name.description=Specifies the name of the notification configuration.
WSNotification.name.displayName=Notification name
WSNotification.name.displayNameHL=Notification Name
WSNotification.sendSecure.description=Specifies that this configuration intends to send secure emails.
WSNotification.sendSecure.displayName=Send secure emails
WSNotification.short.description=Specifies the generic notification definitions that are used in certificate expiration monitors.
WSNotification.smtpServer.description=Specifies the SMTP server to be used with the email address. If none is specified, the email realm will be used.
WSNotification.smtpServer.displayName=Outgoing mail (SMTP) server
WSNotification.systemOut.description=Specifies that this configuration intends to log certificate expiration information to the message log file.
WSNotification.systemOut.displayName=Message log
WSNotification.systemOut.displayNameHL=Message Log
WSSchedule.24hour=24-hour
WSSchedule.am=A.M.
WSSchedule.day.description=Specifies the day of the week on which the expiration monitor will run if the Check on a specific day option is selected.
WSSchedule.day.displayName=Weekday
WSSchedule.description=Specifies the generic schedule definitions that are used in certificate expiration monitors and key set groups.
WSSchedule.displayName=Schedules
WSSchedule.frequency.description=Specifies the period of time between each schedule time to check for expired certificates or the interval between schedule checks.
WSSchedule.frequency.displayName=Repeat interval
WSSchedule.friday=Friday
WSSchedule.monday=Monday
WSSchedule.name.description=Specifies the name of the schedule.
WSSchedule.name.displayName=Schedule name
WSSchedule.pm=P.M.
WSSchedule.saturday=Saturday
WSSchedule.short.description=Specifies the generic schedule definitions that are used in certificate expiration monitors and key set groups.
WSSchedule.sunday=Sunday
WSSchedule.thursday=Thursday
WSSchedule.tuesday=Tuesday
WSSchedule.wednesday=Wednesday
WebAuthBehavior.Always.description=The web client must provide authentication data regardless of whether the URI is protected.
WebAuthBehavior.Always.displayName=Authenticate when any URI is accessed
WebAuthBehavior.Lazy.description=The application server challenges the web client to provide authentication data when the web client accesses a Uniform Resource Identifier (URI) that is protected by a Java(TM) 2 Platform, Enterprise Edition (J2EE) role. The authenticated identity is only available when the web client accesses a protected URI.
WebAuthBehavior.Lazy.displayName=Authenticate only when the URI is protected
WebAuthBehavior.Persist.description=The web client can access validated authenticated data that it previously could not access. This option enables the web client to call the getRemoteUser, isUserInRole, and getUserPrincipal methods to retrieve an authenticated identity from an unprotected Uniform Resource Identifier (URI). However, this option does not challenge the web client to provide authenticated data if the web client accesses an unprotected URI without authenticated data.
WebAuthBehavior.Persist.displayName=Use available authentication data when an unprotected URI is accessed
WebAuthBehavior.behavior.description=Web authentication behavior
WebAuthBehavior.behavior.displayName=Web authentication behavior
WebAuthBehavior.useBasicAuth.description=When the required HTTPS client certificate authentication fails, the application server uses the basic authentication method to challenge the web client to provide a user ID and password.
WebAuthBehavior.useBasicAuth.displayName=Default to basic authentication when certificate authentication for the HTTPS client fails
ZSAS.allowUnauthenticatedClients.description=Specifies that the server accepts IIOP requests without any authentication information. If enabled, the security.remote.identity property must be specified to indicate which user identity to associate with requests from a remote server. This property must be specified if another mechanism is not chosen.
ZSAS.allowUnauthenticatedClients.displayName=Support unauthenticated clients
ZSAS.basicAuthentication.description=Specifies that clients to this server can provide a System Authorization Facility (SAF)-managed user ID and password over a Secure Sockets Layer (SSL) connection. This option requires an Secure Sockets Layer (SSL) settings selection.
ZSAS.basicAuthentication.displayName=Basic authentication
ZSAS.clientCertificate.description=Specifies that clients to this server can authenticate using Secure Sockets Layer (SSL) client certificates. The digital certificate that is provided by the client must convert to a System Authorization Facility (SAF)-managed user identity. This option requires a Secure Sockets Layer (SSL) settings selection.
ZSAS.clientCertificate.displayName=Client certificate
ZSAS.identityAssertionInbound.description=Specifies that inbound requests can be accepted using System Authorization Facility (SAF)-managed user identities that are forwarded by a trusted z/OS(R) application server. Trust is established by receiving the server digital certificate from the sending server. This option is available only if the client certificates option is supported. This option requires an Secure Sockets Layer (SSL) settings selection.
ZSAS.identityAssertionInbound.displayName=Identity assertion inbound
ZSAS.identityAssertionOutbound.description=Specifies the outbound requests that can be accepted using System Authorization Facility (SAF)-managed user identities that are forwarded by a trusted z/OS(R) application server. Trust is established by sending the server digital certificate to the receiving server. This option is available only if client certificates option is supported. This option requires an Secure Sockets Layer (SSL) settings selection.
ZSAS.identityAssertionOutbound.displayName=Identity assertion outbound
ZSAS.kerberos.description=Specifies that this security mechanism uses Secure Sockets Layer (SSL) to establish the client trust in the server. The client authenticates to the server using Kerberos. The Kerberos identity must convert to a System Authorization Facility (SAF)-managed user identity. This option requires that an SSL transport for the IIOP layer be selected.
ZSAS.kerberos.displayName=Kerberos
ZSAS.sslSettings.description=Specifies a list of predefined Secure Sockets Layer (SSL) settings for connections. These settings are configured on the Secure communications panels.
ZSAS.sslSettings.displayName=SSL settings
ZSAS.useridPassticket.description=Specifies that clients or other servers on the same sysplex can connect to this server with a one-time use credential that represents the System Authorization Facility (SAF)-managed user identity.
ZSAS.useridPassticket.displayName=User ID passticket
ZSAS.useridPassword.description=Specifies that clients can connect to this server with the System Authorization Facility (SAF) user ID and password without requiring that the information is sent over an Secure Sockets Layer (SSL) session.
ZSAS.useridPassword.displayName=User ID and password
ZSASTransport.description=This panel specifies authentication settings for requests that are received and sent by this server using the z/OS(R) Secure Authentication Services (z/SAS) authentication protocol.
ZSASTransport.displayName=z/SAS authentication
ZSASTransport.shortDescription=Specifies the transports settings for connections that are accepted or initiated by this server using the z/OS(R) Secure Authentication Services (z/SAS) authentication protocol.
ZSASTransport.shortDisplayName=z/SAS authentication
ZSASTransport.title=z/SAS authentication
ZosSSLSettings.displayName=z/OS SSL settings
ZosSecurityOptions.description=Specifies the global security options for the z/OS(R) platform.
ZosSecurityOptions.displayName=z/OS security options
ZosSecurityOptions.enableRunAsIdentity.description=Sets the MVS(TM) identity associated with the Java(TM) 2 Platform, Enterprise Edition (J2EE) identity on the execution thread. Local JCA connectors may honor the MVS identity for authentication and authorization when an application requests a connection.
ZosSecurityOptions.enableRunAsIdentity.displayName=Enable the connection manager RunAs thread identity
ZosSecurityOptions.enableRunAsIdentityNot.displayName=Do not enable the connection manager RunAs thread identity
ZosSecurityOptions.enableSyncToOSThread.description=Specifies that application servers can process the syncToOSThread option for application components that specify it.
ZosSecurityOptions.enableSyncToOSThread.displayName=Enable application server and z/OS thread identity synchronization
ZosSecurityOptions.enableSyncToOSThreadNot.displayName=Do not enable application server and z/OS thread identity synchronization
ZosSecurityOptions.localIdentity.description=The System Authorization Facility (SAF) user ID that is associated with unauthenticated clients that make requests of this server from the same system.
ZosSecurityOptions.localIdentity.displayName=Local identity
ZosSecurityOptions.remoteIdentity.description=Specifies the System Authorization Facility (SAF)-managed user identity that is associated with unauthenticated clients that make requests of this server from another system.
ZosSecurityOptions.remoteIdentity.displayName=Remote identity
ZosSecurityOptions.title=z/OS global security options
adminAuth.heading.text=Primary Authentication Method for Administrative Actions
adminAuthentication.ExpSigner.button=Extract Signer...
adminAuthentication.ImpSigner.button=Add Signer...
adminAuthentication.LTPA=LTPA
adminAuthentication.LTPA.desc=This is the link to the LTPA configuration panel.
adminAuthentication.adminAuth.desc=Specifies the currently selected application authentication mechanism will be used.
adminAuthentication.adminAuth.text=Only use the active application authentication mechanism (currently {0})
adminAuthentication.kerberos=Kerberos
adminAuthentication.kerberos.desc=This is the link to the Kerberos configuration panel.
adminAuthentication.keystore=Data encryption keystore
adminAuthentication.keystore.desc=This is the keystore that contains the personal certificate used to encrypt and sign RSA tokens.
adminAuthentication.persCert=Personal certificate for encryption
adminAuthentication.persCert.desc=This is the alias found in the Data encryption keystore that is used to encrypt and sign RSA tokens.
adminAuthentication.trustedkeystore=Trusted signers keystore
adminAuthentication.trustedkeystore.desc=This is the keystore used to contain signer certificates that can validate RSA tokens sent by other servers. The RSA token contains a sending certificate that needs to be validated by this trust store using a CertPath validation.
adminKeystores.links=Manage administrative keystores
adminKeystores.links.desc=This is the link to the RSA tokens administrative keystores panel.
button.movedown=Move Down
button.moveup=Move Up
button.setOrder=Set Order...
desc.adminAuth.text=Use this page to configure the administrative authentication method used when an administrative process on this profile connects to another profile.
error.invalid.propertyValue=The value {0} has characters that are not allowed.
keystore.filter.desc=Filters the keystore collection to include only the specified keystore usage type.
keystore.filter.types=Keystore usages
nav.adminAuth.text=Administrative authentication
nav.jaas.application=Application logins
nav.jaas.j2c=J2C authentication data
nav.jaas.system=System logins
nonce.cache.timeout=Nonce cache timeout
nonce.cache.timeout.desc=Specifies the timeout value, in minutes, for the nonce cache. This is how long it will keep new nonce values before it clears them out. A nonce value ensures the same RSA token is not sent multiple times (replayed).
security.SSSL.key.field.required=The key ring name is required.
security.certAlias.required=A certificate alias is required. If none are available in the list, select a key store from the key store list and click the Get certificate aliases button.
security.certExp.interval.error=The expiration notification threshold must be at least {0} days greater than the expiration checking interval in order to allow sufficient response time to the notifications.
security.certRequest.queryComplete=The certificate request is complete. The certificate request has been removed and the certificate is now in the Personal certificates list for this key store.
security.certRequest.queryPending=The certificate request is pending.
security.certRequest.warn.1cert=You must select one and only one personal certificate request to perform this action.
security.commandValidation.failed=Validation failed: {0}
security.crypto.fields.required=All the fields are required when you enable cryptographic token support.
security.crypto.library.file.not.found=The library file, indicated in the Library File field, was not found.
security.crypto.library.file.open.failed=The library file cannot be opened. Either the password or the value of the com.ibm.ssl.tokenSlot property is not valid. Click Security > Secure communications. Under Configuration settings, click Manage endpoint security configurations and trust zones > SSL_configuration_name. Under Related items, click SSL configurations. Under Additional properties, click Custom Properties. Click com.ibm.ssl.tokenSlot and enter a valid value in the Value field.
security.duplicate.alias=A duplicate alias name exists. You must use a unique alias name.
security.duplicate.className=A duplicate class name already exists. You must use a unique class name.
security.duplicate.name=A duplicate name already exists. You must use a unique name.
security.dynamicSSLConfig.createError=An error occurred creating the dynamic SSL configuration: {0}
security.email.invalid=The e-mail address specified is not valid. All e-mail addresses must contain the @ symbol.
security.empty.message={0}
security.enable.step1=Specify extent of protection
security.enable.step2=Specify keystore password
security.enable.step3=Select user repository
security.enable.step4=Configure user repository
security.enable.step5=Summary
security.enableWizard.customPropError=A name and value are required when defining a custom property.
security.enableWizard.custopPropDup=Custom property names must be unique.
security.enableWizard.failed=Enablement of security failed: {0}
security.error.export.key=The export file name is required to export Lightweight Third Party Authentication (LTPA) keys.
security.error.mismatch.key=Lightweight Third Party Authentication (LTPA) keys cannot be exported unless the current configuration changes are saved.
security.error.no.TAM=The user registry type that you selected for Lightweight Directory Access Protocol (LDAP) does not support the Tivoli Access Manager for authentication.
security.fully.qualified.names=Access Web applications with a complete host and domain name in the Web address (for example http://myhost.austin.ibm.com:9060/ibm/console) because single signon (SSO) is enabled and a domain is specified.
security.getcipheroptions.failed=A call to the server to retrieve the cipher options failed.  Check the logs for more information.
security.invalid.file.name=The file name does not exist for importing Lightweight Third Party Authentication (LTPA) keys.
security.key.fields.required=The key and trust file names and passwords are required when you are not using a cryptographic token.
security.keySet.createError=An error occurred creating the key set: {0}
security.keySet.required=At least one key set is required to be selected. If none are available in the list, select the Key Sets link in order to create a key set.
security.keySetGroup.createError=An error occurred creating the key set group: {0}
security.keySetGroup.required=A key set group is required to be selected. If none are available in the list, select the Key set groups link in order to create a key set group.
security.keyStore.createError=An error occurred creating the key store: {0}
security.keyStore.modify.passwords.rqd=The password field is required when modifying the location of the key store.
security.keyStore.modifyError=An error occurred modifying the key store: {0}
security.keyStore.modifyPwdError=An error occurred changing the password for the key store: {0}
security.keyStore.modifyPwdSuccess=The password for the key store was successfully changed and the configuration automatically saved.
security.keyStore.required=A key store is required. If none are available in the list, select Key stores under Related Items to create a key store.
security.keyStore.warn.1keyStore=You must select one and only one key store to perform this action.
security.keyStore.warnExchangeCerts.none=No certificates were exchanged because none were added to the signer list.
security.keys.dont.match=You cannot export or distribute Lightweight Third Party Authentication (LTPA) keys until you save the current LTPA configuration changes.
security.keys.generated=The server has generated new Lightweight Third Party Authentication (LTPA) keys because of an LTPA password change.
security.ldap.testConnection.successful=The test connection operation for LDAP host {0} on port {1} was successful.
security.ldap.warn.recursive=Select the Perform a nested group search option only if the LDAP server does not support recursive server-side searches.
security.ldapsearch.input.parameters=LdapSearch Input Parameters
security.ldapsearch.results=LdapSearch Results
security.localOS.mixedcell.bad=You cannot use the local operating system as a defined realm if you have both z/OS and non-z/OS nodes.
security.ltpa.export.successful=The keys were successfully exported to the file {0}. 
security.ltpa.import.successful=The keys were successfully imported from the file {0}. 
security.ltpa.pw.null=The Lightweight Third Party Authentication (LTPA) password is required.
security.notification.required=A notification is required to be selected. If none are available in the list, select the Notifications link in order to create a notification.
security.object.deleteError=An error occurred deleting {0}: {1}
security.object.renewError=An error occurred renewing {0}: {1}
security.password.incorrect=The password does not match the value in the confirm password field.
security.personalCerts.caCert.pending=The certificate request is pending and has been added to the Personal certificate requests list for this key store.
security.personalCerts.warn.1cert=You must select one and only one personal certificate to perform this action.
security.personalCerts.warn.2certs=You must have at least two personal certificates defined in the list to perform this action.
security.schedule.pmRangeError=The valid range for hour when P.M. is selected is 0 - 12.
security.schedule.required=A schedule is required to be selected. If none are available in the list, select the Schedules link in order to create a schedule.
security.signerCerts.extractSuccess=The signer certificate, {0}, was successfully extracted to the file {1}.
security.signerCerts.retrieveInfoBlank=You must retrieve the signer information from the port by clicking on the Retrieve signer information button.
security.signerCerts.retrieveInfoMismatch=You must retrieve the signer information from the port by clicking on the Retrieve signer informtaion button before saving the signer certificate.
security.signerCerts.warn.1cert=You must select one and only one signer certificate to perform this action.
security.ssl.alias.keystore.mismatch=You must click the Get certificate aliases button to retrieve the certificate aliases for the selected key store.
security.ssl.alias.ssl.mismatch=You must click the Get certificate aliases button to retrieve the certificate aliases for the selected SSL configuration.
security.ssl.bad.client.alias=The value of the com.ibm.ssl.keyStoreClientAlias property is not valid. Click Security > SSL > SSL_Setting. Under Additional Properties, click Custom Properties. Click com.ibm.ssl.keyStoreClientAlias and enter a valid value in the Value field.
security.ssl.bad.server.alias=The value of the com.ibm.ssl.keyStoreServerAlias property is not valid. Click Security > SSL > SSL_Setting. Under Additional Properties, click Custom Properties. Click com.ibm.ssl.keyStoreServerAlias and enter a valid value in the Value field.
security.ssl.custom.rqd=A custom Secure Sockets Layer (SSL) provider is required.
security.ssl.key.file.bad.type=The key file type, indicated in the Key file format field, is not valid.
security.ssl.key.file.not.found=The server did not find the key file, which was indicated in the Key file name field.
security.ssl.key.file.open.failed=The key file cannot be opened because the key file password is not valid.
security.ssl.trust.file.bad.format=The trust file type, indicated in the Trust file format field, is not valid.
security.ssl.trust.file.open.failed=The trust file cannot be opened because the trust file password is not valid.
security.ssl.warn.2certs=You must select two key stores to perform this action.
security.ssl.warn.changes=Protocol and Cipher suites values have been changed to match the specified protocol.
security.ssl.warn.no.crypto=Values are not defined for the cryptographic token. For cryptographic hardware support to function properly, you must provide cryptographic token information.
security.sslCertAlias.required=A certificate alias is required. If none are available in the list, select a SSLConfiguration from the SSL configuration list and click the Get certificate aliases button.
security.sslConfig.required=A SSL configuration is required. If none are available in the list, select SSL Configurations under Related Items in order to create a SSL configuration.
security.state.changed=If any of the fields are changed, save the configuration and then stop and restart the server.
security.trustStore.required=A trust store is required. If none are available in the list, select Key stores under Related Items to create a key store that is used as a trust store.
security.warn.1object=You must select one and only one item in the list to perform this action.
security.warn.activeRegistryChanged=After changing the active user registry settings, click Apply on the Global security panel.
security.warn.ignoreCase=The user registry type that you selected for Lightweight Directory Access Protocol (LDAP) requires that you select the Ignore case for authorization option. This Ignore case for authorization value is set automatically in the configuration information.
security.warn.noRegistryValidation=The settings on this panel are not validated until this registry is selected as the Active user registry on the Global security panel and security is enabled.
security.warn.noServerSecurity=Server security is not in effect until global security is enabled.
security.warn.updateSSLusingFIPS=The security policy is set to use only FIPS-approved cryptographic algorithms. However, at least one Secure Sockets Layer (SSL) configuration is not in compliance with FIPS standards, and therefore has been altered.
security.wizard.localOS.SAF=Because SAF authorization is enabled on this host, no user repository configuration is required.
security.wizard.passwordsRequired=The administrative user name does not exist in the file-based repository. To create the user, the password and confirm password fields are required.
securlty.ssl.trust.file.not.found=The server did not find the trust file, which was indicated in the Trust file name field.
token.timeout=Token timeout
token.timeout.desc=Specifies the timeout value, in minutes, that an RSA token is valid. An RSA token is a one-time use token so the expiration needs to be sufficient to cover the time it takes to reach the target server and cover any clock skew there might be between the servers.
validation.SSONotEnabled=Single signon (SSO) is disabled. When Lightweight Third Party Authentication (LTPA) is the authentication mechanism, SSO is typically required to support Web applications that use FormLogin. The WebSphere Application Server administrative console uses FormLogin. If you save this configuration, you cannot use the administrative console to manage or configure WebSphere Application Server. Do not save this configuration unless you are sure that you understand the consequences.
validation.administratorRoleViewOnly=Only a user with administrator privileges can view this configuration.
validation.failed=Validation failed for user {0}. Retry the validation.
validation.failed.addToAuthz.error=An error occurred attempting to add the administrative user as a console user: {0}
validation.failed.addToAuthz.failed=The attempt to add the administrative user as a console user was not successful.
validation.failed.admin.not.found=The Primary administrative user name does not exist in the user repository.
validation.failed.ignoreCase=The Lightweight Directory Access Protocol (LDAP) directory server requires that you select the Ignore case for authorization option. Enable the Ignore case for authorization option and retry.
validation.failed.isAdminLockedOut=There is no user in the active user registry defined as an administrator in console users. There must be at least one valid administrator in order to access the console with administrative security enabled.
validation.failed.no.admin=You must supply the primary administrative user name on the active registry or realm panels to enable security.
validation.failed.nonRoot=The Standalone local operating system registry is not supported for non-root users. Validation failed.
validation.failedAuth=Authentication failed for user: {0}. Try again.
validation.idmgr.backupServer.FailedMsg=The following error occurred while updating the failover server configuration. However, the Lightweight Directory Access Protocol (LDAP) configuration is successfully created or updated: 
validation.idmgr.baseEntry.listEmpty=The realm must contain at least one repository.
validation.idmgr.builtin.deleteAdminUserWarn=When you remove the built-in repository from the administrative realm, verify that atleast one user in another member repository is a console user with administrative rights. Otherwise, you must disable security to regain access to the administrative console.
validation.idmgr.builtin.deleteWarn=The built-in repository cannot be removed.
validation.idmgr.builtin.exists=The collection already includes the built-in repository.
validation.idmgr.builtin.fixed=The built-in repository configuration cannot be modified.
validation.idmgr.configuration.notModifiable=The configuration for this repository type cannot be modified.
validation.idmgr.databasetype.empty=No supported database types are found.
validation.idmgr.directorytype.empty=No supported directory types are found.
validation.idmgr.warningToReboot=After you configure or modify the federated repositories configuration, save the configuration, restart the server, and enable administrative security with the new federated repository configuration.
validation.invalidCacheTimeout=The authentication cache timeout must be greater than or equal to 30 seconds.
validation.invalidRegistry=WebSphere Application Server does not support the Lightweight Third Party Authentication (LTPA) authentication mechanism with the Standalone local operating system.
validation.java2enableWarning=When security is enabled, Java 2 security is automatically enabled to provide additional security for Java virtual machine (JVM) system resources. Verify that your applications are Java 2 security ready. If not, the applications might fail to run.
validation.java2secwarning=If the Restrict access to local resources option is not enabled, the Java virtual machine (JVM) system resources are not protected. For example, applications can read and write to files on file systems, listen to sockets, exit the Application Server process, and so on. However, by enabling the Restrict access to local resources option, applications might fail to run if the required permissions are not granted to the applications.
validation.mixedcell.warning=The configuration contains multiple versions of WebSphere Application Server. These changes apply to the version 6.1 servers only.
validation.nullClassname=The class name for the standalone custom registry is not specified. Enter a class name for the standalone custom registry.
validation.nullHostname=The host name for the standalone Lightweight Directory Access Protocol (LDAP) registry is not specified. Enter a host name for the standalone LDAP registry.
validation.nullKey=The Lightweight Third Party Authentication (LTPA) keys generated are null. Validation failed.
validation.nullLTPApw=The Lightweight Third Party Authentication (LTPA) password is not set. Validation failed.
validation.nullPassword=The server password is not specified. Enter a server password for the active user registry.
validation.nullRegistry=The user registry is null. Check the registry properties.
validation.nullSSODomainName=The domain name for single signon is not defined. The Web browser defaults the domain name to the host name that runs the Web application. Single signon is restricted to the application server host name and does not work with other application server host names in the domain.
validation.nullServerID=The server user ID is not specified. Enter a server user ID for the active user registry.
validation.nullServerIDorPassword=The server user ID or password is not specified. Enter a server user ID and password for the active user registry or select to use the automatically generated server identity on the realm panel.
validation.reSyncWarning=The security configuration is enabled or modified in a Network Deployment environment. The following steps need to be followed so that all the processes in this environment have the same security run-time settings: 1) Verify that all nodes are synchronized with these security configuration changes before stopping these processes. 2) If any node agents are currently stopped, issue a manual syncNode command before starting that node agent. 3) Stop all of the processes in the entire cell, including the deployment manager, node agents, and Application Servers. 4) Restart all of the processes in the cell; restart the deployment manager and node agents first, then Application Servers.
validation.warn.localOS=The Standalone local operating system registry is supported only when the cell is configured on a single machine or when you use a Windows domain controller.
zSAS.transport=z/SAS authentication
