<?xml version="1.0"?>
<project name="addManagesdkUserInstallRoot" default="install" basedir=".">
                                          
    <target name="install"
            description="Add USER_INSTALL_ROOT"
            depends="detectCurrentOSFamily,
                     setOSFileSeparator,
                     setOSScriptExtension,
                     filesExists,
                     checkManagesdkScriptUpdated,
                     replaceManagesdkLine"/>
                                         
                                         
    <target name="uninstall" 
            description="Remove USER_INSTALL_ROOT"
            depends="detectCurrentOSFamily,
                     setOSFileSeparator,
                     setOSScriptExtension,
                     filesExists,
                     checkManagesdkScriptUpdated,
                     removeManagesdkLine"/>
                                         
                                         
    <!-- Detect Operating System on WAS Installation-->
    <target name="detectCurrentOSFamily"
            description="Detects the current OS family (UNIX or Windows)">
                        
        <condition property="currentOSFamily" value="windows">
            <os family="windows"/>
        </condition>                            
                
        <condition property="currentOSFamily" value="unix">
            <and>
                <os family="unix"/>
                <not>
                    <equals arg1="${os.name}" arg2="OS/400"/>
                </not>
            </and>
        </condition>          

        <condition property="isWindows" value="true">
            <os family="windows"/>
        </condition>
                
        <condition property="isUnix" value="false">
            <not>
                <os family="windows"/>
            </not>
        </condition>                

        <echo>Detected current OS family to be: ${currentOSFamily}</echo>               
    </target>
    <!-- Output detected OS Family -->

    <!-- Specify file separator, based on currently detected OS -->
    <target name="setOSFileSeparator"
            description="Sets the current file separator for this platform (file.separator is unreliable on ANT 1.5.4)">

        <condition property="separatorFile" value="/">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>

        <condition property="separatorFile" value="\">
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
    </target>

    <!-- Specify file extension for script on currently detected OS -->
    <target name="setOSScriptExtension"
            description="Sets the current file separator for this platform (file.separator is unreliable on ANT 1.5.4)">

        <condition property="OSext" value=".sh">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>
                
        <condition property="OSext" value=".bat">
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
                
    </target>
                      

    <!-- Verifies existence of files in WAS install -->
    <target name="filesExists">
        <available file="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}" property="managesdkExists"/>
    </target>      

    <target name="checkManagesdkScriptUpdated" 
            if="managesdkExists">
        
        <loadfile property="ManagesdkScriptUpdated" 
                  srcfile="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}" />
                                  
        <condition property="applyManagesdkUpdate" value="true">                     
            <and>
                <not>
                    <contains string="${managesdkScriptUpdated}" substring="&quot;-DWAS_HOME=%WAS_HOME%&quot; &quot;-Duser.install.root=%USER_INSTALL_ROOT%&quot;" />
                </not>
                <not>
                    <contains string="${managesdkScriptUpdated}" substring="-DWAS_HOME=${WAS_HOME} -Duser.install.root=${USER_INSTALL_ROOT} \" />
                </not>
            </and>
        </condition>        
    </target>
        

    <!-- managesdk.sh/.bat updates -->           
    <target name="replaceManagesdkLine" 
            depends=""
            description=""
            if="applyManagesdkUpdate">
                                                        
        <antcall target="updateManagesdkWindows" />
        <antcall target="updateManagesdkUnix"    />                      
    </target>
        
    <target name="updateManagesdkWindows" 
            depends=""
            description=""
            if="isWindows">
                                                                                
        <echo>Updating managesdk${OSext}</echo>
        <replace file="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}"
                 token="&quot;-DWAS_HOME=%WAS_HOME%&quot;"
                 value="&quot;-DWAS_HOME=%WAS_HOME%&quot; &quot;-Duser.install.root=%USER_INSTALL_ROOT%&quot;"/>
    </target>
                
    <target name="updateManagesdkUnix" 
            depends=""
            description=""
            if="isUnix">
                                                                                
        <echo>Updating managesdk${OSext}</echo>
        <replace file="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}"
                 token="-DWAS_HOME=${WAS_HOME} \"
                 value="-DWAS_HOME=${WAS_HOME} -Duser.install.root=${USER_INSTALL_ROOT} \"/>                   
        <antcall target="modifyManagesdkPermissions"/>                            
    </target>

    <target name="modifyManagesdkPermissions">
        <chmod file="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}" perm="a+x"/>                       
    </target>

    <target name="removeManagesdkLine" 
        depends=""
        description=""
        if="ManagesdkScriptUpdated">
                <antcall target="removeManagesdkWindows" />
                <antcall target="removeManagesdkUnix"    />
                
    </target>

    <target name="removeManagesdkWindows"
            depends=""
            description=""
            if="isWindows">
                                            
        <echo>Reverting managesdk${OSext}</echo>
        <replace file="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}"
                 token=" &quot;-Duser.install.root=%USER_INSTALL_ROOT%&quot;"
                 value=""/> 
    </target>
    
    <target name="removeManagesdkUnix"
            depends=""
            description=""
            if="isUnix">
                         
        <replace file="${WAS_HOME}${separatorFile}bin${separatorFile}managesdk${OSext}"
                 token=" -Duser.install.root=${USER_INSTALL_ROOT}"
                 value=""/>  
        <antcall target="modifyManagesdkPermissions"/>                            
    </target>                   
    
</project>
