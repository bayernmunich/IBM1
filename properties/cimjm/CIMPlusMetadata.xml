<?xml version="1.0" encoding="UTF-8"?>
<!--  @(#) 1.78 SERV1/ws/code/admin.cimplus/xml/properties/CIMPlusMetadata.xml, WAS.admin.cimgr, WAS855.SERV1, cf131750.07 12/14/15 11:03:07 [12/17/17 20:46:38] -->
<CIMPlusMetadata>
	<IMMetadata>
		<SupportedIMVersions>
			<InstallIM>1.4.3</InstallIM>
			<ManageOfferings>1.4.3</ManageOfferings>
			<UpdateIM>1.4.3</UpdateIM>
		</SupportedIMVersions>
		<IMGroupInstallMetaData>
			<AvailableVersion>1.4.3</AvailableVersion>
			<AvailablePlatforms>aix, hpux, solaris, linux, os390</AvailablePlatforms>
			<GroupInstallLocationSuffix>_Group</GroupInstallLocationSuffix>
		</IMGroupInstallMetaData>
		<IMInstallCommands>
			<CommandDirectory></CommandDirectory>
			<IMInstallCommand userType="group" platform="unix">
				 umask 0002;./groupinstc -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
			<IMInstallCommand userType="root" platform="unix">
				./installc -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
			<IMInstallCommand userType="root" platform="os400">
				umask 022;installc -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
			<IMInstallCommand userType="root" platform="windows">
				installc.exe -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
			<IMInstallCommand userType="nonroot" platform="unix">
				./userinstc -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
			<IMInstallCommand userType="nonroot" platform="os400">
				chmod -R 755 ./;umask 022;./userinstc -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
			<IMInstallCommand userType="nonroot" platform="windows">
				userinstc.exe -acceptLicense -dataLocation "${IMDataPath}" -installationDirectory "${IMInstallPath}"
			</IMInstallCommand>
		</IMInstallCommands>
		<!--  the timeout is in minutes -->
		<IMInstallTimeout>200</IMInstallTimeout>
		<IMKitConfigINIPath>configuration/config.ini</IMKitConfigINIPath>
		<!--  please do not change the element format below, the new line is required!!! -->
		<IMKitSkipDiskSpaceCheckValue file="configuration/config.ini">&#xA;&#xA;cic.override.disk.space=true&#xA;&#xA;</IMKitSkipDiskSpaceCheckValue>
		<IMKitDiskSpaceCheckRatioRelativeToIMKITSize>4</IMKitDiskSpaceCheckRatioRelativeToIMKITSize>
		<IMKitOSCompatibility>
			<!-- The osname in IMOSArch is the name defined in configuration/config.ini of the IM kit -->
			<!--  F015845 - 64bit IM now supported,option to use 32 bit available below -->
			<IMOSArch osname="win32" osarch="x86_64" osbit="64">
				<TargetOSArch osname="windows" osarch="EM64T"/>
				<TargetOSArch osname="windows" osarch="amd64"/>
			</IMOSArch>
			<IMOSArch osname="win32" osarch="x86">
			<!--  if osarch is empty, means it can be on both 32 and 64 -->
				<TargetOSArch osname="windows" osarch=""/>
			</IMOSArch>
			<!--  osarch of all UNIX platform is the output of uname -p command -->
			<IMOSArch osname="aix" osarch="ppc">
				<TargetOSArch osname="aix" osarch=""/>
			</IMOSArch>
			<IMOSArch osname="hpux" osarch="ia64_32">
				<TargetOSArch osname="hpux" osarch="ia64"/>
			</IMOSArch>
			<IMOSArch osname="hpux" osarch="PA_RISC">
				<TargetOSArch osname="hpux" osarch="pa_risc"/>
			</IMOSArch>
			<IMOSArch osname="linux" osarch="ppc">
				<TargetOSArch osname="linux" osarch="ppc"/>
				<TargetOSArch osname="linux" osarch="ppc64"/>
			</IMOSArch>
			<IMOSArch osname="linux" osarch="ppc64le">
				<TargetOSArch osname="linux" osarch="ppc64le"/>
			</IMOSArch>
			<IMOSArch osname="linux" osarch="s390">
				<TargetOSArch osname="linux" osarch="s390x"/>
			</IMOSArch>
			<!--  64bit IM now supported,option to use 32 bit available below-->
			<IMOSArch osname="linux" osarch="x86_64" osbit="64">
				<TargetOSArch osname="linux" osarch="x86_64"/>
			</IMOSArch>
			<IMOSArch osname="linux" osarch="x86">
				<TargetOSArch osname="linux" osarch="i686"/>
				<TargetOSArch osname="linux" osarch="x86_64"/>
			</IMOSArch>
			<IMOSArch osname="solaris" osarch="sparc">
				<TargetOSArch osname="solaris" osarch="sparc"/>
			</IMOSArch>
			<IMOSArch osname="solaris" osarch="x86">
				<TargetOSArch osname="solaris" osarch="i386"/>
			</IMOSArch>
			<IMOSArch osname="os400" osarch="ppc">
				<TargetOSArch osname="os400" osarch=""/>
			</IMOSArch>
			<!--  
			<IMOSArch osname="zos" osarch="s390">
				<TargetOSArch osname="" osarch=""/>
			</IMOSArch>
			-->
		</IMKitOSCompatibility>
		<IMKitDefaults>
			<IMKitInstallLocationDefaults>
				<InstallLocation userType="root" platform="windows">
					${env.ProgramFiles}\IBM\Installation Manager
				</InstallLocation>
				<InstallLocation userType="nonroot" platform="windows">
					${user.home}\IBM\Installation Manager
				</InstallLocation>
				<InstallLocation userType="root" platform="unix">
					/opt/IBM/InstallationManager
				</InstallLocation>
				<InstallLocation userType="nonroot" platform="unix">
					${user.home}/IBM/InstallationManager
				</InstallLocation>
				<InstallLocation userType="root" platform="os400">
					/QIBM/ProdData/InstallationManager
				</InstallLocation>
				<InstallLocation userType="nonroot" platform="os400">
					${user.home}/IBM/InstallationManager
				</InstallLocation>
				<!--  The Goup install mode install location is ${user.home}/IBM/InstallationManager_Group for ga, 
				and ${user.home}/IBM/InstallationManagerWS_Beta_Group for beta, since this value is used as is for prereq checking,
				this we leave it as ${user.home}/IBM/InstallationManager, but when we get log locations(if no install location and no
				data location specified when submit job), we will dynamically add WS_Beta and _Group if needed -->
				<InstallLocation userType="group" platform="unix">
					${user.home}/IBM/InstallationManager
				</InstallLocation>
			</IMKitInstallLocationDefaults>
			<IMKitDataLocationDefaults>
				<InstallLocation userType="root" platform="windows">
					C:\Documents and Settings\All Users\Application Data\IBM\Installation Manager
				</InstallLocation>
				<InstallLocation userType="root" platform="windows">
					C:\ProgramData\IBM\Installation Manager
				</InstallLocation>
				<InstallLocation userType="nonroot" platform="windows">
					${user.home}\Application Data\IBM\Installation Manager
				</InstallLocation>
				<InstallLocation userType="nonroot" platform="windows">
					${user.home}\AppData\Roaming\IBM\Installation Manager
				</InstallLocation>
				<InstallLocation userType="root" platform="unix">
					/var/ibm/InstallationManager
				</InstallLocation>
				<InstallLocation userType="nonroot" platform="unix">
					${user.home}/var/ibm/InstallationManager
				</InstallLocation>
				<InstallLocation userType="group" platform="unix">
					${user.home}/var/ibm/InstallationManager_Group
				</InstallLocation>
			</IMKitDataLocationDefaults>
		</IMKitDefaults>
		<IMUpdateCommands>
			<IMUpdateCommand platform="unix" userType="group">
			    umask 0002;./imcl -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "group" install com.ibm.cic.agent
			</IMUpdateCommand>
			<IMUpdateCommand platform="windows" userType="root">
				imcl.exe -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "admin" install com.ibm.cic.agent
			</IMUpdateCommand>
			<IMUpdateCommand platform="windows" userType="nonroot">
				imcl.exe -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "nonAdmin" install com.ibm.cic.agent   
			</IMUpdateCommand>
			<IMUpdateCommand platform="unix" userType="root">
				./imcl -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "admin" install com.ibm.cic.agent   
			</IMUpdateCommand>
			<IMUpdateCommand platform="unix" userType="nonroot">
				./imcl -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "nonAdmin" install com.ibm.cic.agent   
			</IMUpdateCommand>
			<IMUpdateCommand platform="os400" userType="root">
				umask 022;imcl -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "admin" install com.ibm.cic.agent   
			</IMUpdateCommand>
			<IMUpdateCommand platform="os400" userType="nonroot">
				umask 022;./imcl -repositories "${repositoryPath}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -accessRights "nonAdmin" install com.ibm.cic.agent   
			</IMUpdateCommand>
		</IMUpdateCommands>
		<IMUninstallCommands>
			<IMUninstallCommand userType="root" platform="unix">
				<PossibleCmd>uninstallc</PossibleCmd>
				<PossibleCmd>uninstall --launcher.ini silent-uninstall.ini</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="root" platform="os400">
				<PossibleCmd>uninstallc</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="root" platform="windows">
				<PossibleCmd>uninstallc.exe</PossibleCmd>
				<PossibleCmd>uninstall.exe --launcher.ini silent-uninstall.ini</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="nonroot" platform="unix">
				<PossibleCmd>uninstallc</PossibleCmd>
				<PossibleCmd>uninstall --launcher.ini silent-uninstall.ini</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="nonroot" platform="os400">
				<PossibleCmd>uninstallc</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="nonroot" platform="windows">
				<PossibleCmd>uninstallc.exe</PossibleCmd>
				<PossibleCmd>uninstall.exe --launcher.ini silent-uninstall.ini</PossibleCmd>
				<PossibleCmd>userinstc.exe</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="group" platform="unix">
				<PossibleCmd>uninstallc</PossibleCmd>
				<PossibleCmd>uninstall --launcher.ini silent-uninstall.ini</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="group" platform="os400">
				<PossibleCmd>uninstallc</PossibleCmd>
			</IMUninstallCommand>
			<IMUninstallCommand userType="group" platform="windows">
				<PossibleCmd>uninstallc.exe</PossibleCmd>
				<PossibleCmd>uninstall.exe --launcher.ini silent-uninstall.ini</PossibleCmd>
				<PossibleCmd>userinstc.exe</PossibleCmd>
			</IMUninstallCommand>
		</IMUninstallCommands>
	</IMMetadata>
	<WASMetadata>
		<ManageprofilesCommands>
			<ManageprofilesRespFile platform="windows">
				manageprofiles.bat -response ${respFilename}
			</ManageprofilesRespFile>
			<ManageprofilesRespFile platform="unix">
				manageprofiles.sh -response ${respFilename}
			</ManageprofilesRespFile>
			<ManageprofilesRespFile platform="os400">
				manageprofiles -response ${respFilename}
			</ManageprofilesRespFile>
		</ManageprofilesCommands>
	</WASMetadata>
	<RXAMetadata>
		<timeout>
			<!--  Profile api command timeout for inventory job -->
			<inventoryJobProfileAPITimeout>180</inventoryJobProfileAPITimeout>
			<!--  Connection timeout:
				The default connection timeout interval is 20seconds for all protocols, except SSHProtocol and AS400Protocol.
				For SSHProtocol objects, the default connection timeout is 30 seconds.
				For AS/400 targets, this method has no effect.  
				The connection timeout has to be increased to at least 3 minutes (180) seconds in order to have successful
				ssh connection.  The value below is in seconds
				-->
			<connectionTimeout protocol="os400">180</connectionTimeout>
			<connectionTimeout protocol="unix">180</connectionTimeout>
			<connectionTimeout protocol="windows">180</connectionTimeout>
		
			<!--  Internal run timeout:
				On UNIX-like targets, the internal run timeout default is 5 seconds (5000 ms).
				On Windows targets, the default internal timeout default is "infinite" (0), meaning that there is no internal run timeout limit.
				On AS400 targets, the default internal run timeout is 5 seconds (5000 ms). 
				On some cygwin, the default internal run timeout is too low, thus it has to be increased to 20 seconds.
				-->
			<internalRunTimeout protocol="os400">20</internalRunTimeout>
			<internalRunTimeout protocol="unix">20</internalRunTimeout>
			<internalRunTimeout protocol="windows">0</internalRunTimeout>

		</timeout>		
	</RXAMetadata>
	<ManageOfferingMetadata>
		<CommandDirectory>eclipse</CommandDirectory>
		<CommandDirectory>eclipse/tools</CommandDirectory>
		<CommandDirectory>eclipse\tools</CommandDirectory>
		<ManageOfferingCommands>
			<ManageOfferingCommand platform="unix" userType="group">
				umask 0002;./imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}" 
			</ManageOfferingCommand>
			<ManageOfferingCommand platform="os390" userType="group">
				umask 0002;./imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"
			</ManageOfferingCommand>
			<ManageOfferingCommand userType="root" platform="unix">
				./imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"
			</ManageOfferingCommand>
			<ManageOfferingCommand userType="root" platform="windows">
				imcl.exe -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"   
			</ManageOfferingCommand>
            <ManageOfferingCommand userType="root" platform="os390">
                ./imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"
            </ManageOfferingCommand>
            <ManageOfferingCommand userType="root" platform="os400">
				umask 022;imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"   
			</ManageOfferingCommand>
            <ManageOfferingCommand userType="nonroot" platform="os400">
				umask 022;imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"   
			</ManageOfferingCommand>
			<ManageOfferingCommand userType="nonroot" platform="unix">
				./imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"
			</ManageOfferingCommand>
			<ManageOfferingCommand userType="nonroot" platform="windows">
				imcl.exe -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"   
			</ManageOfferingCommand>
            <ManageOfferingCommand userType="nonroot" platform="os390">
                ./imcl -input "${respFilename}" -keyring "${keyringFilePath}" -password ${keyringPassword} -secureStorageFile ${secureStorageFilePath}  -masterPasswordFile ${masterPasswordFilePath} -acceptLicense -dataLocation "${IMDataPath}"
            </ManageOfferingCommand>
		</ManageOfferingCommands>
		<IMInstallPathAddition>eclipse</IMInstallPathAddition>
	</ManageOfferingMetadata>
	<IMInventoryData>
		<installedXML>
			<fileName>installed.xml</fileName>
			<xpathExpression id="PackageGroup">/installInfo/location[@kind='product']</xpathExpression>
			<xpathExpression id="Package">package[@kind='offering']</xpathExpression>
			<xpathExpression id="InterimFix">package[@kind='fix']</xpathExpression>
		</installedXML>
		<registry>
			<registryPath userType="nonroot" platform="unix">
				${user.home}/etc/.ibm/registry/
			</registryPath> 
			<registryPath userType="root" platform="unix">
				/etc/.ibm/registry/
			</registryPath> 
			<registryPath userType="root" platform="os400">
				/QIBM/InstallationManager/.ibm/registry/
			</registryPath> 
			<registryPath userType="nonroot" platform="os400">
				${user.home}/etc/.ibm/registry/
			</registryPath> 
			<registryPath userType="root" platform="cygwin">
				/proc/registry/HKEY_LOCAL_MACHINE/SOFTWARE/IBM
			</registryPath> 
			<registryPath userType="nonroot" platform="cygwin">
				/proc/registry/HKEY_CURRENT_USER/SOFTWARE/IBM
			</registryPath> 
			<registryPath userType="root" platform="windows" bit="32">
				SOFTWARE\IBM
			</registryPath> 
			<registryPath userType="root" platform="windows" bit="64">
				SOFTWARE\Wow6432Node\IBM
			</registryPath> 
		</registry>
		<configFile>${installPath}/eclipse/configuration/config.ini</configFile>
		<agentID>cic.appDataLocation</agentID>
		<IMName platform="unix">InstallationManager</IMName>
		<IMName platform="os400">InstallationManager</IMName>
		<IMName platform="windows">Installation Manager</IMName>
		<AccessRightsFile>eclipse/IBMIM.ini</AccessRightsFile>
		<OptionalIFixpropertiesToBeDisplayed>
			<Property xpath="//property[@name='dependencies.bundles']/@value" displayName="dependencies"/>
			<Property xpath="//property[@name='com.ibm.ws.required.apars']/@value" displayName="required_apars"/>
			<Property xpath="//property[@name='recommended']/@value" displayName="recommended"/>
			<Property xpath="//property[starts-with(@name,'cic.fixed.problem.display')]/@value" displayName="fixed_problem_display_id"/>
			<Property xpath="//property[starts-with(@name,'cic.fixed.problem.description')]/@value" displayName="fixed_problem_description"/>
			<Property xpath="//property[starts-with(@name,'cic.fixed.problems')]/@value" displayName="fixed_problems" attributeToBeDisplayed="value"/>
		</OptionalIFixpropertiesToBeDisplayed>
		<FeaturePropertyToBeDsiplayed>
			<Property xpath="//package[@kind='feature' and property[not(contains(@value, 'NotVisible')) and @name='cic.feature.kind' ]]/property[@name='cic.info.name']/@value"
					  displayName="feature_"/>
		</FeaturePropertyToBeDsiplayed>
	</IMInventoryData>
	<ISeriesMetadata>
		<JARPath>
			<FixedPath>/QOpenSys/QIBM/ProdData/JavaVM/jdk60/32bit/bin/jar</FixedPath>
			<!--  The envName must be System level env variable (*SYS) -->
			<EnvName></EnvName>
		</JARPath>
		<JAVAPath>
			<FixedPath>/QOpenSys/QIBM/ProdData/JavaVM/jdk60/32bit/bin/java</FixedPath>
			<!--  The envName must be System level env variable (*SYS) -->
			<EnvName></EnvName>
		</JAVAPath>
	</ISeriesMetadata>
	<rxaLog>	
		<enableLog>false</enableLog>
		<logger>com.ibm.ws.cimplus.rxa.logger</logger>
		<formatter>java.util.logging.SimpleFormatter</formatter>
		<trace_log>rxa_trace.log</trace_log>
		<!-- Refer to java.util.logging.Level for different types of logging level. -->
		<trace_level>FINEST</trace_level>
		<trace_limit>80000000</trace_limit>
		<trace_count>1</trace_count>
		<message_log>rxa_msg.log</message_log>
		<message_level>INFO</message_level>
		<message_limit>1000000</message_limit>
		<!-- To specify hosts: <hostnames>host1,host2</hostnames>. If need to enable logging on all hosts, leave it empty. -->
		<hostnames></hostnames>
	</rxaLog>
	<SupportedOSTypes resourceBundle="com.ibm.ws.cimplus.nls.jobMetadata">
		<OSType order="2" value="AIX" displayName="AIX" RBKey="" keywords="unix;aix;ibm aix"/>
		<OSType order="3" value="HPUX" displayName="HPUX" RBKey=""  keywords="unix;hpux;hp ux;hp-ux"/>
		<OSType order="4" value="os400" displayName="IBM i" RBKey="" keywords="os400;ibm i;i;iseries"/>
		<OSType order="5" value="IBM zOS" displayName="IBM zOS" RBKey="" keywords="unix;ibm z;z;zos;zseries;os390"/>
		<OSType order="6" value="Linux" displayName="Linux" RBKey="" keywords="unix;linux;redhat;suse;red flag linux"/>
		<OSType order="7" value="Solaris" displayName="Solaris" RBKey="" keywords="unix;solaris;sunos;sun solaris;sun-os;sun"/>
		<OSType order="8" value="windows" displayName="Windows" RBKey="" keywords="windows;win;windows xp;windows 7;vista;windows server"/>
		<OSType order="1" value="any" displayName="any" RBKey="registerhos.ostype.any" keywords="any;unknown;don't know"/>
	</SupportedOSTypes>
</CIMPlusMetadata>
