<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../../resources/stylesheets/wasmsgxml.css"?>
<TMSSource name="TivoliMessages" tmsVersion="1.0" xml:lang="en">
<!-- CMVC MSG File Name = ws/code/perf.tuning/src/com/ibm/ws/performance/tuning/properties/perftuning.nlsprops -->
<!-- DO NOT EDIT THIS FILE - This file was generated by the XML/Html & Property emitter -->
<!-- BEGIN MESSAGES -->
<Message ID="TUNE0219W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.dynacache.entries.decreaseEntries" varFormat="Java">
    perf.tuning.dynacache.entries.decreaseEntries=TUNE0219W: The dynamic cache instance {0} is not currently using all the available entries.  Consider decreasing the number of cache entries to {1}.
  </MsgText>
  <Explanation>
    The dynamic cache is not using all the available entries.
  </Explanation>
  <UserResponse>
    If the server is operating under normal load, consider reducing the number of dynamic cache entries so that these resources can be allocated elsewhere.
  </UserResponse>
</Message>
<Message ID="TUNE0322W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.restart" varFormat="Java">
    perfalert.restart=TUNE0322W: The Runtime Performance Advisor is not running. Restart the application server. {0}
  </MsgText>
  <Explanation>
    To use the Runtime Performance Advisor, restart your Application Server.
  </Explanation>
  <UserResponse>
    From the Application Server installation directory, go to the bin directory and type stopserver.bat command to stop the server and then type thestartserver.bat command to start the server.
  </UserResponse>
</Message>
<Message ID="TUNE0220W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.jvm.tooLongInGc" varFormat="Java">
    perf.tuning.jvm.tooLongInGc=TUNE0220W: The Java virtual machine is spending a considerable amount of time in garbage collection.  Consider increasing the heap size. {0}
  </MsgText>
  <Explanation>
    There are many reasons why an application might spend too much time in garbage collection.  Often, it indicates an application with many short-lived objects.  However, it can also indicate a heap that is too small, causing the Java Virtual Machine (JVM) memory manager to thrash.
  </Explanation>
  <UserResponse>
    Increasing the heap size might help in this case, by lengthening the time between garbage collection calls, but might also increase the time needed for each garbage collection.
  </UserResponse>
</Message>
<Message ID="TUNE0210W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.session.writeTimeTooLarge" varFormat="Java">
    perfalert.session.writeTimeTooLarge=TUNE0210W: Writing persistent sessions is unusually slow for {0}. {1}
  </MsgText>
  <Explanation>
    Your session repository might have a problem, your sessions might be too large or you might be writing to the repository more often than necessary.  If you use multi-row sessions, the times are per attribute rather than per session.
  </Explanation>
  <UserResponse>
    Consult the application provider about reducing the session size.
  </UserResponse>
</Message>
<Message ID="TUNE0407E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.couldNotRefreshRepositoryCache" varFormat="Java">
    perfalert.Exception.couldNotRefreshRepositoryCache=TUNE0407E: Could not refresh repository cache .
  </MsgText>
  <Explanation>
    There was a problem getting the Application Server configuration details from the repository.
  </Explanation>
  <UserResponse>
    If the problem persists, additional information might be available if you search for the message ID on the following Web sites: WebSphere Application Server Support page: http://www.ibm.com/software/webservers/appserv/was/support/ WebSphere Application Server for z/OS Support page: http://www.ibm.com/software/webservers/appserv/zos_os390/support/ .
  </UserResponse>
</Message>
<Message ID="TUNE0999W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.exception.stacktrace" varFormat="Java">
    perfalert.exception.stacktrace=TUNE0999W: Encountered an error while running performance advisor.  {0}
  </MsgText>
  <Explanation>
    The performance advisor created an error.
  </Explanation>
  <UserResponse>
    Restart performance advisor.
  </UserResponse>
</Message>
<Message ID="TUNE9003I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.noGCCycle" varFormat="Java">
    perfalert.memoryLeak.noGCCycle=TUNE9003I:  There did not appear to be a GC cycle in the heap.  Clearing current data structure.  {0}.
  </MsgText>
  <Explanation>
    There did not appear to be a GC cycle.  The application does not appear to be in use.
  </Explanation>
  <UserResponse>
    No action is required
  </UserResponse>
</Message>
<Message ID="TUNE0313I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.writeTimeOk" varFormat="Java">
    perfalert.session.writeTimeOk=TUNE0313I: The time taken to write session objects for {0} is reasonable.  {1}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0301W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.connPool.usageHigh" varFormat="Java">
    perfalert.connPool.usageHigh=TUNE0301W: The percent of connections used in the connection pool is optimal. {0}
  </MsgText>
  <Explanation>
    The connection pool size is fine and the pool usage is good.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0214W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.session.increaseCacheSize" varFormat="Java">
    perfalert.session.increaseCacheSize=TUNE0214W: The session cache for {0} is smaller than the average number of live sessions.  Increasing the session cache size to at least {1} may improve performance.  {2}
  </MsgText>
  <Explanation>
    In this situation, the overflow session cache is used instead of the main session cache, possibly slowing performance. Check that the session growth is bounded. In general, the average number of live sessions is approximately the rate of session creation times the average lifetime of a session.
  </Explanation>
  <UserResponse>
    To tune session management, open the administrative console and click Servers &gt; Application Servers &gt; Server &gt; Web Container Settings &gt; Web Container &gt; Session Management.
  </UserResponse>
</Message>
<Message ID="TUNE0206W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.connPool.toolarge" varFormat="Java">
    perfalert.connPool.toolarge=TUNE0206W: Decreasing the connection pool for data source {0} by setting the minimum size to {1} and the maximum size to {2} may improve performance.  {3}
  </MsgText>
  <Explanation>
    Decreasing the size of connection pool supports better pooling and frees memory resources.
  </Explanation>
  <UserResponse>
    To decrease the size of connection pool, open the administrative console and click Resources &gt; JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source &gt; Connection pool properties.
  </UserResponse>
</Message>
<Message ID="TUNE0327I" severity="I" prefix="yes">
  <MsgText pgmKey="perf.tuning.session.size.noProblem" varFormat="Java">
    perf.tuning.session.size.noProblem=TUNE0327I: There are no problems with the in-memory session size. {0}
  </MsgText>
  <Explanation>
    The in-memory session sizes are all reasonable.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE9008I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.unboundedHeap.noProblem" varFormat="Java">
    perfalert.memoryLeak.unboundedHeap.noProblem=TUNE9008I:  No problem has been detected with the java heap being large relative to the memory pool size. The effective memory pool {2} is {0} and the java process size has grown to be {1}.  The period analyzed is between {2} and {3}. {5}.
  </MsgText>
  <Explanation>
    Memory usage patterns do not indicate a memory leak
  </Explanation>
  <UserResponse>
    No action is required
  </UserResponse>
</Message>
<Message ID="TUNE0314I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.alwaysRoomForSession" varFormat="Java">
    perfalert.session.alwaysRoomForSession=TUNE0314I: In the current interval, there is room available in session cache for new sessions of Web Application {0}.  {1}
  </MsgText>
  <Explanation>
    Session cache size is good.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0326I" severity="I" prefix="yes">
  <MsgText pgmKey="perf.tuning.jvm.gc.noProblem" varFormat="Java">
    perf.tuning.jvm.gc.noProblem=TUNE0326I: There are no problems with the amount of time spent garbage collecting. {0}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0324W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.unknownError" varFormat="Java">
    perfalert.unknownError=TUNE0324W:  There was an unknown error detected in the Runtime Performance Advisor. Check the application server logs and enable trace. {0}
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor created an error.
  </Explanation>
  <UserResponse>
    Locate the log files under the installation root &gt; logs directory.  Each server instance has its own directory in the logs directory. Enable tracing in the administrative console by clicking Application Servers &gt; server &gt; Logging and Tracing &gt; Diagnostic Trace Service.
  </UserResponse>
</Message>
<Message ID="TUNE5008W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.trace.TraceSpecificationEnabled" varFormat="Java">
    cfgAlert.trace.TraceSpecificationEnabled=TUNE5008W: Trace Specifications are enabled. {0}
  </MsgText>
  <Explanation>
    Enabled trace specifications might significantly reduce the performance of the Application Server.
  </Explanation>
  <UserResponse>
    To disable unwanted trace specifications, open  the administrative console and click Application Servers &gt; server &gt; Change Log or Trace Levels and disable all unwanted trace specifications
  </UserResponse>
</Message>
<Message ID="TUNE5007I" severity="I" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.JITEnabled" varFormat="Java">
    cfgAlert.jvmConfig.JITEnabled=TUNE5007I: The JIT is enabled on the JVM. {0}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required
  </UserResponse>
</Message>
<Message ID="TUNE5033W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.connPoolConfig.maxPoolSizeTooBig" varFormat="Java">
    cfgAlert.connPoolConfig.maxPoolSizeTooBig=TUNE5033W: For data source {0}, the maximum connection pool size is unusually large. Typically, the connection pool size is no more than {1}. {2}
  </MsgText>
  <Explanation>
    In general, a very large connection pool reduces performance, although it might be necessary for some applications.
  </Explanation>
  <UserResponse>
    To change the connection pool properties, open the administrative console and click JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source &gt; Connection pool properties. See the information center for more information about queueing.
  </UserResponse>
</Message>
<Message ID="TUNE0402E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.couldNotRegisterForNotification" varFormat="Java">
    perfalert.Exception.couldNotRegisterForNotification=TUNE0402E:  Runtime Performance Advisor could not register for notifications for {0}.  The error reported was {1}.
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor failed to register for notifications of runtime changes.
  </Explanation>
  <UserResponse>
    If you are running in a network deployment environment, make sure that the deployment manager is still running.
  </UserResponse>
</Message>
<Message ID="TUNE0304I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.pool.noProblem" varFormat="Java">
    perfalert.pool.noProblem=TUNE0304I: No problem detected with the {0}.  {1}
  </MsgText>
  <Explanation>
    Connection pool size is good.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0409E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.couldNotFindResource" varFormat="Java">
    perfalert.Exception.couldNotFindResource=TUNE0409E: could not get {0} resource from config root.
  </MsgText>
  <Explanation>
    There was a problem getting the resource from the configuration root.
  </Explanation>
  <UserResponse>
    If the problem persists, additional information might be available if you search for the message ID on the following Web sites: WebSphere Application Server Support page: http://www.ibm.com/software/webservers/appserv/was/support/ WebSphere Application Server for z/OS Support page: http://www.ibm.com/software/webservers/appserv/zos_os390/support/ .
  </UserResponse>
</Message>
<Message ID="TUNE0222W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.session.size.avgTooBig" varFormat="Java">
    perf.tuning.session.size.avgTooBig=TUNE0222W: The sessions in the session cache of Web application {0} average {1}K, which is unusually large. {2}
  </MsgText>
  <Explanation>
    Large sessions can reduce performance.  The major costs are serialization and the amount of memory that is used.
  </Explanation>
  <UserResponse>
    Consider revising your application to reduce the average session size.
  </UserResponse>
</Message>
<Message ID="TUNE5041W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.dynamicCache.enableDynamicCache" varFormat="Java">
    cfgAlert.dynamicCache.enableDynamicCache=TUNE5041W: Enable dynamic caching for better performance.  Enable dynamic caching using the administrative console. {0}
  </MsgText>
  <Explanation>
    Dynamic cache is not enabled.
  </Explanation>
  <UserResponse>
    To enable dynamic cache service, open the administrative console and click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; Dynamic Cache Service. See the information center for more information on using dynamic cache service.
  </UserResponse>
</Message>
<Message ID="TUNE5031W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.connPoolConfig.minGreaterThanMax" varFormat="Java">
    cfgAlert.connPoolConfig.minGreaterThanMax=TUNE5031W: The minimum pool size for the data source is greater than the maximum pool size for data source {0}.  Adjust the sizes so that the size of the minimum connection pool is no more than the size of the maximum connection pool. {1}
  </MsgText>
  <Explanation>
    The value specified for the minimum connection pool of the data source is greater than the maximum pool size.
  </Explanation>
  <UserResponse>
    To change the connection pool properties, open the administrative console and click JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source &gt; Connection pool properties. See the information center for more information about queueing.
  </UserResponse>
</Message>
<Message ID="TUNE0223W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.session.size.maxTooBig" varFormat="Java">
    perf.tuning.session.size.maxTooBig=TUNE0223W: There is at least one session in the session cache of Web application {0} which is {1}K. {2}
  </MsgText>
  <Explanation>
    Large sessions can reduce performance. The major costs are serialization and the amount of memory used.
  </Explanation>
  <UserResponse>
    Consider revising your application to reduce the average session size.
  </UserResponse>
</Message>
<Message ID="TUNE0217E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.NoDataType" varFormat="Java">
    perfalert.NoDataType=TUNE0217E: Unknown data type.  {0}
  </MsgText>
  <Explanation>
    Data access is not available for this data type.
  </Explanation>
  <UserResponse>
    See the Troubleshooting section of the information center.
  </UserResponse>
</Message>
<Message ID="TUNE0325I" severity="I" prefix="yes">
  <MsgText pgmKey="perf.tuning.dynacache.entries.noProblem" varFormat="Java">
    perf.tuning.dynacache.entries.noProblem=TUNE0325I: Enough dynamic cache entries are allocated. {0}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0319W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.advisor.noPmiData" varFormat="Java">
    perfalert.advisor.noPmiData=TUNE0319W: Unable to completely utilize the performance advisor because data collection is not enabled for some modules.  Enable monitoring for the specified modules. {0}
  </MsgText>
  <Explanation>
    Performance Monitoring Infrastructure (PMI) is not enabled for some modules.
  </Explanation>
  <UserResponse>
    To fully utilize the performance advisor, enable monitoring for these modules. To enable PMI from the administrative console, click Application Servers &gt; server &gt; Performance Monitoring Infrastructure (PMI). Note: Setting the JVM module to MAX requires enabling the Java Virtual Machine Profiling Interface (JVMPI). See the information center for more information on this topic.
  </UserResponse>
</Message>
<Message ID="TUNE0218W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.dynacache.entries.increaseEntries" varFormat="Java">
    perf.tuning.dynacache.entries.increaseEntries=TUNE0218W: The dynamic cache instance {0} is not large enough to store all cacheable results.  Consider increasing the number of cache entries to {1}.
  </MsgText>
  <Explanation>
    When the dynamic cache is not large enough, the server must recalculate the evicted entries.  However, in many systems, there is not enough memory in the heap for a cache large enough to hold all cacheable entries.
  </Explanation>
  <UserResponse>
    Use the Tivoli Performance Viewer or other monitoring software to watch heap utilization as you adjust the dynamic cache size.
  </UserResponse>
</Message>
<Message ID="TUNE0401E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.adminClient" varFormat="Java">
    perfalert.Exception.adminClient=TUNE0401E: There was an exception getting an AdminClient {0}.
  </MsgText>
  <Explanation>
    Performance Runtime Advisor expected to get an administrative client and did not.
  </Explanation>
  <UserResponse>
    Check that the node agent is running and that process discovery has occurred on the application server.
  </UserResponse>
</Message>
<Message ID="TUNE0408E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.couldNotRefreshConfiguration" varFormat="Java">
    perfalert.Exception.couldNotRefreshConfiguration=TUNE0408E: Could not refresh {0} Configuration.
  </MsgText>
  <Explanation>
    There was a problem getting the Application Server Session configuration details from the repository.
  </Explanation>
  <UserResponse>
    If the problem persists, additional information might be available if you search for the message ID on the following Web sites: WebSphere Application Server Support page: http://www.ibm.com/software/webservers/appserv/was/support/ WebSphere Application Server for z/OS Support page: http://www.ibm.com/software/webservers/appserv/zos_os390/support/ .
  </UserResponse>
</Message>
<Message ID="TUNE0101W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.SystemNotUnderLoad" varFormat="Java">
    perfalert.SystemNotUnderLoad=TUNE0101W: Based on the CPU utilization, the system does not appear to be under load.  Please run the performance advisor with a representative workload.  {0}
  </MsgText>
  <Explanation>
    If the system is meant to be under load, there might be a bottleneck within the application itself ( for example, over synchronization ), or elsewhere in the system.  If this problem occurs in a test environment, the load driver might have reached its maximum limit.
  </Explanation>
  <UserResponse>
    Consult the information center for more information on deadlocks and application performance tuning.
  </UserResponse>
</Message>
<Message ID="TUNE0406E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.mBeanAttributeNotAvailable" varFormat="Java">
    perfalert.Exception.mBeanAttributeNotAvailable=TUNE0406E:  The attribute {0} is not available from the mbean {1}.  The Runtime Performance Advisor will use the repository configuration in it&apos;&apos;s place.
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor uses the runtime settings to help determine performance problems.  This data was not available so that persistent configuration is used instead of the runtime configuration.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0213W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.session.readSizeTooLarge" varFormat="Java">
    perfalert.session.readSizeTooLarge=TUNE0213W: The sessions being read by {0} from the session repository are unusually large.  {1}
  </MsgText>
  <Explanation>
    Large sessions can reduce performance.  The major costs are serialization, communication with the repository and the amount of memory used.
  </Explanation>
  <UserResponse>
    Consider revising your application to reduce the session size.
  </UserResponse>
</Message>
<Message ID="TUNE5001W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.initialHeapTooSmall" varFormat="Java">
    cfgAlert.jvmConfig.initialHeapTooSmall=TUNE5001W: JVM initial heap size is unusually small. Typically, the initial heap size is greater than or equal to {0}.
  </MsgText>
  <Explanation>
    If the initial Java Virtual Machine (JVM) heap size is too small, the heap has to expand more often than required and performance degrades when the application server is first initialized.
  </Explanation>
  <UserResponse>
    To change the JVM heap size, open the administrative console and click Application Servers &gt; server &gt; Java and Process Management &gt; Process Definition &gt; Java Virtual Machine. See the information center for more information on tuning JVM.
  </UserResponse>
</Message>
<Message ID="TUNE0221W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.session.unpersisted.webapp.noData" varFormat="Java">
    perf.tuning.session.unpersisted.webapp.noData=TUNE0221W: Data for memory session size is not available for certain Web applications. {0}
  </MsgText>
  <Explanation>
    Session size contributes to application performance.  If the data is available, the performance advisor gives advice on the average session size.
  </Explanation>
  <UserResponse>
    Enable the Performance Monitoring Infrastructure (PMI) SessionObjectSize counter if you are not in a distributed environment.
  </UserResponse>
</Message>
<Message ID="TUNE0208W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.connPool.notInUseOrtoolarge" varFormat="Java">
    perfalert.connPool.notInUseOrtoolarge=TUNE0208W: Data source {0} does not seem to be in use.  If the data source is used occasionally, then decrease the number of connections in the pool, by setting minConnections to {1}, and maxConnections to {2}.  If the data source is never used, then delete the data source. {3}
  </MsgText>
  <Explanation>
    The system appears to be under heavy load (CPU is very busy,) yet the number of threads used within the pool is small. Decreasing the size of the thread pool might free resources and might improve performance.
  </Explanation>
  <UserResponse>
    To decrease the size of connection pool, open the administrative console and click Resources &gt; JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source &gt; Connection pool properties.
  </UserResponse>
</Message>
<Message ID="TUNE0202W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.pool.initialMaxSmall" varFormat="Java">
    perfalert.pool.initialMaxSmall=TUNE0202W: Increasing the {0} thread pool&apos;&apos;s Maximum Size to {1} may improve performance.  {2}
  </MsgText>
  <Explanation>
    When a growable thread pool expands beyond the maximum size, those additional threads cannot be reused and can be discarded from the pool.  Increasing the thread pool maximum size to the average pool size can improve performance significantly.  If this message appears repeatedly, look for continued growth of the thread pool, which often indicates a leak or deadlock.
  </Explanation>
  <UserResponse>
    To increase the thread pool size for the Web container in the administrative console, click Servers &gt; Application Servers &gt; server &gt; Thread Pools. To increase the thread pool size for the ORB Service, click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.
  </UserResponse>
</Message>
<Message ID="TUNE5034W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.connPoolConfig.prepStmtCacheTooBig" varFormat="Java">
    cfgAlert.connPoolConfig.prepStmtCacheTooBig=TUNE5034W: The prepared statement cache is unusually large for data source {0}.  Typically, the prepared statement cache is no more than {1} statements per connection. {2}
  </MsgText>
  <Explanation>
    A large prepared statement cache is usually a problem only if memory is constrained and there are many infrequently used prepared statements.  In this case, the statements are not discarded, but consume memory. In general, the size of the cache equals the number of prepared statements used in the application.
  </Explanation>
  <UserResponse>
    To change the size of the cache, open the administrative console and click JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source. See the information center for more information about queueing.
  </UserResponse>
</Message>
<Message ID="TUNE0205W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.pool.increase" varFormat="Java">
    perfalert.pool.increase=TUNE0205W: Increasing the {0} by setting the minimum size to {1} and the maximum size to {2} may improve performance.  {3}
  </MsgText>
  <Explanation>
    The utilization of the thread pool is high, yet the CPU utilization is low. The thread pool size might be too small and might be unnecessarily limiting the performance of your system. Increasing the size of the pool can also reduce performance. Test carefully. You can obtain optimal performance when the thread pool size is large enough to support full CPU utilization.  It is normal to see high utilization of the thread pool.
  </Explanation>
  <UserResponse>
    To change the thread pool size for the Web container in the administrative console, click Servers &gt; Application Servers &gt; server &gt; Thread Pools. To increase the thread pool size for the ORB Service, click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.
  </UserResponse>
</Message>
<Message ID="TUNE0328W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.advisor.pmiDisabledNodeagent" varFormat="Java">
    perfalert.advisor.pmiDisabledNodeagent=TUNE0328W: Unable to completely utilize the performance advisor because the Performance Monitoring Infrastructure (PMI) is not enabled for this nodeagent. Enable the Performance Monitoring Infrastructure (PMI) using the administrative console and restart the nodeagent. {0}
  </MsgText>
  <Explanation>
    The Performance Monitoring Infrastructure (PMI) is not enabled for this node agent.
  </Explanation>
  <UserResponse>
    To enable the PMI from the administrative console, click System Administration &gt; Node Agents &gt; nodeagent &gt; Performance Monitoring Infrastructure (PMI).Select the Enable Performance Monitoring Infrastructure (PMI) option, click Apply and restart the node agent.
  </UserResponse>
</Message>
<Message ID="TUNE0311I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.readSizeOk" varFormat="Java">
    perfalert.session.readSizeOk=TUNE0311I:  The size of the persistent store session objects that are read by the application server for {0} are within reasonable limits.  {1}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE5042W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.dynamicCache.enableServletCache" varFormat="Java">
    cfgAlert.dynamicCache.enableServletCache=TUNE5042W: Enable servlet caching for better performance. {0}
  </MsgText>
  <Explanation>
    Servlet caching is not enabled.
  </Explanation>
  <UserResponse>
    To enable servlet caching in the administrative console, click Servers &gt; Application servers &gt; server_name &gt; Web container settings &gt; Web container and select Enable servlet caching under the Configuration tab.  Click Apply or OK. You must restart your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE5005W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.initialGreaterThanMax" varFormat="Java">
    cfgAlert.jvmConfig.initialGreaterThanMax=TUNE5005W: The initial JVM heap size is greater than the maximum heap size. {0}
  </MsgText>
  <Explanation>
    The Java Virtual Machine (JVM) heap size settings specify an initial heap size that is larger than the maximum heap size.
  </Explanation>
  <UserResponse>
    To change the JVM heap size, open the administrative console and click Application Servers &gt; server &gt; Java and Process Management &gt; Process Definition &gt; Java Virtual Machine. See the information center for more information on tuning JVM.
  </UserResponse>
</Message>
<Message ID="TUNE9002W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.memoryLeakWarning" varFormat="Java">
    perfalert.memoryLeak.memoryLeakWarning=TUNE9002W:  Though the heap has room for expansion there are early warning signs of a memory leak {0}.
  </MsgText>
  <Explanation>
    Over a period of time the amount of free memory appears to be decreasing or there is consistently insufficient free memory in the heap,  indicating that you may have a memory leak.
  </Explanation>
  <UserResponse>
    Use tooling to further analyze your memory useage over time. Refer to the information center for more information about diagnosing out-of-memory errors and java heap memory leak.
  </UserResponse>
</Message>
<Message ID="TUNE0320W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.advisor.pmiDisabled" varFormat="Java">
    perfalert.advisor.pmiDisabled=TUNE0320W: Unable to completely utilize the performance advisor because the Performance Monitoring Infrastructure (PMI) is not enabled for this server. Enable the Performance Monitoring Infrastructure (PMI) using the administrative console and restart the server. {0}
  </MsgText>
  <Explanation>
    The Performance Monitoring Infrastructure (PMI) is not enabled for this server.
  </Explanation>
  <UserResponse>
    To enable PMI from the administrative console, click Application Servers &gt; server &gt; Performance Monitoring Infrastructure (PMI). Select the Enable Performance Monitoring Infrastructure (PMI) option, click Apply and restart your server.
  </UserResponse>
</Message>
<Message ID="TUNE0204W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.pool.decrease" varFormat="Java">
    perfalert.pool.decrease=TUNE0204W: Decreasing the size of the {0} by setting the the minimum size to {1} and the maximum size to {2} may improve performance.  {3}
  </MsgText>
  <Explanation>
    The CPU utilization of the system is high. Decreasing the size of the thread pool might free resources and might improve performance.
  </Explanation>
  <UserResponse>
    To decrease the thread pool size for the Web container in the administrative console, click Servers &gt; Application Servers &gt; server &gt; Thread Pools. To increase the thread pool size for the ORB Service, click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.
  </UserResponse>
</Message>
<Message ID="TUNE0215W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.session.noRoomForNewSession" varFormat="Java">
    perfalert.session.noRoomForNewSession=TUNE0215W: Increasing the session cache for {0} will reduce the number of invalid sessions returned by getSession and should increase performance.  Given the current rate of errors and average session lifetime, increase cache size to {1}.  {2}
  </MsgText>
  <Explanation>
    When the session cache is full and cannot overflow, the getSession() method might return an invalid session. The average number of live sessions is approximately the rate of session creation times the average lifetime of a session.  If this situation was caused by a temporary load surge, consider allowing the cache to overflow. Note that if an application has unbounded session growth, allowing overflow might result in a memory leak.
  </Explanation>
  <UserResponse>
    To tune session management, open the administrative console and click Servers &gt; Application Servers &gt; Server &gt; Web Container Settings &gt; Web Container &gt; Session Management.
  </UserResponse>
</Message>
<Message ID="TUNE0315I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.prepStmt.message_correct" varFormat="Java">
    perfalert.prepStmt.message_correct=TUNE0315I: The prepared statement cache is set appropriately for data source {0}.  {1}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0306I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.pool.initialMaxOk" varFormat="Java">
    perfalert.pool.initialMaxOk=TUNE0306I: The current average thread pool size: {0} is less than the current threshold. {1}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0303W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.pool.threadsLowCpuLow" varFormat="Java">
    perfalert.pool.threadsLowCpuLow=TUNE0303W: Number of threads working in {0} is low, but the system does not seem to be under stress.  {1}
  </MsgText>
  <Explanation>
    The CPU utilization of this system is unusually low.
  </Explanation>
  <UserResponse>
    Run the performance advisor with a representative workload. If CPU utilization is expected to be this low, consider decreasing the size of the thread pool. If not, the bottleneck might exist elsewhere in the system, preventing work from reaching the Application Server. To decrease the size of the thread pool For the Web container, click Servers &gt; Application Servers &gt; server &gt; Thread Pools in the administrative console. To decrease the size of the thread pool for the ORB Service, click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.
  </UserResponse>
</Message>
<Message ID="TUNE5004W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.maxHeapTooBig" varFormat="Java">
    cfgAlert.jvmConfig.maxHeapTooBig=TUNE5004W: The JVM maximum heap size is unusually large. Typically, the maximum heap size is no more than {0}.
  </MsgText>
  <Explanation>
    If the heap size is too large for the amount of physical memory on your machine, your system might page and degrade performance.
  </Explanation>
  <UserResponse>
    If this situation occurs, you might reduce your application footprint or add physical memory to your system.
  </UserResponse>
</Message>
<Message ID="TUNE0216W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.memory" varFormat="Java">
    perfalert.memory=TUNE0216W: There is not enough memory to change settings.  {0}
  </MsgText>
  <Explanation>
    An alert was issued recommending a setting increase.  However, the Java Virtual Machine (JVM) heap might not have enough memory to implement the change.
  </Explanation>
  <UserResponse>
    Consider changing the JVM heap size, the time that is spent in garbage collection, and the memory usage. To change the JVM heap size, open the administrative console and click Application Servers &gt; Server &gt; Java and Process Management &gt; Process Definition &gt; Java Virtual Machine.
  </UserResponse>
</Message>
<Message ID="TUNE0211W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.session.writeSizeTooLarge" varFormat="Java">
    perfalert.session.writeSizeTooLarge=TUNE0211W: The sessions being written to the session repository for {0} are unusually large. {1}
  </MsgText>
  <Explanation>
    Large sessions can reduce performance. The major costs are serialization, communication with the repository and the amount of memory used.
  </Explanation>
  <UserResponse>
    Consider revising your application to reduce the session size.
  </UserResponse>
</Message>
<Message ID="TUNE0309I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.CacheSmallEnough" varFormat="Java">
    perfalert.session.CacheSmallEnough=TUNE0309I: The ratio of live sessions and session cache size is small enough that resources are not wasted.  {0}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0302W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.connPool.poolSizeGreaterThanMin" varFormat="Java">
    perfalert.connPool.poolSizeGreaterThanMin=TUNE0302W: The current size of the connection pool is not equal to the minimum value and does not decrease the size of the pool. {0}
  </MsgText>
  <Explanation>
    The current algorithm only decreases the minimum or maximum pool size settings if the current pool size is equal to the MinPoolSize setting.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE5003W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.maxHeapTooSmall" varFormat="Java">
    cfgAlert.jvmConfig.maxHeapTooSmall=TUNE5003W: The JVM maximum heap size is unusually small. Typically, the maximum heap size is greater than or equal to {0}.
  </MsgText>
  <Explanation>
    If the maximum heap size is too small, the Java Virtual Machine (JVM) does not have enough room to manage the heap efficiently.  Performance degrades and the application can fail.
  </Explanation>
  <UserResponse>
    To change the JVM heap size, open the administrative console and click Application Servers &gt; server &gt; Java and Process Management &gt; Process Definition &gt; Java Virtual Machine. See the information center for more information on tuning JVM.
  </UserResponse>
</Message>
<Message ID="TUNE0307I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.CacheRatioGood" varFormat="Java">
    perfalert.session.CacheRatioGood=TUNE0307I: The session cache ratio of (live sessions)/(session cache size) is good.  {0}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0316I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.inValidPoolSize" varFormat="Java">
    perfalert.inValidPoolSize=TUNE0316I: The size of the {0} is invalid.  The pool size is {1}; there are {2} active threads. {3}
  </MsgText>
  <Explanation>
    Either the thread pool size is negative or the number of active threads is greater than the thread pool size.
  </Explanation>
  <UserResponse>
    Check your thread pool settings in the administrative console: For the Web container, click Servers &gt; Application Servers &gt; server &gt; Thread Pools. For the ORB Service, click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.
  </UserResponse>
</Message>
<Message ID="TUNE5006W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.JITDisabled" varFormat="Java">
    cfgAlert.jvmConfig.JITDisabled=TUNE5006W: The JIT is disabled on the JVM. {0}
  </MsgText>
  <Explanation>
    Having the JIT disabled will reduce performance of the Application Server.
  </Explanation>
  <UserResponse>
    To change the JVM heap size, open the administrative console and click Application Servers &gt; server &gt; Java and Process Management &gt; Process Definition &gt; Java Virtual Machine. See the information center for more information on tuning JVM.
  </UserResponse>
</Message>
<Message ID="TUNE0310I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.writeSizeOk" varFormat="Java">
    perfalert.session.writeSizeOk=TUNE0310I: The size of the session objects written by the application server, for {0} are within reasonable limits.  {1}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0403E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.NotificationClassCastException" varFormat="Java">
    perfalert.Exception.NotificationClassCastException=TUNE0403E:  Runtime Performance Advisor caught a class cast exception when processor AttributeChangedNotification.  The following notification should be sent back as an AttributeChangeNotification rather than a normal Notification: {0}.  The error reported was {1}
  </MsgText>
  <Explanation>
    This is an internal system error.
  </Explanation>
  <UserResponse>
    If the problem persists, additional information might be available if you search for the message ID on the following Web sites: WebSphere Application Server Support page: http://www.ibm.com/software/webservers/appserv/was/support/ WebSphere Application Server for z/OS Support page: http://www.ibm.com/software/webservers/appserv/zos_os390/support/ .
  </UserResponse>
</Message>
<Message ID="TUNE0201W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.prepStmt.message_increase" varFormat="Java">
    perfalert.prepStmt.message_increase=TUNE0201W: The rate of discards from the prepared statement cache is high.  Increase the size of the prepared statement cache for the data source {0}.  {1}
  </MsgText>
  <Explanation>
    Caching all prepared statements improves performance.  In general, the size of the cache must equal the number of prepared statements that are used in the application.
  </Explanation>
  <UserResponse>
    To increase the size of the prepared statement cache in the administrative console, click Resources &gt; JDBC Providers &gt; JDBC_provider &gt; Data sources &gt; data_source and increase the value in Statement Cache Size field. Refer to the information center for more information about tuning data source connection pools.
  </UserResponse>
</Message>
<Message ID="TUNE9005I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.warning" varFormat="Java">
    perfalert.memoryLeak.warning=TUNE9005I:  The following suspious memory warning has been detected. {0}.
  </MsgText>
  <Explanation>
    Memory usage patterns have indicated a potential problem
  </Explanation>
  <UserResponse>
    No action is required
  </UserResponse>
</Message>
<Message ID="TUNE5021W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.orb.minGreaterThanMax" varFormat="Java">
    cfgAlert.orb.minGreaterThanMax=TUNE5021W: The size of the minimum thread pool for the ORB is greater than the size of the maximum thread pool.  Adjust the sizes so that the minimum thread pool size is equal to or less than the size of the maximum thread pool. {0}
  </MsgText>
  <Explanation>
    The value that is specified for the minimum thread pool of the Object Request Broker (ORB) is greater than the value for the maximum thread pool.
  </Explanation>
  <UserResponse>
    To change the size of the thread pool, open the administrative console and click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool. See the information center for more information on tuning your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE9004I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.noProblem" varFormat="Java">
    perfalert.memoryLeak.noProblem=TUNE9004I:  No memory leak detected   {0}.
  </MsgText>
  <Explanation>
    Memory usage patterns do not indicate a memory leak
  </Explanation>
  <UserResponse>
    No action is required
  </UserResponse>
</Message>
<Message ID="TUNE0318I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.noData" varFormat="Java">
    perfalert.noData=TUNE0318I: There is no data available for data point {0}. If the problem persists, check the Performance Monitoring Infrastructure (PMI) settings.  {1}
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor enables this data point for future use.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE5002W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.jvmConfig.initialHeapTooBig" varFormat="Java">
    cfgAlert.jvmConfig.initialHeapTooBig=TUNE5002W: The JVM initial heap size is unusually large. Typically, the initial heap size is no more than {0}.
  </MsgText>
  <Explanation>
    If the minimum heap size is too large, the Java Virtual machine (JVM) cannot reduce the heap to an appropriate size.  Garbage collection takes more time, which causes longer interruptions in application processing.
  </Explanation>
  <UserResponse>
    To change the JVM heap size, open the administrative console and click Application Servers &gt; server &gt; Java and Process Management &gt; Process Definition &gt; Java Virtual Machine. See the information center for more information on tuning JVM.
  </UserResponse>
</Message>
<Message ID="TUNE0404E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.AttributeNotFound" varFormat="Java">
    perfalert.Exception.AttributeNotFound=TUNE0404E:  Runtime Performance Advisor could not find the attribute {0} on mbean {1}
  </MsgText>
  <Explanation>
    This is an internal system error.
  </Explanation>
  <UserResponse>
    If the problem persists, additional information might be available if you search for the message ID on the following Web sites: WebSphere Application Server Support page: http://www.ibm.com/software/webservers/appserv/was/support/ WebSphere Application Server for z/OS Support page: http://www.ibm.com/software/webservers/appserv/zos_os390/support/ .
  </UserResponse>
</Message>
<Message ID="TUNE0321W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.noInterval" varFormat="Java">
    perfalert.noInterval=TUNE0321W: Not enough data to perform analysis. {0}
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor, advice or Performance Monitoring Infrastructure (PMI) data point might have been enabled.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0207W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.connPool.tooSmall" varFormat="Java">
    perfalert.connPool.tooSmall=TUNE0207W: Utilization of the connection pool is high. Performance might be improved by increasing the maxPoolSize for data source {0}.  Try setting the minimum size to {1}, and the maximum size to {2}.  {3}
  </MsgText>
  <Explanation>
    The connection pool might be unnecessarily limiting the performance of your system. Increasing the size of the pool can also reduce performance. Test carefully. You can obtain optimal performance when the connection pool is large enough to support full cpu utilization.  In general, expect to see high utilization of the thread pool.
  </Explanation>
  <UserResponse>
    To change the size of connection pool, open the administrative console and click Resources &gt; JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source &gt; Connection pool properties.
  </UserResponse>
</Message>
<Message ID="TUNE5011W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.webContainer.minGreaterThanMax" varFormat="Java">
    cfgAlert.webContainer.minGreaterThanMax=TUNE5011W: The size of the minimum thread pool for the Web container is greater than the size of the maximum thread pool.  Adjust the sizes so that the minimum thread pool is equal to or less than the size of the maximum thread pool. {0}
  </MsgText>
  <Explanation>
    The value specified for the minimum thread pool of the Web container is greater than the value for the maximum thread pool.
  </Explanation>
  <UserResponse>
    To change the size of the thread pool, open the administrative console and click Servers &gt; Application Servers &gt; server &gt; Thread Pools. See the information center for more information on tuning your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE0224W" severity="W" prefix="yes">
  <MsgText pgmKey="perf.tuning.session.size.notNeeded" varFormat="Java">
    perf.tuning.session.size.notNeeded=TUNE0224W: Consider lowering the monitoring level from Maximum to High for the modules listed below. {0}
  </MsgText>
  <Explanation>
    The performance advisor does not need the &quot;PMI monitored statistic set&quot; to be &quot;all&quot;.
  </Explanation>
  <UserResponse>
    Lower the PMI monitored statistic set to extended.
  </UserResponse>
</Message>
<Message ID="TUNE0212W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.session.readTimeTooLarge" varFormat="Java">
    perfalert.session.readTimeTooLarge=TUNE0212W: Reading persistent sessions is unusually slow for {0}.  {1}
  </MsgText>
  <Explanation>
    Your session repository might have a problem or your sessions might be too large.  If you use multi-row sessions, the times are per attribute, rather than per session.
  </Explanation>
  <UserResponse>
    Consult the application provider about reducing the session size.
  </UserResponse>
</Message>
<Message ID="TUNE0308I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.CacheLargeEnough" varFormat="Java">
    perfalert.session.CacheLargeEnough=TUNE0308I: The session cache for {0} is large enough to contain the average number of live sessions.  {1}.
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE9006W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.canceled" varFormat="Java">
    perfalert.memoryLeak.canceled=TUNE9006W:  It has been determined that a previous suspicous memory usage notification was in error.  No memory problem has been detected at this time. {0}
  </MsgText>
  <Explanation>
    To provide early notification of a suspicious memory activity short and long data collection periods are used.  Sometimes a short period issues a notification which is later determined to be false when looking at the larger amount of data contained within a long period.
  </Explanation>
  <UserResponse>
    No action is required
  </UserResponse>
</Message>
<Message ID="TUNE5023W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.orb.maxSizeTooBig" varFormat="Java">
    cfgAlert.orb.maxSizeTooBig=TUNE5023W: The size of the maximum thread pool for the ORB is unusually large. Typically, the maximum thread pool size is no more than {0}. {1}
  </MsgText>
  <Explanation>
    In general, a very large thread pool reduces performance, although it might be necessary for some applications.
  </Explanation>
  <UserResponse>
    To change the size of the thread pool, open the administrative console and click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool. See the information center for more information on tuning your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE5901W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.configRule.errorReadingConfig" varFormat="Java">
    cfgAlert.configRule.errorReadingConfig=TUNE5901W: An error occurred while reading the configuration for {0}. {1}
  </MsgText>
  <Explanation>
    An error occurred reading the configuration through the configuration service or configuration data is not in the log file, if in log replay mode.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE5022W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.orb.minSizeTooBig" varFormat="Java">
    cfgAlert.orb.minSizeTooBig=TUNE5022W: The size of the minimum thread pool for the ORB is unusually large. Typically, the minimum thread pool size is no more than {0}. {1}
  </MsgText>
  <Explanation>
    In general, a very large thread pool reduces performance, although it might be necessary for some applications.
  </Explanation>
  <UserResponse>
    To change the size of the thread pool, open the administrative console and click: Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.  See the information center for more information on tuning your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE0405E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception.couldNotRegisterForNotification.mBeanServerDelegate" varFormat="Java">
    perfalert.Exception.couldNotRegisterForNotification.mBeanServerDelegate=TUNE0405E:  Runtime Performance Advisor could not register for regisration/unregistration notifications on the MBeanServerDelegate for type {0}.  The error reported was {1}.
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor failed to register for notifications of runtime changes.
  </Explanation>
  <UserResponse>
    If you are running in network deployment environment, make sure that the deployment manager is still running.
  </UserResponse>
</Message>
<Message ID="TUNE5035W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.connPoolConfig.useDB2TuningWizard" varFormat="Java">
    cfgAlert.connPoolConfig.useDB2TuningWizard=TUNE5035W: Run the DB2 Performance Configuration Wizard for advice on tuning DB2 databases for performance.
  </MsgText>
  <Explanation>
    The DB2 Performance Configuration Wizard calculates and suggests configuration parameters to optimize the performance of your DB2 database.
  </Explanation>
  <UserResponse>
    To access the DB2 Performance Configuration Wizard, right click the database object in the DB2 Control Center and select Configure Performance Using Wizard.
  </UserResponse>
</Message>
<Message ID="TUNE9007W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.unboundedHeap.memoryLeakDetected" varFormat="Java">
    perfalert.memoryLeak.unboundedHeap.memoryLeakDetected=TUNE9007W:  It has been detected that your java heap is getting large relative to memory pool size.  A  memory leak is possible.  The effective memory pool {2} is {0} and your java process size has grown to be {1}.  The period analyzed is between {3} and {4}. {5}.
  </MsgText>
  <Explanation>
    A memory leak might cause the size of the java process to grow in an unbounded manner.
  </Explanation>
  <UserResponse>
    Either adjust the memory pool size or use tooling to further analyze your memory useage over time. Refer to the information center for more information about diagnosing out-of memory errors and java heap memory leaks.
  </UserResponse>
</Message>
<Message ID="TUNE0323W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.error" varFormat="Java">
    perfalert.error=TUNE0323W:  There was a general error detected in the Runtime Performance Advisor.  Check the application server logs. {0}
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor created an error.
  </Explanation>
  <UserResponse>
    Locate the log files under the installation root &gt; logs directory. Each server instance has its own directory in the logs directory. Enable tracing in the administrative console by clicking Application Servers &gt; server &gt; Logging and Tracing &gt; Diagnostic Trace Service.
  </UserResponse>
</Message>
<Message ID="TUNE5032W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.connPoolConfig.minPoolSizeTooBig" varFormat="Java">
    cfgAlert.connPoolConfig.minPoolSizeTooBig=TUNE5032W: For data source {0}, the minimum connection pool size is unusually large. Typically, the connection pool size should be no larger than {1}. {2}
  </MsgText>
  <Explanation>
    In general, a very large connection pool reduces performance, although it might be necessary for some applications.
  </Explanation>
  <UserResponse>
    To change the connection pool properties, open the administrative console and click JDBC Providers &gt; JDBC_provider &gt; Data Sources &gt; data_source &gt; Connection pool properties. See the information center for more information about queueing.
  </UserResponse>
</Message>
<Message ID="TUNE0312I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.session.readTimeOk" varFormat="Java">
    perfalert.session.readTimeOk=TUNE0312I: The time taken to read session objects is reasonable for {0}.  {1}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0305I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.pool.cpuLow" varFormat="Java">
    perfalert.pool.cpuLow=TUNE0305I: Since the CPU is heavily utilized, increasing the number of threads in {0} does not improve performance.  {0}
  </MsgText>
  <Explanation>
    This message is for informational purposes only.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE0410E" severity="E" prefix="yes">
  <MsgText pgmKey="perfalert.Exception" varFormat="Java">
    perfalert.Exception=TUNE0410E:  There was a general error detected in the Runtime Performance Advisor.  Check the application server logs. {0}
  </MsgText>
  <Explanation>
    The Runtime Performance Advisor created an error.
  </Explanation>
  <UserResponse>
    Each server instance has its own directory in the logs directory. Enable the com.ibm.ws.performance.tuning.serverAlert.*=all=enabled tracing in the administrative console by clicking Application Servers &gt; server &gt; Logging and Tracing &gt; Diagnostic Trace Service.
  </UserResponse>
</Message>
<Message ID="TUNE0317I" severity="I" prefix="yes">
  <MsgText pgmKey="perfalert.noProblem" varFormat="Java">
    perfalert.noProblem=TUNE0317I: No further tuning problems have been found.  {0}
  </MsgText>
  <Explanation>
    The performance advisor limits the number of times a particular warning is issued.  A tuning problem can still exist, even though no more messages are issued.
  </Explanation>
  <UserResponse>
    No action is required.
  </UserResponse>
</Message>
<Message ID="TUNE5013W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.webContainer.maxSizeTooBig" varFormat="Java">
    cfgAlert.webContainer.maxSizeTooBig=TUNE5013W: The size of the maximum thread pool for the Web container is unusually large. Typically, the maximum thread pool size of the Web container is no more than {0}. {1}
  </MsgText>
  <Explanation>
    In general, a very large thread pool reduces performance, although it might be necessary for some applications.
  </Explanation>
  <UserResponse>
    To change the size of the thread pool, open the administrative console, click: Servers &gt; Application Servers &gt; server &gt; Thread Pools. See the information center for more information on tuning your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE5012W" severity="W" prefix="yes">
  <MsgText pgmKey="cfgAlert.webContainer.minSizeTooBig" varFormat="Java">
    cfgAlert.webContainer.minSizeTooBig=TUNE5012W: The size of the minimum thread pool for the Web Container is unusually large.  Typically, the minimum thread pool size of the Web container is no more than {0}. {1}
  </MsgText>
  <Explanation>
    In general, a very large thread pool reduces performance, although it might be necessary for some applications.
  </Explanation>
  <UserResponse>
    To change the size of the thread pool, open the administrative console and click Servers &gt; Application Servers &gt; server &gt; Thread Pools. See the information center for more information on tuning your Application Server.
  </UserResponse>
</Message>
<Message ID="TUNE9001W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.memoryLeak.memoryLeakDetected" varFormat="Java">
    perfalert.memoryLeak.memoryLeakDetected=TUNE9001W:  Heap utilization patterns indicate that you may have a memory leak  {0}.
  </MsgText>
  <Explanation>
    Over a period of time the amount of free memory appears to be decreasing or there is consistently insufficient free memory in the heap,  indicating that you may have a memory leak.
  </Explanation>
  <UserResponse>
    Use tooling to further analyze your memory usage over time. Refer to the information center for more informationabout diagnosing out-of-memory errors and java heap memory leak.
  </UserResponse>
</Message>
<Message ID="TUNE0203W" severity="W" prefix="yes">
  <MsgText pgmKey="perfalert.pool.tooManyThreads" varFormat="Java">
    perfalert.pool.tooManyThreads=TUNE0203W: Based on the number of processors, the {0} thread pool is unusually large. {1}
  </MsgText>
  <Explanation>
    If this message appears repeatedly, look for continued growth of the thread pool, which often indicates a leak or deadlock.  This message might also indicate a temporary load surge.  However, if the thread pool remains steadily at this size, the large number of threads might degrade performance. Test a bounded thread pool of a smaller size.
  </Explanation>
  <UserResponse>
    To change the thread pool size for the Web container in the administrative console, click Servers &gt; Application Servers &gt; server &gt; Thread Pools. To change the thread pool size for the ORB Service, click Servers &gt; Application Servers &gt; server &gt; Container Services &gt; ORB Service &gt; Thread Pool.
  </UserResponse>
</Message>
<!-- END MESSAGES -->
</TMSSource>
