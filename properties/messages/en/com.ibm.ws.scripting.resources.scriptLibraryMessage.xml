<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../../resources/stylesheets/wasmsgxml.css"?>
<TMSSource name="TivoliMessages" tmsVersion="1.0" xml:lang="en">
<!-- CMVC MSG File Name = ws/code/admin.scripting/src/com/ibm/ws/scripting/resources/scriptLibraryMessage.nlsprops -->
<!-- DO NOT EDIT THIS FILE - This file was generated by the XML/Html & Property emitter -->
<!-- BEGIN MESSAGES -->
<Message ID="WASL6048E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6048E" varFormat="Java">
    WASL6048E=WASL6048E: The {0} application is not deployed on the {1} target.
  </MsgText>
  <Explanation>
    The application is not deployed on the target of interest.  The script procedure can not run.
  </Explanation>
  <UserResponse>
    Verify that the application is not deployed on the target.
  </UserResponse>
</Message>
<Message ID="WASL0007I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINJDBC_GENERAL_HELP" varFormat="Java">
    ADMINJDBC_GENERAL_HELP=WASL0007I: The AdminJDBC script library provides the script
	procedures that configure and query Java Database Connectivity (JDBC) provider and data source settings.

	The AdminJDBC script library provides the following script procedures.
	To display detailed information about each script procedures, use the help command
	for the AdminJDBC script library, specifying the name of the script of interest
	as an argument.
	The script procedures that take the scope argument can be specified 
	in following formats (Cell, Node, Server, Cluster): 
	for example, a cluster can be specified as:
		&quot;Cell=myCell,Cluster=myCluster&quot; or 
		&quot;/Cell:myCell/ServerCluster:myCluster/&quot; or 
		&quot;myCluster(cells/myCell/clusters/myCluster|cluster.xml#Cluster_1)&quot;
	A node can be specified as:
		&quot;Cell=myCell,Node=myNode&quot; or 
		&quot;/Cell:myCell/Node:myNode/&quot; or 
		&quot;myNode(cells/myCell/nodes/myNode|node.xml#Node_1)&quot; 
	A server can be specified as:
		&quot;Cell=myCell,Node=myNode,Server=myServer&quot; or 
		&quot;/Cell:myCell/Node:myNode/Server:myServer/&quot; or 
		&quot;myServer(cells/myCell/nodes/myNode/servers/myServer|server.xml#Server_1)&quot; 
	The script procedures that take the optional arguments can be specified
	with a list or string format: 
	for example, otherAttributeList can be specified as:
		&quot;description=my new resource, isolatedClassLoader=true&quot; or 
		[[&quot;description&quot;, &quot;my new resource&quot;], [&quot;isolatedClassLoader&quot;, &quot;true&quot;]] 


createDataSource:
	Create a new data source in your configuration.

createJDBCProviderAtScope:
	Create a new JDBC provider in your environment on the specified scope.

createDataSourceUsingTemplate:
	Use a template to create a new data source in your configuration.

createJDBCProviderUsingTemplateAtScope:
	Use a template to create a new JDBC provider in your environment on the specified scope.

createJDBCProvider:
	Create a new JDBC provider in your environment.

createDataSourceAtScope:
	Create a new data source in your configuration on the specified scope.

createJDBCProviderUsingTemplate:
	Use a template to create a new JDBC provider in your environment.

createDataSourceUsingTemplateAtScope:
	Use a template to create a new data source in your configuration on the specified scope.

listDataSources:
	Display a list of configuration IDs for the data sources in your configuration.

listDataSourceTemplates:
	Display a list of configuration IDs for the data source templates in your environment.

listJDBCProviders:
	Display a list of configuration IDs for the JDBC providers in your environment.

listJDBCProviderTemplates:
	Display a list of configuration IDs for the JDBC provider templates in your environment.

help:
	Display AdminJDBC script library online help.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL6047E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6047E" varFormat="Java">
    WASL6047E=WASL6047E: The {0} type of object does not exist.
  </MsgText>
  <Explanation>
    The parent object does not exist in your configuration.  The script procedure can not run.
  </Explanation>
  <UserResponse>
    Verify that the parent object exists and is able to create a child object.
  </UserResponse>
</Message>
<Message ID="WASL6046E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6046E" varFormat="Java">
    WASL6046E=WASL6046E: The system can not create the {0} object because it already exists in your configuration.
  </MsgText>
  <Explanation>
    The specified object exists in your configuration.
  </Explanation>
  <UserResponse>
    Verify that the object to create does not exist, or create an object that does not exist in your environment.
  </UserResponse>
</Message>
<Message ID="WASL6045E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6045E" varFormat="Java">
    WASL6045E=WASL6045E: Multiple {0} objects exist in your configuration.
  </MsgText>
  <Explanation>
    The system can not determine the object to configure because multiple objects exist in your configuration.
  </Explanation>
  <UserResponse>
    Verify that only one of the object of interest exists in your configuration.  The script procedure can not determine the correct object to use.
  </UserResponse>
</Message>
<Message ID="WASL0006I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINJ2C_GENERAL_HELP" varFormat="Java">
    ADMINJ2C_GENERAL_HELP=WASL0006I: The AdminJ2C script library provides script
	procedures that configure and query J2EE Connector (J2C) resource settings.

	The AdminJ2C script library provides the following script procedures.
	To display detailed information about each procedure, use the help command
	for the AdminJ2C script library, specifying the name of the script of interest
	as an argument. 
	The script procedures that take the optional arguments can be specified
	with a list or string format: 
	for example, otherAttributeList can be specified as:
		&quot;description=my new resource, isolatedClassLoader=true&quot; or 
		[[&quot;description&quot;, &quot;my new resource&quot;], [&quot;isolatedClassLoader&quot;, &quot;true&quot;]] 


createJ2CActivationSpec:
	Create a J2C activation specification in your configuration.

createJ2CAdminObject:
	Create a J2C administrative object in your configuration.

createJ2CConnectionFactory:
	Create a new J2C connection factory in your configuration.

installJ2CResourceAdapter:
	Install a J2C resource adapter in your configuration.

listAdminObjectInterfaces:
	Display a list of the administrative object interfaces for the J2C resource adapter of interest.

listConnectionFactoryInterfaces:
	Display a list of the connection factory interfaces for the J2C resource adapter of interest.

listMessageListenerTypes:
	Display a list of the message listener types for the J2C resource adapter of interest.

listJ2CActivationSpecs:
	Display a list of the J2C activation specifications in your J2C configuration.

listJ2CAdminObjects:
	Display a list of the administrative objects in your J2C configuration.

listJ2CConnectionFactories:
	Display a list of J2C connection factories in your J2C configuration.

listJ2CResourceAdapters:
	Display a list of the J2C connection factories in your J2C configuration.

help:
	Provide AdminJ2C script library online help.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0001I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINAPPLICATION_GENERAL_HELP" varFormat="Java">
    ADMINAPPLICATION_GENERAL_HELP=WASL0001I: The AdminApplication script library provides script
	procedures that configure, administer, and deploy applications.

	The Adminapplication script library provides the following script procedures.
	To display detailed information about each script procedure, use the help command 
	for the AdminApplication script library, specifying the name of the script of interest 
	as an argument.


Group 1: Install and uninstall applications

installAppModulesToDiffServersWithPatternMatching:
	Install application modules to different
	application servers using Java pattern matching

installAppModulesToDiffServersWithMapModulesToServersOption:
	Install application modules to
	different application servers with MapModulesToServers option for the AdminApp object.

installAppModulesToMultiServersWithPatternMatching:
	Install application modules to multiple
	application servers using Java pattern matching.

installAppModulesToSameServerWithPatternMatching:
	Install application modules to the same
	application server using Java pattern matching.

installAppModulesToSameServerWithMapModulesToServersOption:
	Install application modules to the same application server
	using the MapModulesToServers option for the AdminApp object.

installAppWithClusterOption:
	Install application to a cluster using the cluster option for the AdminApp object.

installAppWithDefaultBindingOption:
	Install application using the default binding options.

installAppWithDeployEjbOptions:
	Install application using the deployejb option for the AdminApp object.

installAppWithNodeAndServerOptions:
	Install application using the node and server options for the AdminApp object.

installAppWithTargetOption:
	Install application using the target option for the AdminApp object.

installAppWithVariousTasksAndNonTasksOptions:
	Install application using different deployed tasks.

installWarFile:
	Install a Web archive (WAR) file.

uninstallApplication:
	Uninstall application.

Group 2: Queries application configurations

checkIfAppExists:
	Display whether the application exists.

getAppDeployedNodes:
	Display the nodes on which the application is deployed.

getAppDeploymentTarget:
	Display the deployment target for the application.

getTaskInfoForAnApp:
	Display detailed task information for a specific install task.

help:
	Provides general help information for the AdminApplication script library.

listApplications:
	Display each deployed application in your configuration.

listApplicationsWithTarget:
	Display each deployed application for the deployment target.

listModulesInAnApp:
	Display each application module in the deployed application.

Group 3: Update applications

addPartialAppToAnAppWithUpdateCommand:
	Update a partial application to a deployed application.

addSingleFileToAnAppWithUpdateCommand:
	Add a single file to a deployed application.

addSingleModuleFileToAnAppWithUpdateCommand:
	Add a single module file to a deployed application.

addUpdateSingleModuleFileToAnAppWithUpdateCommand:
	Add and updates a single module file to a deployed application.

deletePartialAppToAnAppWithUpdateCommand:
	Delete a partial application from a deployed application.

deleteSingleFileToAnAppWithUpdateCommand:
	Delete a single file in a deployed application.

deleteSingleModuleFileToAnAppWithUpdateCommand:
	Delete a single module file from a deployed application.

updateApplicationUsingDefaultMerge:
	Update application using default merging

updateApplicationWithUpdateIgnoreNewOption:
	Update application using the update.ignore.new option for the AdminApp object.

updateApplicationWithUpdateIgnoreOldOption:
	Update application using the update.ignore.old option for the AdminApp objects.

updateEntireAppToAnAppWithUpdateCommand:
	Update an entire application to a deployed application.

updatePartialAppToAnAppWithUpdateCommand:
	Update a partial application to a deployed application.

updateSingleFileToAnAppWithUpdateCommand:
	Update a single file to a deployed application.

updateSingleModuleFileToAnAppWithUpdateCommand:
	Update a single module file to a deployed application.

Group 4: Export applications

exportAllApplicationsToDir:
	Export  each application in your configuration to a specific directory.

exportAnAppDDLToDir:
	Export  application data definition language (DDL) to a specific directory.

exportAnAppToFile:
	Export  application to a specific file.

Group 5: Configure application deployment

configureApplicationLoading:
	Configure the application loading for the deployed targets.

configureClassLoaderLoadingModeForAnApplication:
	Configure class loader loading mode for application deployment.

configureClassLoaderPolicyForAnApplication:
	Configure a class loader policy for application deployment.

configureConnectorModulesOfAnApplication:
	Configure connector module attributes for application deployment.

configureEJBModulesOfAnApplication:
	Configure enterprise bean (EJB) module settings for application deployment.

configureLibraryReferenceForAnApplication:
	Configure shared library reference for the application.

configureSessionManagementForAnApplication:
	Configure session management settings for application deployment.

configureStartingWeightForAnApplication:
	Configure starting weight settings for application deployment.

configureWebModulesOfAnApplication:
	Configure Web modules settings for application deployment.

Group 6: Administer applications

startApplicationOnAllDeployedTargets:
	Start an application on each deployed target.

startApplicationOnCluster:
	Start an application on a cluster.

startApplicationOnSingleServer:
	Start an application on a single server.

stopApplicationOnAllDeployedTargets:
	Stop an application on each deployed target.

stopApplicationOnCluster:
	Stop an application on a cluster.

stopApplicationOnSingleServer:
	Stop an application on single server
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL6044E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6044E" varFormat="Java">
    WASL6044E=WASL6044E: The {0}:{1} MBean is not running.
  </MsgText>
  <Explanation>
    The MBean of interest is not running. The system can not stop the MBean.
  </Explanation>
  <UserResponse>
    Verify the status of the MBean.  The system can not stop the MBean if it is not running.
  </UserResponse>
</Message>
<Message ID="WASL6043E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6043E" varFormat="Java">
    WASL6043E=WASL6043E: The {0}:{1} MBean is running.
  </MsgText>
  <Explanation>
    The MBean of interest is running. The system can not start the MBean.
  </Explanation>
  <UserResponse>
    Verify the status of the MBean.  The system can not start teh MBean if it is running.
  </UserResponse>
</Message>
<Message ID="WASL0004I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINNODEGROUPMANAGEMENT_GENERAL_HELP" varFormat="Java">
    ADMINNODEGROUPMANAGEMENT_GENERAL_HELP=WASL0004I: The AdminNodeGroupManagement script library provides script
	procedures that configure and administer node group settings.

	The AdminNodeGroupManagement script library provides the following script procedures. 
	To display detailed information about each script procedure, use the help command for
	the AdminNodeGroupManagement script library, specifying the name of the script of interest
	as an argument.


addNodeGroupMember:
	Add a node to a node group that exists in your configuration.

checkIfNodeExists:
	Display whether the node of interest exists in a specific node group.

checkIfNodeGroupExists:
	Display whether a specific node group exists in your configuration.

createNodeGroup:
	Create a new node group in your configuration.

createNodeGroupProperty:
	Assigns custom properties to the node group of interest.

deleteNodeGroup:
	Delete a node group from your configuration.

deleteNodeGroupMember:
	Remove a node from a specific node group in your configuration.

deleteNodeGroupProperty:
	Remove a specific custom property from a node group.

help:
	Display the script procedures that the AdminNodeGroupManagement script library supports.
	To display detailed help for a specific script, specify the name of the script of interest.

listNodeGroupMembers:
	List the name of each node that is configured within a specific node group.

listNodeGroupProperties:
	List the custom properties that are configured within a specific node group.

listNodeGroups:
	Display the node groups that exist in your configuration.
	If you specify the name of a specific node, the script returns the name of the node group to which the node belongs.

modifyNodeGroup:
	Modify the short name and description of a node group.

modifyNodeGroupProperty:
	modifies the value of a custom property assigned to a node group.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0003I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINCLUSTERMANAGEMENT_GENERAL_HELP" varFormat="Java">
    ADMINCLUSTERMANAGEMENT_GENERAL_HELP=WASL0003I: The AdminClusterManagement script library provides the script
	procedures that configure and administer server clusters.

	The AdminClusterManagement script library provides the following script procedures. 
	To display detailed information about each script procedure, use the help command for
	the AdminClusterManagement script library, specifying the name of the script of interest
	as an argument.


checkIfClusterExists:
	Display whether the cluster of interest exists in your configuration.

checkIfClusterMemberExists:
	Display whether the cluster server member of interest exists in your configuration.

createClusterMember:
	Assigns a server cluster member to a specific cluster. When you create the first cluster member,
	a copy of that member is stored as part of the cluster data and becomes the template for all additional cluster members that you create.

createClusterWithFirstMember:
	Create a new cluster configuration and adds the first cluster member to the cluster.

createClusterWithoutMember:
	Create a new cluster configuration in your environment.

createFirstClusterMemberWithTemplate:
	Use a template to add the first server cluster member to a specific cluster.
	A copy of the first cluster member that you create is stored in the cluster scope as a template.

createFirstClusterMemberWithTemplateNodeServer:
	Use a node with an existing application server as a template to create a new cluster member in your configuration.
	When you create the first cluster member, a copy of that member is stored as part of the cluster data and
	becomes the template for all additional cluster members that you create.

deleteCluster:
	Delete the configuration of a server cluster.
	A server cluster consists of a group of application servers that are referred to as cluster members.
	The script deletes the server cluster and each of its cluster members.

deleteClusterMember:
	Remove a cluster member from your cluster configuration.

help:
	Provides AdminClusterManagement script library online help.

immediateStopAllRunningClusters:
	Stop the server cluster members for each active cluster within a specific cell.
	The server ignores any current or pending tasks.

immediateStopSingleCluster:
	Stop the server cluster members for a specific cluster within a cell.
	The server ignores any current or pending tasks.

listClusterMembers:
	Display the server cluster members that exist in a specific cluster configuration.

listClusters:
	Display each cluster that exists in your configuration.

rippleStartAllClusters:
	Stop and restarts each cluster within a cell configuration.

rippleStartSingleCluster:
	Stop and restarts the cluster members within a specific cluster configuration.

startAllClusters:
	Start each cluster within a cell configuration.

startSingleCluster:
	Start a specific cluster in your configuration.

stopAllClusters:
	Stop the server cluster members of each active cluster within a specific cell.
	Each server stops in a manner that allows the server to finish existing requests and allows failover to another member of the cluster.

stopSingleCluster:
	Stop the server cluster members of a specific active cluster within a cell.
	Each server stops in a manner that allows the server to finish existing requests and allows failover to another member of the cluster.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0009I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINNODEMANAGEMENT_GENERAL_HELP" varFormat="Java">
    ADMINNODEMANAGEMENT_GENERAL_HELP=WASL0009I: The AdminNodeManagement script library provides the script
	procedures that configure and administer node group settings.

	The AdminNodeManagement script library provides the following script procedures. 
	To display detailed information about each script procedures, use the help command for
	the AdminNodeManagement script library, specifying the name of the script of interest
	as an argument.



configureDiscoveryProtocolOnNode:
	Configure the node discovery protocol

doesNodeExist:
	Check if node exist in the cell

isNodeRunning:
	Check if node is running

listNodes:
	List available nodes in the cell

restartActiveNodes:
	Restart all running nodes in the cell

restartNodeAgent:
	Restart all running processes in the specified node

stopNode:
	Stop all the proceses in the specified node, including nodeagent and application servers

stopNodeAgent:
	Stop the nodeagent process in the specified node

syncActiveNodes:
	Synchronize all running nodes repository with the cell repository

syncNode:
	Synchronize the specified node repository with the cell repository

help:
	Provide AdminNodeManagement script library online help
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL6042E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6042E" varFormat="Java">
    WASL6042E=WASL6042E: The {0} object was not found in the configuration.
  </MsgText>
  <Explanation>
    The object does not exist in the configuration.
  </Explanation>
  <UserResponse>
    Verify that the object exists in the configuration.
  </UserResponse>
</Message>
<Message ID="WASL0010I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINRESOURCES_GENERAL_HELP" varFormat="Java">
    ADMINRESOURCES_GENERAL_HELP=WASL0010I: The AdminResources script library provides the script
	procedures that configure and administer mail, URL and resource provider settings.

	The AdminResources script library provides the following script procedures.
	To display detailed information about each script procedures, use the help command
	for the AdminResources script library, specifying the name of the script of interest
	as an argument.
	The script procedures that take the scope argument can be specified 
	in the following formats (Cell, Node, Server, Cluster): 
	for example, a cluster can be specified as:
		&quot;Cell=myCell,Cluster=myCluster&quot; or 
		&quot;/Cell:myCell/ServerCluster:myCluster/&quot; or 
		&quot;myCluster(cells/myCell/clusters/myCluster|cluster.xml#Cluster_1)&quot;.
	A node can be specified as:
		&quot;Cell=myCell,Node=myNode&quot; or 
		&quot;/Cell:myCell/Node:myNode/&quot; or 
		&quot;myNode(cells/myCell/nodes/myNode|node.xml#Node_1)&quot;
	A server can be specified as:
		&quot;Cell=myCell,Node=myNode,Server=myServer&quot; or 
		&quot;/Cell:myCell/Node:myNode/Server:myServer/&quot; or 
		&quot;myServer(cells/myCell/nodes/myNode/servers/myServer|server.xml#Server_1)&quot;
	The script procedures that take the optional arguments can be specified
	with a list or string format: 
	for example, otherAttributeList can be specified as:
		&quot;description=my new resource, isolatedClassLoader=true&quot; or 
		[[&quot;description&quot;, &quot;my new resource&quot;], [&quot;isolatedClassLoader&quot;, &quot;true&quot;]] 


createCompleteMailProvider:
	Create a mail provider with protocol provider, mail session and custom property

createCompleteMailProviderAtScope:
	Create a mail provider with protocol provider, mail session and custom property at the scope

createCompleteResourceEnvProvider:
	Create a resource environment provider with resource environment referenceable, resource environment entry and custom property

createCompleteResourceEnvProviderAtScope:
	Create a resource environment provider with resource environment referenceable, resource environment entry and custom property at the scope

createCompleteURLProvider:
	Create an URL provider with URL and customer property

createCompleteURLProviderAtScope:
	Create an URL provider with URL and customer property at the scope

createJAASAuthenticationAlias:
	Create JAAS authentication alias

createLibraryRef:
	Create library reference

createMailProvider:
	Create a mail provider

createMailProviderAtScope:
	Create a mail provider at the scope

createMailSession:
	Create a mail session for mail provider

createMailSessionAtScope:
	Create a mail session for mail provider at the scope

createProtocolProvider:
	Create a protocol provider for the mail provider

createProtocolProviderAtScope:
	Create a protocol provider for the mail provider at the scope

createResourceEnvEntries:
	Create resource environment entry

createResourceEnvEntriesAtScope:
	Create resource environment entry at the scope

createResourceEnvProvider:
	Create a resource environment provider

createResourceEnvProviderAtScope:
	Create a resource environment provider at the scope

createResourceEnvProviderRef:
	Create resource environment provider referenceable

createResourceEnvProviderRefAtScope:
	Create resource environment provider referenceable at the scope

createScheduler:
	Create a scheduler resource

createSchedulerAtScope:
	Create a scheduler resource at the scope

createSharedLibrary:
	Create shared library

createSharedLibraryAtScope:
	Create shared library at the scope

createURL:
	Create new URL for url provider

createURLAtScope:
	Create new URL for url provider at the scope

createURLProvider:
	Create URL provider

createURLProviderAtScope:
	Create URL provider at the scope

createWorkManager:
	Create work manager

createWorkManagerAtScope:
	Create work manager at the scope

help:
	Provide AdminResources script library online help
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0005I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINAUTHORIZATIONS_GENERAL_HELP" varFormat="Java">
    ADMINAUTHORIZATIONS_GENERAL_HELP=WASL0005I: The AdminAuthorizations script library provides script
	procedures that configure security authorization groups.

	The AdminAuthorizations script library provides the following script procedures.
	To display detailed information about each script procedure, use the help command for
	the AdminAuthorizations script library, specifying the name of the script of interest
	as an argument.


addResourceToAuthorizationGroup:
	Add a resource to an existing authorization group.

createAuthorizationGroup:
	Create a new authorization group.

deleteAuthorizationGroup:
	Delete an existing authorization group.

help:
	Display the script procedures that the AdminClusterManagement script library supports.
	To display detailed help for a specific script, specify the name of the script of interest

listAuthorizationGroups:
	List the existing authorization groups in your configuration.

listAuthorizationGroupsForGroupID:
	List authorization groups to which a specific group has access.

listAuthorizationGroupsForUserID:
	List authorization groups to which a specific user has access.

listAuthorizationGroupsOfResource:
	List each authorization group to which a specific resource is mapped.

listGroupIDsOfAuthorizationGroup:
	Display the group IDs and access level that are associated with a specific authorization group.

listResourcesForGroupID:
	Display the resources that a specific group ID can access.

listResourcesForUserID:
	Display the resources that a specific user ID can access.

listResourcesOfAuthorizationGroup:
	Display the resources that are associated with a specific authorization group.

listUserIDsOfAuthorizationGroup:
	Display the user IDs and access level that are associated with a specific authorization group.

mapGroupsToAdminRole:
	Map group IDs to one or more administrative roles in the authorization group.
	The name of the authorization group that you provide determines the authorization table.
	The group ID can be a short name or fully qualified domain name in case LDAP user registry is used.

mapUsersToAdminRole:
	Map user IDs to one or more administrative roles in the authorization group.
	The name of the authorization group that you provide determines the authorization table.
	The user ID can be a short name or fully qualified domain name in case LDAP user registry is used.

removeGroupFromAllAdminRoles:
	Remove a specific group from an administrative role in each authorization group in your configuration.

removeGroupsFromAdminRole:
	Remove specific groups from an administrative role in the authorization group of interest.

removeResourceFromAuthorizationGroup:
	Remove a specific resource from the authorization group of interest.

removeUsersFromAdminRole:
	Remove specific users from an administrative role in the authorization group of interest.

removeUserFromAllAdminRoles:
	Remove a specific user from an administrative role in each authorization group in your configuration.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL6041E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6041E" varFormat="Java">
    WASL6041E=WASL6041E: The following argument value is not valid: {0}:{1}.
  </MsgText>
  <Explanation>
    The argument value is not valid. Do not specify argument value as a null or empty string.
  </Explanation>
  <UserResponse>
    Run the script library procedure again, and specify the correct argument value.
  </UserResponse>
</Message>
<Message ID="WASL6040E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6040E" varFormat="Java">
    WASL6040E=WASL6040E: The {0}:{1} specified argument does not exist.
  </MsgText>
  <Explanation>
    The argument that you specified does not exist.
  </Explanation>
  <UserResponse>
    Use the AdminUtilities.help(scriptName) Jython command to display the arguments for script to run. Verify that you specify the correct arguments.
  </UserResponse>
</Message>
<Message ID="WASL0013I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINUTILITIES_GENERAL_HELP" varFormat="Java">
    ADMINUTILITIES_GENERAL_HELP=WASL0013I: The AdminUtilities script library provides the script
	procedures that administer utilities settings.

	The AdminUtilities script library provides the following script procedures. 
	To display detailed information about each script procedures, use the help command
	for the AdminUtilities script library, specifying the name of the script of interest
	as an argument.


convertToList:
	Convert string to list

configureAutoSave:
	Configure the configuration automation save

debugNotice:
	Set debug notice

getExceptionText:
	Get exception text

fail:
	failure message

fileSearch:
	Recrusive file search

getResourceBundle:
	Get resource bundle

getScriptLibraryFiles:
	Get the script library files

getScriptLibraryList:
	Get the script library names of list

getScriptLibraryPath:
	Get the script library path

help:
	Provide online help

infoNotice:
	Set information notice

save:
	Save all configuration change

setDebugNotices:
	Set debug notice

setFailOnErrorDefault:
	Set failonerror default

sleepDelay:
	Set sleep delay

warningNotice:
	Set warning notice
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0012I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINLIBHELP_GENERAL_HELP" varFormat="Java">
    ADMINLIBHELP_GENERAL_HELP=WASL0012I: The AdminLibHelp provides general help information for the
	Jython script libraries for the wsadmin tool.

	Each script library contains multiple script procedures that perform
	various administration functions. To display detailed information
	for a specific script library, use the help option for the 
	AdminLibHelp object, specifying the script library of interest as
	an argument. For example, AdminLibHelp.help(&quot;AdminApplication&quot;)
	returns the detailed information for the AdminApplication script
	library.


AdminApplication:	Provide script procedures that configure,
			administer and deploy applications.
AdminAuthorizations:	Provide script procedures that configure
			security authorization groups.

AdminBLA:		Provide script procedures that configure, administer
			and deploy business level applications.
AdminClusterManagement:	Provide script procedures that configure
			and administer server clusters.
AdminJ2C:		Provide script procedures that configure and query
			J2EE Connector (J2C) resource settings.
AdminJDBC:		Provide scirpt procedures that configure and query
			Java Database Connectivity (JDBC) and data source settings.
AdminJMS:		Provide script procedures that configure and query
			Java Messaging Service (JMS) provider and resource setttings.

AdminLibHelp:		Provide general help information for the the script
			library.
AdminNodeGroupManagement:	Provide script procedures that configure
			and administer node group settings.
AdminNodeManagement:	Provide script procedures that configure and
			administer node settings.
AdminResources:		Provide script procedures that configure and
			administer mail, URL and resource provider settings.
AdminServerManagement:	Provide script procedures that configure,
			administer and query server settings.
AdminUtilities:		Provide scipt procedures that administer utilities
			settings.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0008I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINJMS_GENERAL_HELP" varFormat="Java">
    ADMINJMS_GENERAL_HELP=WASL0008I: The AdminJMS script library provides the script
	procedures that configure and query Java Messaging Services (JMS) provider and resource settings.

	The AdminJMS script library provides the following script procedures. 
	To display detailed information about each script library, use the help command
	for the AdminJMS script library, specifying the name of the script of interest
	as an argument.
	The script procedures that take the scope argument can be specified 
	in following formats (Cell, Node, Server, Cluster): 
	for example, a cluster can be specified as:
		&quot;Cell=myCell,Cluster=myCluster&quot; or 
		&quot;/Cell:myCell/ServerCluster:myCluster/&quot; or 
		&quot;myCluster(cells/myCell/clusters/myCluster|cluster.xml#Cluster_1)&quot; 
	A node can be specified as:
		&quot;Cell=myCell,Node=myNode&quot; or 
		&quot;/Cell:myCell/Node:myNode/&quot; or 
		&quot;myNode(cells/myCell/nodes/myNode|node.xml#Node_1)&quot;
	A server can be specified as:
		&quot;Cell=myCell,Node=myNode,Server=myServer&quot; or 
		&quot;/Cell:myCell/Node:myNode/Server:myServer/&quot; or 
		&quot;myServer(cells/myCell/nodes/myNode/servers/myServer|server.xml#Server_1)&quot;
	The script procedures that take the optional arguments can be specified
	with a list or string format: 
	for example, otherAttributeList can be specified as:
		&quot;readAhead=AlwaysOff, maxBatchSize=54&quot; or 
		[[&quot;readAhead&quot;, &quot;AlwaysOff&quot;], [&quot;maxBatchSize&quot;, 54]] 


createGenericJMSConnectionFactory:
	Create a new GenericJMSConnectionFactory

createGenericJMSConnectionFactoryAtScope:
	Create a new GenericJMSConnectionFactory on the specified scope

createGenericJMSConnectionFactoryUsingTemplate:
	Create a new GenericJMSConnectionFactory using template

createGenericJMSConnectionFactoryUsingTemplateAtScope:
	Create a new GenericJMSConnectionFactory using template on the specified scope

createGenericJMSDestination:
	Create a new GenericJMSDestination

createGenericJMSDestinationAtScope:
	Create a new GenericJMSDestination on the specified scope

createGenericJMSDestinationUsingTemplate:
	Create a new GenericJMSDestination using template

createGenericJMSDestinationUsingTemplateAtScope:
	Create a new GenericJMSDestination using template on the specified scope

createJMSProvider:
	Create a new JMSProvider

createJMSProviderAtScope:
	Create a new JMSProvider on the specified scope

createJMSProviderUsingTemplate:
	Create a new JMSProvider using template

createJMSProviderUsingTemplateAtScope:
	Create a new JMSProvider using template on the specified scope

createSIBJMSActivationSpec:
	Create a SIB JMS ActivationSpec

createSIBJMSConnectionFactory:
	Create a SIB JMS Connection factory

createSIBJMSQueue:
	Create a SIB JMS Queue

createSIBJMSQueueConnectionFactory:
	Create a SIB JMS Queue Connection factory

createSIBJMSTopic:
	Create a SIB JMS Topic

createSIBJMSTopicConnectionFactory:
	Create a SIB JMS Topic Connection factory

createWASTopic:
	Create a new WASTopic

createWASTopicAtScope:
	Create a new WASTopic on the specified scope

createWASTopicUsingTemplate:
	Create a new WASTopic using template

createWASTopicUsingTemplateAtScope:
	Create a new WASTopic using template on the specified scope

createWASTopicConnectionFactory:
	Create a new WASTopicConnectionFactory

createWASTopicConnectionFactoryAtScope:
	Create a new WASTopicConnectionFactory on the specified scope

createWASTopicConnectionFactoryUsingTemplate:
	Create a new WASTopicConnectionFactory using template

createWASTopicConnectionFactoryUsingTemplateAtScope:
	Create a new WASTopicConnectionFactory using template on the specified scope

createWASQueue:
	Create a new WASQueue

createWASQueueAtScope:
	Create a new WASQueue on the specified scope

createWASQueueUsingTemplate:
	Create a new WASQueueUsingTemplate

createWASQueueUsingTemplateAtScope:
	Create a new WASQueueUsingTemplate on the specified scope

createWASQueueConnectionFactory:
	Create a new WASQueueConnectionFactory

createWASQueueConnectionFactoryAtScope:
	Create a new WASQueueConnectionFactory on the specified scope

createWASQueueConnectionFactoryUsingTemplate:
	Create a new WASQueueConnectionFactory using template

createWASQueueConnectionFactoryUsingTemplateAtScope:
	Create a new WASQueueConnectionFactory using template on the specified scope

createWMQActivationSpec:
	Create a WMQ ActivationSpec

createWMQConnectionFactory:
	Create a WMQ Connection factory

createWMQQueue:
	Create a WMQ Queue

createWMQQueueConnectionFactory:
	Create a WMQ Queue Connection factory

createWMQTopic:
	Create a WMQ Topic

createWMQTopicConnectionFactory:
	Create a WMQ Topic Connection factory

listGenericJMSConnectionFactories:
	List GenericJMSConnectionFactories

listGenericJMSConnectionFactoryTemplates:
	List GenericJMSConnectionFactory templates

listGenericJMSDestinations:
	List GenericJMSDestinations

listGenericJMSDestinationTemplates:
	List GenericJMSDestination templates

listJMSConnectionFactories:
	List JMSConnectionFactories

listJMSDestinations:
	List JMSDestinations

listJMSProviders:
	List JMSProviders

listJMSProviderTemplates:
	List JMSProvider templates

listWASTopics:
	List WASTopics

listWASTopicConnectionFactories:
	List WASTopicConnectionFactories

listWASTopicConnectionFactoryTemplates:
	List WASTopicConnectionFactory templates

listWASTopicTemplates:
	List WASTopic templates

listWASQueues:
	List WASQueues

listWASQueueConnectionFactories:
	List WASQueueConnectionFactories

listWASQueueConnectionFactoryTemplates:
	List WASQueueConnectionFactory templates

listWASQueueTemplates:
	List WASQueue templates

startListenerPort:
	Start the listener port

help:
	Provide AdminJMS script library online help
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL0002I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINSERVERMANAGEMENT_GENERAL_HELP" varFormat="Java">
    ADMINSERVERMANAGEMENT_GENERAL_HELP=WASL0002I: The AdminServerManagement script library provides script
	procedures that configure, administer, and query server settings.

	The AdminServerManagement script library provides the following script procedures.
	To display detailed information about each script procedure, use the help command for
	the AdminServerManagement script library, specifying the name of the script of interest
	as an argument.


Group 1: ServerConfiguration

checkIfServerExists:
	Determine whether the server of interest exists in your configuration.

checkIfServerTemplateExists:
	Determine whether the server template of interest exists in your configuration.

configureApplicationServerClassloader:
	Configure a class loader for the application server.
	Class loaders enable applications that are deployed on the application server to access repositories of available classes and resources.

configureCookieForServer:
	Configure cookies in your application server configuration. Configure cookies to track sessions.

configureCustomProperty:
	Configure custom properties in your application server configuration.
	You can use custom properties for configuring internal system properties which some components use,
	for example, to pass information to a Web container.

configureEndPointsHost:
	Configure the hostname of the server endpoints.

configureProcessDefinition:
	Configure the server process definition.
	Enhance the operation of an application server by defining command-line information for starting
	or initializing the application server process.

configureSessionManagerForServer:
	This script configures the session manager for the application server.
	Sessions allow applications running in a Web container to keep track of individual users.

createApplicationServer:
	Create a new application server.

createAppServerTemplate:
	Create a new application server template.

createGenericServer:
	Create a new generic server.

createWebServer:
	Create a new Web server.

deleteServer:
	Delete a server.

deleteServerTemplate:
	Delete a server template.

getJavaHome:
	Display the Java home value.

getServerPID:
	Display the server process ID.

getServerProcessType:
	Display the type of server process for a specific server. 

listJVMProperties:
	Display the properties that are associated with your Java virtual machine (JVM) configuration.

listServerTemplates:
	Display the server templates in your configuration.

listServerTypes:
	Display the server types available on the node of interest. 

listServers:
	Display the servers that exist in your configuration.

queryMBeans:
	Query the application server for Managed Beans (MBeans).

setJVMProperties:
	Set Java Virtual Machine properties

showServerInfo:
	Display server configuration properties for the server of interest.

startAllServers:
	Start each available server on a specific node.

startSingleServer:
	Start a single server on a specific node.

stopAllServers:
	Stop each running server on a specific node.

stopSingleServer:
	Stop a single running server on a specific node.

viewProductInformation:
	Display the application server product version.

Group 2: ServerTracingAndLoggingConfiguration

configureJavaProcessLogs:
	Configure Java process logs for the application server.
	The system creates the JVM logs by redirecting the System.out and System.err streams of the JVM to independent log files.

configureJavaVirtualMachine:
	Configure a Java virtual machine (JVM).
	The application server, being a Java process, requires a JVM in order to run, and to support the Java applications running on it.

configurePerformanceMonitoringService:
	Configure performance monitoring infrastructure (PMI) in your configuration.

configurePMIRequestMetrics:
	Configure PMI request metrics in your configuration. 

configureRASLoggingService:
	Configure the RAS logging service.

configureServerLogs:
	Configure server logs for the application server of interest.

configureTraceService:
	Configure trace settings for the application server.
	Configure trace to obtain detailed information about running the application server.

setTraceSpecification:
	Set the trace specification for the server.

Group 3: OtherServicesConfiguration

configureAdminService:
	Configure the AdminService interface.
	The AdminService interface is the server-side interface to the application server administration functions.

configureCustomService:
	Configure a custom service in your application server configuration.
	Each custom services defines a class that is loaded and initialized whenever the server starts and shuts down.

configureDynamicCache:
	Configure the dynamic cache service in your server configuration.
	The dynamic cache service works within an application server Java virtual machine (JVM), intercepting calls to cacheable objects.

configureEJBContainer:
	Configure an Enterprise JavaBeans (EJB) container in your server configuration.
	An EJB container provides a run-time environment for enterprise beans within the application server.

configureFileTransferService:
	Configure the file transfer service for the application server.
	The file transfer service transfers files from the deployment manager to individual remote nodes.

configureHTTPTransportEndPointForWebContainer:
	Configure HTTP transport endpoint for a Web container.

configureHTTPTransportForWebContainer:
	Configure HTTP transports for a Web container.
	Transports provide request queues between application server plug-ins for Web servers and Web containers
	in which the Web modules of applications reside.

configureListenerPortForMessageListenerService:
	Configure the listener port for the message listener service in your server configuration.
	The message listener service is an extension to the Java Messaging Service (JMS) functions of the JMS provider.

configureMessageListenerService:
	Configure the message listener service in your server configuration.
	The message listener service is an extension to the Java Messaging Service (JMS) functions of the JMS provider. 

configureORBService:
	Configure an Object Request Broker (ORB) service in your server configuration.
	An Object Request Broker (ORB) manages the interaction between clients and servers, using the Internet InterORB Protocol (IIOP).

configureRuntimeTransactionService:
	Configure the transaction service for your server configuration.
	The transaction service is a server runtime component that coordinates updates to multiple resource managers to ensure atomic updates of data.

configureStateManageable:
	Configure the initial state of the application server.
	The initial state refers to the desired state of the component when the server process starts.

configureThreadPool:
	Configure thread pools in your server configuration.
	A thread pool enables components of the server to reuse threads, which eliminates the need to create new threads at run time.

configureTransactionService:
	Configure the transaction service for your application server. 

configureWebContainer:
	Configure Web containers in your application server configuration.
	A Web container handles requests for servlets, JavaServer Pages (JSP) files, and other types of files that include server-side code.

help:
	Provides AdminServerManagement script library online help.
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<Message ID="WASL6049E" severity="E" prefix="yes">
  <MsgText pgmKey="WASL6049E" varFormat="Java">
    WASL6049E=WASL6049E: The script syntax error. Either the syntax specified for the optional attributes is incorrect or the optional attribute is invalid: {0}.
  </MsgText>
  <Explanation>
    Either the script syntax is specified incorrectly or the optional attribute does not exist.  The script procedure can not run.
  </Explanation>
  <UserResponse>
    Verify that the attribute exists in the optional attributes list or enter the correct syntax.
  </UserResponse>
</Message>
<Message ID="WASL0011I" severity="I" prefix="yes">
  <MsgText pgmKey="ADMINBLA_GENERAL_HELP" varFormat="Java">
    ADMINBLA_GENERAL_HELP=WASL0011I: The AdminBLA script library provides the script
	procedures that configure, administer and deploy business level applications.

	The AdminBLA script library provides the following script procedures. 
	To display detailed information for each script procedures, use the help command
	for the AdminBLA script library, specifying the name of the script of interest
	as an argument.


addCompUnit:
	Add a composition unit to a business level application

createEmptyBLA:
	Create an empty business level application

deleteAsset:
	Delete a registered asset from WebSphere configuration repository

deleteBLA:
	Delete a business level application

deleteCompUnit:
	Delete a composition unit in a business level application

editAsset:
	Edit an asset metadata

editCompUnit:
	Edit a composition unit in a business level application

exportAsset:
	Export a registered asset to a file

help:
	Provide AdminBLA script library online help

importAsset:
	Import and register an asset to WebSphere management domain

listAssets:
	List registered assets in a cell

listBLAs:
	List business level applications in a cell

listCompUnits:
	List composition units in a business level application

startBLA:
	Start a business level application

stopBLA:
	Stop a business level application

viewAsset:
	View a registered asset

viewCompUnit:
	View a composition unit in a business level application
  </MsgText>
  <Explanation>
    None
  </Explanation>
  <UserResponse>
    None
  </UserResponse>
</Message>
<!-- END MESSAGES -->
</TMSSource>
