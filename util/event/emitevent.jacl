###############################################################################
#
# Licensed Materials - Property of IBM
# (C) Copyright IBM Corp. 2004, 2010.  ALL RIGHTS RESERVED 
# 5724-I63, 5724-H88, 5655-N02, 5733-W70
# US Government Users Restricted Rights - Use, duplication, or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
#
# This JACL script sends an event to the event server through an emitter.
#
# Usage:
# Invoke wsadmin and supply the name of this script on the -f parameter.
#wsadmin -f emitevent.jacl
#                          help |
#                          [-xml filename]
#                          [-msg message]
#                          [-severity severity]
#                          [-extensionname extension_name]
#                          [-emitter profile_name]
#                          [-synchronous | -asynchronous]
#                          [-serverName server_name]
#Where   "filename" is an XML file that contains a Common Base Event;
#        "message" is used to set the msg property of the Common Base
#               Event;
#        "severity" is a number between 0 and 70 that is used to set
#               the severity property of the Common Base Event;
#        "extension_name" is the name of an "event class" that this event
#               represents.  It will be used to set the extensionName
#               property of the Common Base Event;
#        "profile_name" is the JNDI name of the emitter factory profile to
#               use to send the event.
#               The default is: com/ibm/events/configuration/emitter/Default;
#        -synchronous  option overrides the preferred synchronization mode in 
#                      the emitter profile to use synchronous event submission
#        -asynchronous option overrides the preferred synchronization mode in 
#                      the emitter profile to use asynchronous event submission
#        "node_name" The name of the node where the Event Service is deployed. 
#               If this parameter is specified, then the serverName parameter must be specified.
#               You must not specify this parameter if the clusterName parameter is specified.
#        "server_name" is the name of an application server to which the Event Service
#               is deployed. This field should only be specified if the Event Service
#               is deployed to multiple application servers on the local WebSphere node.
#        "cluster_name" The name of the cluster where the Event Service is deployed.
#         		You must not specify this parameter if the nodeName or serverName parameter are specified.
#
#       Examples:
#               wsadmin -f emitevent.jacl -xml file:c:/myCBE.xml 
#                -emitter com/ibm/events/configuration/emitter/EmitterProfile1
#
#               wsadmin -f emitevent.jacl -msg "This is a message" -severity 50 -asynchronous
#                -emitter com/ibm/events/configuration/emitter/EmitterProfile1
#
#               wsadmin -f emitevent.jacl -clusterName cluster1
#
#               wsadmin -f emitevent.jacl -nodeName mynode -serverName server1
#-----------------------------------------------------------------------------


#First init the cli helper
set cliHelperObject [java::new com.ibm.events.cli.util.EmitEventCliHelper]

#Add each argument to an array for processing
set argArray [java::new {String[]} [llength $argv]]

set counter 0
foreach {argOpt} $argv  \
{
   $argArray set $counter $argOpt
   set counter [expr $counter+1]
}
        
# Pass the argument array to the CLI helper to be validated.
# If all arguments are valid, the helper returns an array of two objects.
# The first object is a string naming the MBean operation 
# to be called.
# The second object is an array of objects containing arguments to be
# passed to the MBean.
# If any argument is invalid, the helper displays a message and returns null.
set argObjects [$cliHelperObject processEmitArguments $argArray]

# Do nothing if the CLI helper returned null, otherwise call the indicated
# operation on the  MBean
if { [java::isnull $argObjects] == 0 } \
{
    #get the object name for the mbean
    
    #set node $env(local.node)
    set node [[$argObjects get 2] toString]
    if { [string compare $node ""] == 0 } {
    	set node $env(local.node)
    }

    
    #get the server process if specified
    set process [[$argObjects get 3] toString]
 
    
    #get the cluster name if specified
    set clusterName [[$argObjects get 4] toString]


	if {[string compare $clusterName ""] != 0} {
	
	    set clusterid [$AdminConfig getid /ServerCluster:$clusterName]
        set members [$AdminConfig list ClusterMember $clusterid]
	    set clname [$AdminConfig showAttribute $clusterid name]
	
	    if { [llength $members] > 0 } {
	        # Get first cluster member
	        set member [lindex $members 0]
	
	        # get nodename of cluster member
	        set nodename [$AdminConfig showAttribute $member nodeName]
	
			# get the member name
			set mname [$AdminConfig showAttribute $member memberName]
	
	        #puts stdout "Using Node $nodename of cluster member $mname"
				
			set objectName [java::new javax.management.ObjectName [$AdminControl completeObjectName WebSphere:type=EmitEvent,node=$nodename,process=$mname,*]]
	
	    } else {
	         # No cluster member found
	         puts stdout "No cluster member found in cluster $clname"
	         exit
	    }

	} else {
	    if {[string compare $process ""] == 0} {
			set objectName [java::new javax.management.ObjectName [$AdminControl completeObjectName WebSphere:type=EmitEvent,node=$node,*]]
	    } else {
			set objectName [java::new javax.management.ObjectName [$AdminControl completeObjectName WebSphere:type=EmitEvent,node=$node,process=$process,*]]
	    }
	}

    if [expr [string compare $objectName ""] == 0] then \
    {
        set mBeanName EmitEventMBean
        $cliHelperObject reportMBeanNotFound $mBeanName
        exit
    }
    
    java::try \
    {   
        set arguments [java::cast {Object[]} [$argObjects get 0]]
        set argumentSignatures [java::cast {String[]} [$argObjects get 1]]
        
        #call the mbean and assign the return value 
        set events [$AdminControl invoke_jmx $objectName emitEvent $arguments $argumentSignatures ]

        #print out the return value
        $cliHelperObject displayEmitResults [java::cast {String[]} $events]
    } \
    catch {Throwable t} \
    {
       set rc 1
       java::throw t
    }
} \
else {
  set rc 1
}