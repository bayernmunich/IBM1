###############################################################################
#
# Licensed Materials - Property of IBM
# (C) Copyright IBM Corp. 2004, 2010.  ALL RIGHTS RESERVED 
# 5724-I63, 5724-H88, 5655-N02, 5733-W70
# US Government Users Restricted Rights - Use, duplication, or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
#
# This JACL script purges events in the Event Infrastructue enterprise 
# application. 
#
# Usage:
# Invoke wsadmin and supply the name of this script on the -f parameter.
#wsadmin -conntype rmi -port <port> -f eventpurge.jacl       
#                           -seconds seconds |
#                           -end end_time  
#                                              [-group event_group]
#                                              [-severity severity]
#                                              [-extensionname  extension_name]
#                                              [-start start_time] 
#                                              [-size size]  
#                                              [-serverName server_name]
#
#Where   "seconds" deletes events that are older than the specified number of
#               seconds. This field must be specified if an end time is not 
#               specified;
#        "end_time" is a time stamp used to delete only events that occurred
#               before a specified time. The end_time parameter must be a date
#               in the format: CCYY-MM-DDThh:mm:ss. This field must be specified 
#               if seconds is not specified. The time is in UTC unless timezone 
#               has been specified with -/+ as in the following format
#               CCYY-MM-DDThh:mm:ss-05:00 in which the -05:00 signifies 5 hours 
#               behind UTC time;
#        "event_group" is the name of the event group used to purge events;
#        "severity" is the severity number used in the purge to restrict which 
#               events are deleted;
#        "extension_name" is the extension name that is used in the purge 
#               to restrict which events are deleted;
#        "size" is the number of events to remove before a commit is performed;
#        "start_time" is a time stamp used to delete only events that occurred
#                after a specified time. The start_time parameter must be a date
#                in the format: CCYY-MM-DDThh:mm:ss. The time is in UTC unless 
#                timezone has been specified with -/+ as in the following format
#                CCYY-MM-DDThh:mm:ss-05:00 in which the -05:00 signifies 5 hours 
#                behind UTC time;			      
#        "node_name" The name of the node where the Event Service is deployed. 
#               If this parameter is specified, then the serverName parameter must be specified.
#               You must not specify this parameter if the clusterName parameter is specified.
#        "server_name" is the name of an application server to which the Event Service
#               is deployed. This field should only be specified if the Event Service
#               is deployed to multiple application servers on the local WebSphere node.
#        "cluster_name" The name of the cluster where the Event Service is deployed.
#         		You must not specify this parameter if the nodeName or serverName parameter are specified.
#
#       Example for purging events:
#               wsadmin
#         -f eventpurge.jacl
#         -group "All events"
#         -seconds 0
#
#               wsadmin -f eventpurge.jacl -clusterName cluster1 -seconds 0
#
#               wsadmin -f eventpurge.jacl -nodeName mynode -serverName server1 -seconds 0
#-----------------------------------------------------------------------------

#First init the cli helper
set cliHelperObject [java::new com.ibm.events.cli.util.EventAccessCliHelper]

#Add each argument to an array for processing
set argArray [java::new {String[]} [llength $argv]]

set counter 0
foreach {argOpt} $argv  \
{
   $argArray set $counter $argOpt
   set counter [expr $counter+1]
}
        
# Pass the argument array to the CLI helper to be validated.
# If all arguments are valid, the helper returns an array of two objects.
# The first object is a string naming the MBean operation 
# to be called.
# The second object is an array of objects containing arguments to be
# passed to the MBean.
# If any argument is invalid, the helper displays a message and returns null.
set argObjects [$cliHelperObject processPurgeArguments $argArray]

# Do nothing if the CLI helper returned null, otherwise call the indicated
# operation on the  MBean
if { [java::isnull $argObjects] == 0 } \
{
    #get the object name for the mbean
    #set node $env(local.node)
    set node [[$argObjects get 2] toString]
    if { [string compare $node ""] == 0 } {
    	set node $env(local.node)
    }

    
    #get the server process if specified
    set process [[$argObjects get 3] toString]

    
    #get the cluster name if specified
    set clusterName [[$argObjects get 4] toString]


	if {[string compare $clusterName ""] != 0} {
	
	    set clusterid [$AdminConfig getid /ServerCluster:$clusterName]
        set members [$AdminConfig list ClusterMember $clusterid]
	    set clname [$AdminConfig showAttribute $clusterid name]
	
	    if { [llength $members] > 0 } {
	        # Get first cluster member
	        set member [lindex $members 0]
	
	        # get nodename of cluster member
	        set nodename [$AdminConfig showAttribute $member nodeName]
	
			# get the member name
			set mname [$AdminConfig showAttribute $member memberName]
	
	        #puts stdout "Using Node $nodename of cluster member $mname"
				
			set objectName [java::new javax.management.ObjectName [$AdminControl completeObjectName WebSphere:type=EventAccess,node=$nodename,process=$mname,*]]
	
	    } else {
	         # No cluster member found
	         puts stdout "No cluster member found in cluster $clname"
	         exit
	    }
	} else {
	    if {[string compare $process ""] == 0} {
			set objectName [java::new javax.management.ObjectName [$AdminControl completeObjectName WebSphere:type=EventAccess,node=$node,*]]
	    } else {
			set objectName [java::new javax.management.ObjectName [$AdminControl completeObjectName WebSphere:type=EventAccess,node=$node,process=$process,*]]
	    }
	}
    
    if [expr [string compare $objectName ""] == 0] then {
        set mBeanName EventAccessMBean
        $cliHelperObject reportMBeanNotFound $mBeanName
        exit
    }
    
    java::try \
    {
        set arguments [java::cast {Object[]} [$argObjects get 0]]
        set argumentSignatures [java::cast {String[]} [$argObjects get 1]]
    
        #call the mbean and assign thee return value 
        set numberEvents [$AdminControl invoke_jmx $objectName purgeEvents $arguments $argumentSignatures]

        #print out the return value
        $cliHelperObject displayPurgeResults $numberEvents
    } \
    catch {Throwable t} \
    {
       set rc 1
       java::throw t
    }
} \
else {
  set rc 1
}