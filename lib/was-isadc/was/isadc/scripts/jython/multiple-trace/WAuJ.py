#----------------------------------------------------------------------
# Name: WAuJ.py
# From: WebSphere Application Server Administration using Jython
#   By: Robert A. (Bob) Gibson [rag], Arthur Kevin McGrath, Noel J. Bergman
# ISBN: 0-13-700952-6
# Role: profile script to prepare wsadmin environment better
# History:
#   date   ver who what
# -------- --- --- ----------------------------------------------------
# 10/09/29 0.2 rag Add - Look for -profile *WAuJ.py command line option
#                        as suggested by Pete Neergaard <jpn@us.ibm.com>
#                        import WAuJ_utilities as WAuj;   # if possible
# 09/10/29 0.1 rag Fix - Added ISBN detail
# 09/10/25 0.0 rag New - For the book
#----------------------------------------------------------------------

from __future__ import nested_scopes

#----------------------------------------------------------------------
# Name: msg()
# Role: Display the specified text message, but only if the global
#      "quiet" variable has a "false" value.
#----------------------------------------------------------------------
def msg( text ) :
  if not quiet :
    print text

#----------------------------------------------------------------------
# Add references for the WebSphere Admin objects to sys.modules
#----------------------------------------------------------------------
WSASobjects = { 'AdminApp'     : AdminApp    ,
                'AdminConfig'  : AdminConfig ,
                'AdminControl' : AdminControl,
                'Help'         : Help
              }
avail = 'Only some';                   # Default - Adminask isn't available

#----------------------------------------------------------------------
# If '-WAuJ' is specified as one of the command line arguments, then
# minimize the output generated by this profile script, and remove the
# value from sys.argv
#----------------------------------------------------------------------
try :
  sys.argv.remove( '-WAuJ' );
  quiet = 1;
except ValueError :
  quiet = 0;

msg( '-' * 79 );
msg( 'Actions performed by WAuJ.py:' );
msg( '> from __future__ import nested_scopes' );

#----------------------------------------------------------------------
# If AdminTask object isn't available, then we can't add a reference...
#----------------------------------------------------------------------
if 'AdminTask' in dir() :
  WSASobjects[ 'AdminTask' ] = AdminTask;
  avail = 'All';

#----------------------------------------------------------------------
# Shallow copy of the name/value pairs from the WSASobjects dictionary
# to the sys.modules dictionary.
#----------------------------------------------------------------------
sys.modules.update( WSASobjects );

#----------------------------------------------------------------------
# Display a message indicating how many of the Admin objects are available
#----------------------------------------------------------------------
msg( '> sys.modules.update( WSASobjects )  # %s admin objects added' % avail )

#----------------------------------------------------------------------
# Remove the unnecessary objects from the namespace
#----------------------------------------------------------------------
del WSASobjects, avail;

#----------------------------------------------------------------------
# If sys isn't in sys.modules, add it.
#----------------------------------------------------------------------
if 'sys' not in sys.modules :
  sys.modules[ 'sys' ] = sys;
  msg( "> sys.modules[ 'sys' ] = sys" );

#----------------------------------------------------------------------
# Determine the WebSphere Application Server installation root
# - sys.path[ 1 ] "should" be something like:
#   C:\IBM\WebSphere\AppServer\optionalLibraries\jython\Lib
# - os.sep is the os directory delimiter (e.g., r'\\')
# - wasroot.split( os.sep ) should result in the list of
#   directories (e.g., ['C:', 'IBM', 'WebSphere', 'AppServer',
#     'optionalLibraries', 'jython', 'Lib'])
# - Removing [ 'optionalLibraries', 'jython', 'Lib' ] should leave us
#   with the installation root
# - os.sep.join( ) on this list results in the root installation
#   directory, with no namespace entries to be cleaned up
#----------------------------------------------------------------------
import os;

wasroot = sys.path[ 1 ];
wasroot = os.sep.join( wasroot.split( os.sep )[ :-3 ] );
msg( "> wasroot = r'%s'" % wasroot );

if 'scripts' in os.listdir( wasroot ) :
  sys.path.append( wasroot + os.sep + 'scripts' );
  msg( "> sys.path.append( r'%s' )" % sys.path[ -1 ] );

#----------------------------------------------------------------------
# If -profile .*WAuJ.py was on the commandline, add it's containg
# directory to sys.path (just in case that directory also contains
# WAuJ_utilties.py)
#----------------------------------------------------------------------
import java;
import re;

REpat   = re.compile( '.*-profile ([^ ]*WAuJ.py).*', re.IGNORECASE );
cmdLine = java.lang.System.getenv( 'IBM_JAVA_COMMAND_LINE' );
mo      = REpat.search( cmdLine );     # RegExp Match Object
if mo :
  WAuJ_dir = os.path.dirname( mo.group( 1 ) );
  if WAuJ_dir not in sys.path :
    sys.path.append( WAuJ_dir );
    msg( "> sys.path.append( r'%s' )" % WAuJ_dir );
  del WAuJ_dir;

#----------------------------------------------------------------------
# Try to add the WAuJ utilities module
#----------------------------------------------------------------------
try :
  import WAuJ_utilities as WAuJ;
  msg( '> import WAuJ_utilities as WAuJ' );
except :
  msg( '# Not found: WAuJ_utilities.py' );

#----------------------------------------------------------------------
# Remove the last of the temporary variables & modules (which were
# only needed for only a few things).
#----------------------------------------------------------------------
msg( '-' * 79 )

del os, msg, quiet, java, re, REpat, cmdLine, mo;
