<!-- (C) COPYRIGHT International Business Machines Corp., 2004-2005. All Rights Reserved * Licensed Materials - Property of IBM -->

<!-- This file contains the targets that are specifically used to collect the WAS set core problem 
	 for Solaris platform. It should be included in the WAS set core Ant scripts. 
-->
<project name="was-crash-collect-core-solaris" >

	<dirname property="was.crash.collect.core.solaris.basedir" file="${ant.file.was-crash-collect-core-solaris}"/>
	<dirname property="was.crash.collect.core.solaris.parentdir" file="${was.crash.collect.core.solaris.basedir}"/>
	<dirname property="was.crash.collect.core.solaris.grandparentdir" file="${was.crash.collect.core.solaris.parentdir}"/>
	<dirname property="was.crash.collect.core.solaris.bundle.basedir" file="${was.crash.collect.core.solaris.grandparentdir}"/>


	<!-- This target is used ot create core file output -->
	<target name="create_solaris_core_output" description="Collect a full core" if="isSunOS">
		<echo file="${autopdtmp}/autopd/TechnoteQualifier.txt" message="1049530" />
		<echo message=" " />
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="yyyy.MM.dd-HH.mm.ss.SSSz" />
		<wsnlsecho key="Create_Solaris_Crash_Ouput" 
			bundle="properties/SSEQTP/autopdtoolstrings_was" 
			message="[{0}] Step {1}: Creating Crash Output for Sun-Solaris..." 
			replace="${autopdts};;${step.count}" 
			id="1000" />
		
<!--		
		<property name="pstack.out.path" value="${autopdtmp}/autopd/pstack.out" />
		<property name="pmap.out.path" value="${autopdtmp}/autopd/pmap.out" />
		<property name="pldd.out.path" value="${autopdtmp}/autopd/pldd.out" />		
		
		<copy file="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/pcommands-template.sh" tofile="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/pcommands-filled.sh" overwrite="true">
			<filterset>
				<filter token="pstack.out" value="${pstack.out.path}" />
				<filter token="pmap.out" value="${pmap.out.path}" />
				<filter token="pldd.out" value="${pldd.out.path}" />
				<filter token="core.path" value="${core.file.path}" />
			</filterset>
		</copy>

		<exec executable="sh" dir="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris" output="${autopd.echolog.instance}" append="true" >
			<arg line=" -f ${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/pcommands-filled.sh" />
		</exec>	
		
		<property name="dbxtrace.out.path" value="${autopdtmp}/autopd/dbxtrace.out" />  		
		<copy file="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/mydbxtrace-template.sh" tofile="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/mydbxtrace-filled.sh" overwrite="true">
			<filterset>
				<filter token="dbxtrace.path" value="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/dbxtrace_sun.sh" />			
				<filter token="dbxtrace.out" value="${dbxtrace.out.path}" />
				<filter token="java.path" value="${was.root}/java/jre/bin/java" />
				<filter token="core.path" value="${core.file.path}" />				
			</filterset>
		</copy>

		<exec executable="sh" dir="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris" output="${autopd.echolog.instance}" append="true">
			<arg line=" -f ${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/mydbxtrace-filled.sh" />
		</exec>	

		<property name="env.out.path" value="${autopdtmp}/autopd/env.out" />				
		<property name="ulimit.out.path" value="${autopdtmp}/autopd/ulimit.out" />
		<property name="uname.out.path" value="${autopdtmp}/autopd/uname.out" />
		<property name="showrev.out.path" value="${autopdtmp}/autopd/showrev.out" />
		<property name="pkginfo.out.path" value="${autopdtmp}/autopd/pkginfo.out" />		
						
		<copy file="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/collect-env-template.sh" tofile="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/collect-env-filled.sh" overwrite="true">
			<filterset>
				<filter token="env.out" value="${env.out.path}" />
				<filter token="ulimit.out" value="${ulimit.out.path}" />
				<filter token="uname.out" value="${uname.out.path}" />
				<filter token="showrev.out" value="${showrev.out.path}" />
				<filter token="pkginfo.out" value="${pkginfo.out.path}" />
			</filterset>
		</copy>
				
		<exec executable="sh" dir="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris" output="${autopd.echolog.instance}" append="true" >
			<arg line=" -f ${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/collect-env-filled.sh" />
		</exec>	

		<property name="gdbtrace.out.path" value="${autopdtmp}/autopd/gdbtrace.out" />  		
		<copy file="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/mygdbtrace-template.sh" tofile="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/mygdbtrace-filled.sh" overwrite="true">
			<filterset>
				<filter token="gdbtrace.path" value="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/gdbtrace.sh" />			
				<filter token="gdbtrace.out" value="${gdbtrace.out.path}" />
				<filter token="java.path" value="${was.root}/java/jre/bin/java" />
				<filter token="core.path" value="${core.file.path}" />				
			</filterset>
		</copy>

		<exec executable="sh" dir="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris" output="${autopd.echolog.instance}" append="true">
			<arg line=" -f ${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/mygdbtrace-filled.sh" />
		</exec>	
--> 
		<copy file="${was.crash.collect.core.solaris.bundle.basedir}/scripts/was/shell/solaris/solaris_crash.sh" 
				tofile="${autopdtmp}/autopd/crash/solaris/solaris_crash-filled.sh" overwrite="true">
			<filterset>
				<filter token="core.path" value="${core.file.path}" />				
				<filter token="pstack_crash.out" value="${autopdtmp}/autopd/crash/solaris/pstack_crash.out" />			
				<filter token="pmap_crash.out" value="${autopdtmp}/autopd/crash/solaris/pmap_crash.out" />
				<filter token="pldd_crash.out" value="${autopdtmp}/autopd/crash/solaris/pldd_crash.out" />
			</filterset>
		</copy>

		<exec executable="sh" 
			  dir="${autopdtmp}/autopd/crash/solaris" 
			  output="${autopd.echolog.instance}" append="true">
			<arg line=" -f ${autopdtmp}/autopd/crash/solaris/solaris_crash-filled.sh" />
		</exec>	
		

	</target>
	
	<!-- This target is used to collect core file and related output -->
	
	<target name="collect_solaris_was_core" description="Collect was core problem" if="isSunOS">
		
		<echo message=" " />
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="yyyy.MM.dd-HH.mm.ss.SSSz" />
		<wsnlsecho key="Collect_Solaris_Crash_Ouput" 
			bundle="properties/SSEQTP/autopdtoolstrings_was" 
			message="[{0}] Step {1}: Collecting Crash Output for Sun-Solaris..." 
			replace="${autopdts};;${step.count}" 
			id="1000" />
<!--
		<echo message=" " />
		<stepcount />
		<autopdtimestamp property="autopdts" pattern="yyyy.MM.dd-HH.mm.ss.SSSz" />
		<wsnlsecho key="Step_collect_core_information_of_Application_Server" 
			bundle="properties/SSEQTP/autopdtoolstrings_was" 
			message="[{0}] Step {1}: Collecting Application Server core information" 
			replace="${autopdts};;${step.count}" 
			id="1044" 
			level="info"
			component="\scripts\was\crash-collect\was-crash-collect-core-solaris.xml"/>
		<wsnlsecho key="Zip_all_log_and_related_information_to_a_zip_file_pmrfilename" 
			bundle="autopdtoolstrings" 
			message="Zipping all log and related information to a zip file: {0}" 
			replace="${pmrfilename}" 
			id="1030" 
			level="info"
			component="\scripts\was\crash-collect\was-crash-collect-core-solaris.xml"/>
--> 
		<trim_filename key="var.adm.trimmed" filename="/var/adm" prefixTrim=".:\\|.:/|..:\\|..:/|/"/>								

		<available file="/var/admin" type="dir" property="var.admin.existing" />

		<condition property="contains.was.jvm.workingdir" >
			<or>
				<equals arg1="${was.jvm.workingDirectory}" arg2="${was.enhanced.root}" />
				<equals arg1="${was.jvm.workingDirectory}" arg2="${was.enhanced.root}/bin" />
			</or>
		</condition>

		<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
			<zipfileset dir="${autopdtmp}/autopd/crash/solaris" prefix="${autopdProblem}" > 
				<include name="solaris_crash_RESULTS.tar.gz" /> 
			</zipfileset> 
<!--			
			<zipfileset file="${pstack.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${pmap.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${pldd.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${dbxtrace.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${env.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${ulimit.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${uname.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${showrev.out.path}" prefix="autopdzip/autopd" />
			<zipfileset file="${pkginfo.out.path}" prefix="autopdzip/autopd" />
--> 						
			<zipfileset dir="${was.enhanced.root}" prefix="autopdzip/${was.enhanced.root}" >
				<include name="javacore*.*" />
			</zipfileset>						
			<zipfileset dir="${was.enhanced.root}/bin" prefix="autopdzip/${was.enhanced.root}/bin" >
				<include name="javacore*.*" />
			</zipfileset>			
<!-- where to find the hs_err_pid*.log -->
		</zip>
		<if isNotTrue="${contains.was.jvm.workingdir}" >
			<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
				<zipfileset dir="${was.jvm.workingDirectory}" prefix="autopdzip/${jvm.working.path.trimmed}" >
					<include name="javacore*.*" />
				</zipfileset>						
			</zip>
		</if>	

		<if isTrue="${var.admin.existing}" >
			<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
	
				<zipfileset dir="/var/admin" prefix="var.adm.trimmed">
					<include name="messages" />
				</zipfileset>
			</zip>			
		</if>

<!-- hs_err_pid.log file --> 
		<zip  encoding="UTF8" destfile="${pmrfilename}" update="true">
			<zipfileset dir="${was.enhanced.root}" prefix="${autopdProblem}">
				<include name="**/hs_err_pid*.log"/>
			</zipfileset>
		</zip> 

		<zip encoding="UTF8" destfile="${pmrfilename}" update="true">
			<zipfileset dir="${core.file.dir}" prefix="${autopdProblem}/Core" > 
				<include name="${core.file.name}" /> 
			</zipfileset> 
		</zip> 
<!--
		<zipfileset file="${core.file.path}" prefix="autopdzip/${core.file.dir.trimmed}" />
--> 		
	</target>
</project>