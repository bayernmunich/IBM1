<?xml version="1.0"?>
<!-- (C) COPYRIGHT International Business Machines Corp., 2004-2005. All Rights Reserved * Licensed Materials - Property of IBM -->

<project name="WAS High CPU Problem" default="autopdmain">

	<taskdef file="${autopdrootdir}/properties/autopdtaskdef.properties" loaderref="ISA"  />

	<dirname property="script.basedir" file="${ant.file.WAS High CPU Problem}" />
	<dirname property="script.parentdir" file="${script.basedir}" />
	<dirname property="bundle.basedir" file="${script.parentdir}" />


	<!-- Targets shared among multiple scripts are in the XML documents *-sharedtargets.xml. 
		The following imports pull these shared targets into this script.
	-->
	<autopdimport file="${bundle.basedir}/scripts/aim/common-setup.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/cpu/was-cpu-aix.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/cpu/was-cpu-linux.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/cpu/was-cpu-solaris.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/cpu/was-cpu-hpux.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/cpu/was-cpu-windows.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/hangs-collect/was-hangs-collect-linux.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/hangs-collect/was-hangs-collect-aix.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/hangs-collect/was-hangs-collect-solaris.xml" />
	<autopdimport file="${bundle.basedir}/scripts/was/hangs-collect/was-hangs-collect-windows.xml" />

	<property file="${bundle.basedir}/properties/SSEQTP/autopd-was-init.properties" />

	<property name="autopdProblem" value="WAS_Hang_OR_High_CPU_Problem" />
	<property name="infocollectProblemType" value="was-cpu" />
	<property name="was_log_redirect.needed" value="true" />
	<property name="app.updated.version" value="true" />
	<property name="taxonomy" value="SSEQTP" />
	<property name="baseTaxonomy" value="SSEQTP" />
	<property name="skip_banner_message" value="true" />

	<!-- This target is the main entry point into the script.  It is the target that is called
		by the AutoPD Tool after this collection type has been selected, and collection in started. 
	-->
	<target name="autopdmain" description="This is AutoPD main to control running steps" 
		depends="load_sharedelements_tasks,
				 set_problem_type_with_nls_bundle,
				 setup_autopd_v2, 
				 validate_os,
		
				 was_stack_custom_init,	
				 terminate_if_server_not_running,
		
		         obtain_was_java_processid,determine_java_version_for_server,
				 get_default_trace_values,
				 determine_verbosegc_enabled,
		         determine_based_on_versions,
		
				 recovery_needed,
			       
		run_aix_high_cpu_targets,
		run_windows_high_cpu_targets,
		run_linux_high_cpu_targets,
		run_solaris_high_cpu_targets,
		run_hpux_high_cpu_targets,
			         
		collect_aix_high_cpu_targets,
		collect_windows_high_cpu_targets,
		collect_linux_high_cpu_targets,
		collect_solaris_high_cpu_targets,
		collect_hpux_high_cpu_targets,
		
		recovery_completed,
		collect_last_three_javacores,
		common_postamble_general_with_ftp">
	</target>

	<!--  disable_jvm_verbose_gc, -->
	<!-- This target provides an alternate entry point into the script.  The AutoPD Tool calls
		this target when it detects that a problem has occurred, so that the script has an
		opportunity to restore the system to the correct state before terminating. 
	-->
	<target name="autopdmainrecovery" description="Recover Portal Server state from AutoPD's failure" depends="collect_was_recovery_common, 
					 restore_user_default_trace_values,
					 recovery_completed">

		<wsnlsecho key="AutoPD_recovery_is_performed" bundle="autopdtoolstrings" message="Automated Problem Determination Tool recovery has been performed" id="2269" level="info" />

	</target>


	<target name="ask_user_reproduce_or_force">

		<autopdinput message="Inform_user_of_two_choices_for_heapdump" validargs="I_have_reproduced_the_problem,Force_heapdump,Quit" addproperty="do.reproduce" bundle="properties/SSEQTP/autopdtoolstrings_was" />

		<wsnlsecho key="do.reproduce" bundle="autopdtoolstrings" message="do.reproduce is {0}" replace="${do.reproduce}" id="2252" level="info" />

		<condition property="force.dump">
			<equals arg1="Force_heapdump" arg2="${do.reproduce}" />
		</condition>

		<condition property="do.pause.abort1">
			<equals arg1="Quit" arg2="${do.reproduce}" />
		</condition>

		<fail if="do.pause.abort1">
			Automated Problem Determination Tool aborted by user.
		</fail>


	</target>

	<target name="generate_heapdump" unless="isWindows">

		<if isTrue="${force.dump}">
			<copy file="${bundle.basedir}/scripts/was/shell/kill-template.sh" tofile="${bundle.basedir}/scripts/was/shell/kill-filled.sh" overwrite="true">
				<filterset>
					<filter token="num" value="-3" />
					<filter token="pid" value="${was.java.process.id}" />
				</filterset>
			</copy>

			<exec executable="sh" dir="${bundle.basedir}/scripts/was/shell" output="${autopd.echolog.instance}" append="true">
				<arg line="-f ${bundle.basedir}/scripts/was/shell/kill-filled.sh" />
			</exec>

		</if>
	</target>

	<target name="run_extra_script">
		<inputdialogtask noCancel="true">
			<fieldtask name="prompt" label="Additional Collection Required" type="prompt" bundle="properties/SSEQTP/autopdtoolstrings_was" />
			<fieldtask name="label" label="Determine if the leak is a Java heap or native memory problem.  If the avaliable memory does not drop, run the Native Leak Problem script.  Otherwise, if the memory in the heap drops over time, run the Heap Leak Problem Script." type="label" bundle="properties/SSEQTP/autopdtoolstrings_was" />
		</inputdialogtask>

	</target>
</project>
