<project name="bootstrapWCCMFiles" default="bootstrapWCCMFiles" basedir=".">

    <taskdef name="wscmtlog"
        classname="com.ibm.ws.install.configmanager.actionengine.ant.utils.AntTaskToLogToConfigManagersLogFiles"/>
    <taskdef name="replaceStringRegExp"
        classname="com.ibm.ws.install.configmanager.actionengine.ant.utils.ReplaceStringRegExpAntTask"/> 
    <taskdef name="n2a" classname="com.ibm.ws.profile.anttasks.Native2AsciiAntTask"/>       

    <property name="nodeAgentServerName" value="nodeagent"/>
    <property name="appServerHost" value="${hostName}"/>  


    <!-- Default to * for Distributed platform -->
    <property name="http.transport.host" value="*"/>

    <target name="setDefaultLocalHostName"
            description="set localhost name string to default value if no value already set">
        <property name="localhostName" value="localhost"/>
        <wscmtlog>Using ${localhostName} string for local host.</wscmtlog>
    </target>

    <target name="zSetTransportHost"
            description="For z/OS only, set http.transport.host to user provided value" if="isCurrentOSzOS">

         <property name="http.transport.host" value="${http.transport.host}"/>
    </target>  

    <!-- Determine whether the node names specified by the user
         are the default strings "DefaultDmgr" and "DefaultNode". If either is,
         there will not be any need to rename that node directory, because when
         it is created, its name already set to the default string. -->
    <target name="detectDefaultNodeNames"
      description="Detects if the node names are set to the default strings" >

        <!-- Set nodeNameIsDefaultDmgr true if the node name is DefaultDmgr. -->
        <wscmtlog>Starting detectDefaultNodeNames with nodeName ${nodeName}</wscmtlog>
        <condition property="nodeNameIsDefaultDmgr">
            <equals arg1="${nodeName}" arg2="DefaultDmgr"/>
        </condition>
        <wscmtlog>after condition nodeNameIsDefaultDmgr is now ${nodeNameIsDefaultDmgr}</wscmtlog>
        <!-- Set continueRenameDmgrNode if the node name is not DefaultDmgr
             because the node move operation to rename the node must be 
             done. -->
        <condition property="continueRenameDmgrNode">
          <not>
            <isset property="nodeNameIsDefaultDmgr"/>
          </not>
        </condition>
        <wscmtlog>after condition continueRenameDmgrNode is now ${continueRenameDmgrNode}</wscmtlog>

        <!-- Set appServerNodeNameIsDefaultNode true if the node name is 
             DefaultNode. -->
        <wscmtlog>Continuing detectDefaultNodeNames with appServerNodeName ${appServerNodeName}</wscmtlog>
        <condition property="appServerNodeNameIsDefaultNode">
            <equals arg1="${appServerNodeName}" arg2="DefaultNode"/>
        </condition>
        <wscmtlog>after condition appServerNodeNameIsDefaultNode is now ${appServerNodeNameIsDefaultNode}</wscmtlog>
        <!-- Set continueRenameAppServerNode if the node name is not 
             DefaultNode because the node move operation to rename the node 
             must be done. -->
        <condition property="continueRenameAppServerNode">
          <not>
            <isset property="appServerNodeNameIsDefaultNode"/>
          </not>
        </condition>
        <wscmtlog>after condition continueRenameAppServerNode is now ${continueRenameAppServerNode}</wscmtlog>
    </target>

    <!-- Determine whether the cell name specified by the user
         is the (default) string "AdvancedDeploymentCell". If it is, 
         there will not be any need to rename the cell directory, because when
         it is created, its name is "AdvancedDeploymentCell" already. -->
    <target name="detectDefaultCellName"
      description="Detects if the cell name is AdvancedDeploymentCell" >
        <wscmtlog>Starting detectDefaultCellName with cellName ${cellName}</wscmtlog>
        <!-- Set cellNameIsDefaultCell true if the cell name is 
             AdvancedDeploymentCell. -->
        <condition property="cellNameIsDefaultCell">
            <equals arg1="${cellName}" arg2="AdvancedDeploymentCell"/>
        </condition>
        <wscmtlog>after condition cellNameIsDefaultCell is now ${cellNameIsDefaultCell}</wscmtlog>
        <!-- Set continueRenameCell if the cell name is not 
             AdvancedDeploymentCell because the cell move operation to 
             rename the cell must be done. -->
        <condition property="continueRenameCell">
          <not>
            <isset property="cellNameIsDefaultCell"/>
          </not>
        </condition>
        <wscmtlog>after condition continueRenameCell is now ${continueRenameCell}</wscmtlog>
    </target>

    <target name="detectCurrentOSFamily"
            description="Detects the current OS family (UNIX or Windows)">
        
        <wscmtlog>OS name is ${os.name}</wscmtlog>

        <!-- OS/400 setting must come before the unix setting -->
        <condition property="currentOSFamily" value="os/400">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>
        
        <!-- Determine if the OS is HP. -->
        <condition property="resetJvmArgumentsForHP" value="true">
            <equals arg1="${os.name}" arg2="HP-UX"/>
        </condition>

        <!-- Determine if the OS is Sun. -->
        <condition property="resetJvmArgumentsForSun" value="true">
            <equals arg1="${os.name}" arg2="SunOS"/>
        </condition>

        <condition property="currentOSFamily" value="windows">
            <os family="windows"/>
        </condition>
        
        <condition property="currentOSFamily" value="unix">            
            <os family="unix"/>
        </condition>
        
        <wscmtlog>Detected current OS family to be: ${currentOSFamily}</wscmtlog>
    </target>

    <target name="setCurrentOSFamily"
            description="Detects the current OS family (UNIX or Windows)">
        
        <!-- OS/400 setting must come before the unix setting -->
        <condition property="isCurrentOSOS400" value="true">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>
        
        <!-- z/OS setting must come before the unix setting -->
        <condition property="isCurrentOSzOS" value="true">
            <os family="z/os"/>
        </condition>

        <condition property="isCurrentOSOS400orZOS" value="true">
          <or>
            <equals arg1="${os.name}" arg2="OS/400"/>
            <os family="z/os"/>
          </or>
        </condition>
        
        <condition property="isCurrentOSWindows" value="true">
            <os family="windows"/>
        </condition>
        
        <condition property="isCurrentOSUNIX" value="true">
            <os family="unix"/>
        </condition>
    </target>

    <target name="setOSFileSeparator"
            description="Sets the current file separator for this platform (file.separator is unreliable on ANT 1.5.4)">
            
        <condition property="separatorFile" value="/">
            <equals arg1="${currentOSFamily}" arg2="os/400"/>
        </condition>
        
        <condition property="separatorFile" value="/">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>
        
        <condition property="separatorFile" value="\">
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
    </target>

    <!-- Note that the use of the condition if="continueRenameCell" will keep 
         this task from running if the node path with a cell name of 
         AdvancedDeploymentCell already exists. There is no need to run the 
         task because the cel directory already matches the incoming node 
         name. -->
    <target name="renameCellDirectoryToMatchCellName"
      description="Renames the cell directory to match the incoming cell name"
      if="continueRenameCell">
        <wscmtlog>Starting renameCellDirectoryToMatchCellName</wscmtlog>
        <!-- the move is done through a tmp file name to avoid an ant bug
             that causes move to fail when the source and target only differ in case -->    
        <move toDir="${profilePath}/config/cells/tmp${cellName}">
            <fileset dir="${profilePath}/config/cells/AdvancedDeploymentCell"/>
        </move>
        <move toDir="${profilePath}/config/cells/${cellName}">
            <fileset dir="${profilePath}/config/cells/tmp${cellName}"/>
        </move>
    </target>
    
    <!-- Note that the use of the condition if="continueRenameDmgrNode" will 
         keep this task from running if the node path with a node name of 
         DefaultDmgr already exists. There is no need to run the task because
         the node directory already matches the incoming node name. -->
    <target name="renameDmgrNodeDirectoryToMatchNodeName"
      description="Renames the node directory to match the incoming node name"
      if="continueRenameDmgrNode">
    
        <wscmtlog>Starting renameDmgrNodeDirectoryToMatchNodeName for nodeName ${nodeName}</wscmtlog>
        <!-- the move is done through a tmp file name to avoid an ant bug
             that causes move to fail when the source and target only differ in case -->    
        <move toDir="${profilePath}/config/cells/${cellName}/nodes/tmp${nodeName}">
            <fileset dir="${profilePath}/config/cells/${cellName}/nodes/DefaultDmgr"/>
        </move>
        <move toDir="${profilePath}/config/cells/${cellName}/nodes/${nodeName}">
            <fileset dir="${profilePath}/config/cells/${cellName}/nodes/tmp${nodeName}"/>
        </move>        
    </target>

    <!-- Note that the use of the condition if="continueRenameAppServerNode" 
         will keep this task from running if the node path with a node name of 
         DefaultNode already exists. There is no need to run the task because
         the node directory already matches the incoming node name. -->
    <target name="renameAppServerNodeDirectoryToMatchNodeName"
      description="Renames the app server node directory to match the incoming node name"
      if="continueRenameAppServerNode">
    
        <wscmtlog>Starting renameAppServerNodeDirectoryToMatchNodeName for appServerNodeName ${appServerNodeName}</wscmtlog>
        
        <!-- the move is done through a tmp file name to avoid an ant bug
             that causes move to fail when the source and target only differ in case -->    
        <move toDir="${profilePath}/config/cells/${cellName}/nodes/tmp${appServerNodeName}">
            <fileset dir="${profilePath}/config/cells/${cellName}/nodes/DefaultNode"/>
        </move>
        <move toDir="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}">
            <fileset dir="${profilePath}/config/cells/${cellName}/nodes/tmp${appServerNodeName}"/>
        </move>        
    </target>

    <target name="renameServerDirectoryToMatchServerName"
            description="Renames the server directory to match the incoming server name">       
        <!-- the move is done through a tmp file name to avoid an ant bug
             that causes move to fail when the source and target only differ in case -->    
        <move toDir="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/tmp${nodeAgentServerName}">
            <fileset dir="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/DefaultNodeAgent"/>
        </move>
        <move toDir="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}">
            <fileset dir="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/tmp${nodeAgentServerName}"/>
        </move>

    </target>
    
    <target name="resolveSetupCmdLineName"
            description="Resolves the name of setupCmdLine script for the current platform">
    
        <condition property="setupCmdLineName" value="setupCmdLine">
            <equals arg1="${currentOSFamily}" arg2="os/400"/>
        </condition>
        
        <condition property="setupCmdLineName" value="setupCmdLine.sh">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>
        
        <condition property="setupCmdLineName" value="setupCmdLine.bat"> 
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
            
        <wscmtlog>Detected setupCmdLine script name to be: ${setupCmdLineName}</wscmtlog>
    </target>
    
    <target name="resolveWASHomeForOSShellScripts"
            description="Sets the property WAS_HOME_FOR_OS_SHELL_SCRIPTS with the slash characters set according to the current OS, so that the shell scripts work properly">        
        
        <path id="was.home.id">
            <pathelement location="${WAS_HOME}"/>
        </path>
        
        <pathconvert targetos="${currentOSFamily}" 
            property="WAS_HOME_FOR_OS_SHELL_SCRIPTS" 
            refid="was.home.id"/>
            
        <wscmtlog>WAS_HOME for shell scripts was resolved to be: ${WAS_HOME_FOR_OS_SHELL_SCRIPTS}</wscmtlog>
    </target>   
    
    <target name="resolveWASHomeForPropertyFiles"
            description="Sets the property WAS_HOME_FOR_PROPERTY_FILES with slash characters etc. adjusted for property files">        
        
        <replaceStringRegExp string="${WAS_HOME}"
            regexp="\\"
            value="/"
            property="WAS_HOME_FOR_PROPERTY_FILES_FIRST_PASS"/>
            
        <replaceStringRegExp string="${WAS_HOME_FOR_PROPERTY_FILES_FIRST_PASS}"
            regexp="/:"
            value="\:/"
            property="WAS_HOME_FOR_PROPERTY_FILES"/>
            
        <wscmtlog>WAS_HOME for property files was resolved to be: ${WAS_HOME_FOR_PROPERTY_FILES}</wscmtlog>
    </target>   

    <target name="resolveWASProfileLocationForPropertyFiles"
            description="Sets the property WAS_PROFILE_PATH_FOR_PROPERTY_FILES with slash characters etc. adjusted for property files">        
        
        <replaceStringRegExp string="${profilePath}"
            regexp="\\"
            value="/"
            property="WAS_PROFILE_PATH_FOR_PROPERTY_FILES"/>
         
        <wscmtlog>profilePath for property files was resolved to be: ${WAS_PROFILE_PATH_FOR_PROPERTY_FILES}</wscmtlog>
    </target>   

    <target name="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile"
            description="Replaces all instances of the given token for the given file with the given value">
    
        <wscmtlog>Replacing token: ${token}, with ${tokenValue}, in file ${file}</wscmtlog>    
    
        <replace file="${file}"
            token="${token}"
            value="${tokenValue}"/>
    </target>
    
    <target name="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii"
            description="Replaces all instances of the given token for the given file with the given value">

        <wscmtlog>Replacing token: ${token}, with ${tokenValue}, in file ${file}</wscmtlog>

        <replace file="${file}"
            token="${token}"
            encoding="UTF-8"
            value="${tokenValue}"/>
    </target>

    <target name="appendToGivenFileGivenString"
            description="Appends the given string to the given file">
    
        <echo file="${file}"
            message="${stringToAppend}"
            append="true"/>
    </target>

    <target name="replaceAllNecessaryTokensWithRightValuesForPropertiesFiles"
            description="Bootstrap the wsadmin.properties and soap.client.props files"
            unless="isCurrentOSzOS">

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/properties/soap.client.props"/>
            <param name="token" value="$$(WASROOT)"/>
            <param name="tokenValue" value="${WAS_PROFILE_PATH_FOR_PROPERTY_FILES}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/properties/wsadmin.properties"/>
            <param name="token" value="$$(was.install.root)"/>
            <param name="tokenValue" value="${WAS_HOME_FOR_PROPERTY_FILES}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/properties/wsadmin.properties"/>
            <param name="token" value="$$(instance.root)"/>
            <param name="tokenValue" value="${WAS_PROFILE_PATH_FOR_PROPERTY_FILES}"/>
        </antcall>

    </target>

    <target name="zReplaceAllNecessaryTokensWithRightValuesForPropertiesFiles"
            description="For z/OS only, bootstrap the wsadmin.properties and soap.client.props files using ASCII format"
            if="isCurrentOSzOS">

       <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/properties/soap.client.props"/>
            <param name="token" value="$$(WASROOT)"/>
            <param name="tokenValue" value="${WAS_PROFILE_PATH_FOR_PROPERTY_FILES}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/properties/wsadmin.properties"/>
            <param name="token" value="$$(was.install.root)"/>
            <param name="tokenValue" value="${WAS_HOME_FOR_PROPERTY_FILES}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/properties/wsadmin.properties"/>
            <param name="token" value="$$(instance.root)"/>
            <param name="tokenValue" value="${WAS_PROFILE_PATH_FOR_PROPERTY_FILES}"/>
        </antcall>

    </target>

    <target name="replaceAllNecessaryTokensWithRightValuesForAllWCCMFiles"
            description="Bootstrap the entire set of WCCM files">

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/variables.xml"/>
                        <param name="token" value="$$(cell.name)"/>
                        <param name="tokenValue" value="${cellName}"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(was.install.root)"/>
            <param name="tokenValue" value="${WAS_HOME}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(user.install.root)"/>
            <param name="tokenValue" value="${profilePath}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(java.install.root)"/>
            <param name="tokenValue" value="${WAS_HOME}/java"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(localhost_name)"/>
            <param name="tokenValue" value="${localhostName}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/serverindex.xml"/>
            <param name="token" value="$$(node.host.name)"/>
            <param name="tokenValue" value="${appServerHost}"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${nodeName}/serverindex.xml"/>
            <param name="token" value="$$(node.host.name)"/>
            <param name="tokenValue" value="${hostName}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/node.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${nodeName}"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
            <param name="token" value="$$(appserver.node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/cell.xml"/>
            <param name="token" value="$$(cell.name)"/>
            <param name="tokenValue" value="${cellName}"/>
        </antcall>

          <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                <param name="file" value="${profilePath}/config/cells/${cellName}/virtualhosts.xml"/>
                <param name="token" value="$$(http.transport.host)"/>
                <param name="tokenValue" value="${http.transport.host}"/>
          </antcall>

            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/servertypes/APPLICATION_SERVER/servers/default/server.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/servertypes/APPLICATION_SERVER/servers/defaultZOS/server.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}/server.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>

            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/default/server-component-templates.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/chains/webcontainer-chains.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>
            	
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
       		<param name="file" value="${profilePath}/config/templates/chains/sipcontainer-chains.xml"/>
        	<param name="token" value="$$(node.name)"/>
           	<param name="tokenValue" value="${appServerNodeName}"/>
     	</antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
       	    <param name="file" value="${profilePath}/config/templates/servertypes/APPLICATION_SERVER/servers/DeveloperServer/server.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
     	  </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/chains/hamanager-chains.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/security.xml"/>
            <param name="token" value="$$(dmgr.node.name)"/>
            <param name="tokenValue" value="${nodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/security.xml"/>
            <param name="token" value="$$(appserver.node.name)"/>
            <param name="tokenValue" value="${appServerNodeName}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/security.xml"/>
            <param name="token" value="$$(cell.name)"/>
            <param name="tokenValue" value="${cellName}"/>          
        </antcall> 
        

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
            <param name="token" value="$$(was.install.root)"/>
            <param name="tokenValue" value="${WAS_HOME_FOR_OS_SHELL_SCRIPTS}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
            <param name="token" value="$$(java.install.root)"/>
            <param name="tokenValue" value="${WAS_HOME_FOR_OS_SHELL_SCRIPTS}${separatorFile}java"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
            <param name="token" value="WAS_CELL=$$(cell.name)"/>
            <param name="tokenValue" value="WAS_CELL=${cellName}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
            <param name="token" value="WAS_NODE=$$(node.name)"/>
            <param name="tokenValue" value="WAS_NODE=${appServerNodeName}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
            <param name="token" value="$$(instance.root)"/>
            <param name="tokenValue" value="${profilePath}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
            <param name="token" value="$$(instance.script)"/>
            <param name="tokenValue" value="${profilePath}${separatorFile}bin${separatorFile}${setupCmdLineName}"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/chains/orb-chains.xml"/>
            <param name="token" value="$$(node.name)"/>
            <param name="tokenValue" value="${nodeName}"/>
        </antcall>
        
    </target>

    <!-- F001149.1-29586 begin -->
    <macrodef name="getPropertyWithNestedPropertyNames">
        <attribute name="property"/>
        <attribute name="stem"/>
        <attribute name="selector"/>
        <sequential>
            <property name="@{property}" value="${@{stem}.@{selector}}"/>
        </sequential>
    </macrodef>
    
    <target name="setNewProfileDefaultSDK">
       <wscmtlog> Loading ${WAS_HOME}/properties/sdk/newProfileDefaultSDK.properties</wscmtlog>
       <loadproperties srcFile="${WAS_HOME}/properties/sdk/newProfileDefaultSDK.properties"/>
       <wscmtlog> com.ibm.websphere.sdkname.newProfileDefaultSDK=${com.ibm.websphere.sdkname.newProfileDefaultSDK} </wscmtlog>
       
       <wscmtlog> Loading ${WAS_HOME}/properties/sdk/${com.ibm.websphere.sdkname.newProfileDefaultSDK}.properties</wscmtlog>
       <loadproperties srcFile="${WAS_HOME}/properties/sdk/${com.ibm.websphere.sdkname.newProfileDefaultSDK}.properties"/>
       
       <getPropertyWithNestedPropertyNames property="sdk.location" 
                                           stem="com.ibm.websphere.sdk.location"
                                           selector="${com.ibm.websphere.sdkname.newProfileDefaultSDK}" />
       <wscmtlog> sdk.location=${sdk.location}</wscmtlog>
       
       <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
           <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
           <param name="token" value="value=&quot;${WAS_INSTALL_ROOT}/java&quot;"/>
           <param name="tokenValue" value="value=&quot;${sdk.location}&quot;"/>
       </antcall>
    </target>
    <!-- F001149.1-29586 end -->
    
    <!-- genericJvmArguments should be -Xquickstart only for operating
         systems that use IBM JDKs. Solaris machines should use -client,
         while HP machines should use an empty string.  Begin defect 352805 -->

    <target name="replaceJvmArgumentsForSun"
            description="Change genericJvmArguments for Sun machines to -client from -Xquickstart"
            if="resetJvmArgumentsForSun">
        <wscmtlog>replaceJvmArgumentsForSun profilePath is ${profilePath}</wscmtlog>
        <wscmtlog>Path is ${profilePath}/config/templates/servertypes/APPLICATION_SERVER/SERVERS/DeveloperServer/server.xml</wscmtlog>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/servertypes/APPLICATION_SERVER/servers/DeveloperServer/server.xml"/>
            <param name="token" value="-Xquickstart"/>
            <param name="tokenValue" value="-client"/>
        </antcall>
    </target>
            
    <target name="replaceJvmArgumentsForHP"
            description="Change genericJvmArguments for HP machines to empty from -Xquickstart"
            if="resetJvmArgumentsForHP">
        <wscmtlog>replaceJvmArgumentsForHP profilePath is ${profilePath}</wscmtlog>
        <wscmtlog>Path is ${profilePath}/config/templates/servertypes/APPLICATION_SERVER/SERVERS/DeveloperServer/server.xml</wscmtlog>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/templates/servertypes/APPLICATION_SERVER/servers/DeveloperServer/server.xml"/>
            <param name="token" value="-Xquickstart"/>
            <param name="tokenValue" value=""/>
        </antcall>
    </target>
    <!-- End defect 352805 -->
            
    <target name="zReplaceAllNecessaryTokensWithRightValuesForAllWCCMFiles"
            description="Bootstrap the z-specific entries in WCCM files"
            if="isCurrentOSzOS">

        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.cell.short.name)"/>
                        <param name="tokenValue" value="${z.cell.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.sysplex.name)"/>
                        <param name="tokenValue" value="${z.sysplex.name}"/>
        </antcall>

         <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.name)"/>
                        <param name="tokenValue" value="${z.daemon.name}"/>
         </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.ip.name)"/>
                        <param name="tokenValue" value="${z.daemon.ip.name}"/>
                </antcall>
                
                <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.listen.ip.name)"/>
                        <param name="tokenValue" value="${z.daemon.listen.ip.name}"/>
                </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.ssl.port)"/>
                        <param name="tokenValue" value="${z.daemon.ssl.port}"/>
                </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.ip.port)"/>
                        <param name="tokenValue" value="${z.daemon.ip.port}"/>
                </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.job.name)"/>
                        <param name="tokenValue" value="${z.daemon.job.name}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                  <param name="file" value="${profilePath}/config/cells/${cellName}/nodegroups/DefaultNodeGroup/nodegroup.xml"/>
                        <param name="token" value="$$(z.daemon.dns.option)"/>
                        <param name="tokenValue" value="${z.daemon.dns.option}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/admin-authz.xml"/>
                        <param name="token" value="$$(z.admin.userid)"/>
                        <param name="tokenValue" value="${z.admin.userid}"/>
          </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/admin-authz.xml"/>
                        <param name="token" value="$$(z.config.group)"/>
                        <param name="tokenValue" value="${z.config.group}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/audit-authz.xml"/>
                        <param name="token" value="$$(z.admin.userid)"/>
                        <param name="tokenValue" value="${z.admin.userid}"/>
          </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/audit-authz.xml"/>
                        <param name="token" value="$$(z.config.group)"/>
                        <param name="tokenValue" value="${z.config.group}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                  <param name="file" value="${profilePath}/config/cells/${cellName}/cell.xml"/>
                        <param name="token" value="$$(z.cell.short.name)"/>
                        <param name="tokenValue" value="${z.cell.short.name}"/>
          </antcall>
                         
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/variables.xml"/>
                        <param name="token" value="$$(z.smpe.home)"/>
                        <param name="tokenValue" value="${z.smpe.home}"/>
                </antcall>
				
      <property name="z.ctrace.parms" value="60"/>
      <wscmtlog>Value of: z.ctrace.parms is set to ${z.ctrace.parms}</wscmtlog> 
      <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/variables.xml"/>
                        <param name="token" value="$$(z.ctrace.parms)"/>
                        <param name="tokenValue" value="${z.ctrace.parms}"/>
        </antcall>
                
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/variables.xml"/>
                        <param name="token" value="$$(cell.name)"/>
                        <param name="tokenValue" value="${cellName}"/>
                </antcall>
                
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/variables.xml"/>
                        <param name="token" value="$$(z.cell.short.name)"/>
                        <param name="tokenValue" value="${z.cell.short.name}"/>
                </antcall>
                
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/config/cells/${cellName}/variables.xml"/>
                        <param name="token" value="$$(z.unauthenticated.userid)"/>
                        <param name="tokenValue" value="${z.unauthenticated.userid}"/>
                </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${nodeName}/serverindex.xml"/>
            <param name="token" value="$$(z.server.short.name)"/>
            <param name="tokenValue" value="${z.server.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${nodeName}/serverindex.xml"/>
            <param name="token" value="$$(z.cluster.transition.name)"/>
            <param name="tokenValue" value="${z.cluster.transition.name}"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${nodeName}/serverindex.xml"/>
            <param name="token" value="$$(orb.listener.host)"/>
            <param name="tokenValue" value="${orb.listener.host}"/>
        </antcall>
                
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/serverindex.xml"/>
            <param name="token" value="$$(orb.listener.host)"/>
            <param name="tokenValue" value="${orb.listener.host}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${nodeName}/serverindex.xml"/>
            <param name="token" value="$$(http.transport.host)"/>
            <param name="tokenValue" value="${http.transport.host}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/serverindex.xml"/>
            <param name="token" value="$$(z.server.short.name)"/>
            <param name="tokenValue" value="${z.nodeagent.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/node.xml"/>
            <param name="token" value="$$(z.node.short.name)"/>
            <param name="tokenValue" value="${z.appserver.node.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.system.name)"/>
            <param name="tokenValue" value="${z.system.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.daemon.instance.name)"/>
            <param name="tokenValue" value="${z.daemon.instance.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.node.short.name)"/>
            <param name="tokenValue" value="${z.appserver.node.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.ctrace.parms)"/>
            <param name="tokenValue" value="${z.ctrace.parms}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.admin.asynch.proc)"/>
            <param name="tokenValue" value="${z.admin.asynch.proc}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.control.proc)"/>
            <param name="tokenValue" value="${z.appserver.control.proc}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.servant.proc)"/>
            <param name="tokenValue" value="${z.appserver.servant.proc}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.smpe.home)"/>
            <param name="tokenValue" value="${z.smpe.home}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.config.mount.point)"/>
            <param name="tokenValue" value="${z.config.mount.point}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.adjunct.proc)"/>
            <param name="tokenValue" value="${z.adjunct.proc}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.daemon.proc)"/>
            <param name="tokenValue" value="${z.daemon.proc}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/variables.xml"/>
            <param name="token" value="$$(z.daemon.home)"/>
            <param name="tokenValue" value="${z.daemon.home}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}/server.xml"/>
            <param name="token" value="$$(z.server.short.name)"/>
            <param name="tokenValue" value="${z.nodeagent.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}/server.xml"/>
            <param name="token" value="$$(z.system.name)"/>
            <param name="tokenValue" value="${z.system.name}"/>
        </antcall>


        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}/server.xml"/>
            <param name="token" value="$$(z.control.proc)"/>
            <param name="tokenValue" value="${z.appserver.control.proc}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}/server.xml"/>
            <param name="token" value="$$(z.cell.short.name)"/>
            <param name="tokenValue" value="${z.cell.short.name}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/config/cells/${cellName}/nodes/${appServerNodeName}/servers/${nodeAgentServerName}/server.xml"/>
            <param name="token" value="$$(z.node.short.name)"/>
            <param name="tokenValue" value="${z.appserver.node.short.name}"/>
        </antcall>
        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
                        <param name="file" value="${profilePath}/properties/sas.client.props"/>
                        <param name="token" value="$$(z.keyring)"/>
                        <param name="tokenValue" value="${z.keyring}"/>
        </antcall>

        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/properties/soap.client.props"/>
                <param name="token" value="$$(z.keyring)"/>
                <param name="tokenValue" value="${z.keyring}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFileAscii">
            <param name="file" value="${profilePath}/properties/wsadmin.properties"/>
            <param name="token" value="$$(profilePath)"/>
            <param name="tokenValue" value="${profilePath}"/>
        </antcall>
            
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
                        <param name="token" value="$$(z.smpe.home)"/>
                        <param name="tokenValue" value="${z.smpe.home}"/>
        </antcall>
                    
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
                <param name="token" value="$$(z.control.proc)"/>
                <param name="tokenValue" value="${z.control.proc}"/>
        </antcall>

        
        <antcall target="replaceAllInstancesOfGivenTokenWithGivenValueForTheGivenFile">
            <param name="file" value="${profilePath}/bin/${setupCmdLineName}"/>
                <param name="token" value="$$(z.servant.proc)"/>
                <param name="tokenValue" value="${z.servant.proc}"/>
        </antcall>

    </target>

    
    <target name="zDetermineUpdateAdminAuthz"
           description="For z/OS only, determine whether we need to modify admin-authz.xml based on value of z.local.os.security"
           if="isCurrentOSzOS">

        <condition property="editAdminAuthz">
             <equals arg1="${z.local.os.security}" arg2="false"/>
        </condition>
    </target>

   <target name="zDoAdminAuthzEdit"
           description="For z/OS only, remove the section containing the admin userid and config group if z.local.os.security was false"
           if="editAdminAuthz">
    
        <replaceregexp file="${profilePath}/config/cells/${cellName}/admin-authz.xml"
                    match="(.*)userid(.*)"
                      replace=""
                      flags="g"
                        encoding="UTF-8"/>
        <replaceregexp file="${profilePath}/config/cells/${cellName}/admin-authz.xml"
                    match="(.*)group(.*)"
                      replace=""
                      flags="g"
                        encoding="UTF-8"/>
	<replaceregexp file="${profilePath}/config/cells/${cellName}/audit-authz.xml"
                    match="(.*)userid(.*)"
                    replace=""
                    flags="g"
                    encoding="UTF-8"/>
        <replaceregexp file="${profilePath}/config/cells/${cellName}/audit-authz.xml"
                    match="(.*)group(.*)"
                    replace=""
                    flags="g"
                    encoding="UTF-8"/>
   </target>

    <target name="setSetupCmdLineFilePermission"
        description="Change file permission back to 755"
        if="isCurrentOSUNIX">
        
        <chmod perm="u+rwx,g+rx-w,o+rx-w" file="${profilePath}/bin/${setupCmdLineName}"/>
    
    </target>

    <target name="executeNative2Ascii" 
            description="Converts files from native encodings to ASCII with escaped Unicode"
            unless="isCurrentOSOS400orZOS">

        <n2a infile="${profilePath}/properties/wsadmin.properties" outfile="${profilePath}/temp/wsadmin.properties"/>

        <copy file="${profilePath}/temp/wsadmin.properties"
              tofile="${profilePath}/properties/wsadmin.properties"
              overwrite="true"/>

        <n2a infile="${profilePath}/properties/soap.client.props" outfile="${profilePath}/temp/soap.client.props"/>

        <copy file="${profilePath}/temp/soap.client.props"
              tofile="${profilePath}/properties/soap.client.props"
              overwrite="true"/>

    </target>
            
    <target name="executeNative2AsciiOS400" 
            description="Converts files from native encodings to ASCII with escaped Unicode"
            if="isCurrentOSOS400">

        <n2a infile="${profilePath}/properties/wsadmin.properties" outfile="${profilePath}/temp/wsadmin.properties"/>

        <copy file="${profilePath}/temp/wsadmin.properties"
              tofile="${profilePath}/properties/wsadmin.properties"
              overwrite="true"/>

        <n2a infile="${profilePath}/properties/soap.client.props" outfile="${profilePath}/temp/soap.client.props"/>

        <copy file="${profilePath}/temp/soap.client.props"
              tofile="${profilePath}/properties/soap.client.props"
              overwrite="true"/>

    </target>

    <target name="bootstrapWCCMFiles"
        description="Bootstrap WCCM Files"
        depends="detectCurrentOSFamily,
            detectDefaultNodeNames,
            detectDefaultCellName,
            setCurrentOSFamily,
            setOSFileSeparator,
            setDefaultLocalHostName,
            resolveWASHomeForOSShellScripts,
            resolveWASHomeForPropertyFiles,
            resolveWASProfileLocationForPropertyFiles,
            resolveSetupCmdLineName,
            zSetTransportHost,
            zDetermineUpdateAdminAuthz,
            renameCellDirectoryToMatchCellName, 
            renameDmgrNodeDirectoryToMatchNodeName,
            renameAppServerNodeDirectoryToMatchNodeName,
            renameServerDirectoryToMatchServerName,
            zDoAdminAuthzEdit,
            replaceAllNecessaryTokensWithRightValuesForAllWCCMFiles,
            setNewProfileDefaultSDK,
            replaceJvmArgumentsForSun,
            replaceJvmArgumentsForHP,
            zReplaceAllNecessaryTokensWithRightValuesForAllWCCMFiles,
            replaceAllNecessaryTokensWithRightValuesForPropertiesFiles,
            zReplaceAllNecessaryTokensWithRightValuesForPropertiesFiles,
            setSetupCmdLineFilePermission,
            executeNative2AsciiOS400,
            executeNative2Ascii"/>
</project>
