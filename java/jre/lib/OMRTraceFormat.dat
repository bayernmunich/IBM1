5.1
omrmm.0 0 1 1 N Trc_OMRMM_SystemGCStart "  SystemGC start: newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu"
omrmm.1 0 1 1 N Trc_OMRMM_SystemGCEnd "  SystemGC end: newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu"
omrmm.2 4 1 1 N Trc_OMRMM_MemorySubSpace_percolateGarbageCollect_Exit1 " <MM_MemorySubSpace_percolateGarbageCollect Exit1 Garbage collect percolated to parent, result = %s"
omrmm.3 4 1 1 N Trc_OMRMM_MemorySubSpace_percolateGarbageCollect_Exit2 " <MM_MemorySubSpace_percolateGarbageCollect Exit2 Unable to percolate Garbage Collection"
omrmm.4 0 1 1 N Trc_OMRMM_MarkStart "  Mark start"
omrmm.5 0 1 1 N Trc_OMRMM_MarkEnd "  Mark end"
omrmm.6 0 1 1 N Trc_OMRMM_SweepStart "  Sweep start"
omrmm.7 0 1 1 N Trc_OMRMM_SweepEnd "  Sweep end"
omrmm.8 0 1 1 N Trc_OMRMM_LocalGCStart "  LocalGC start: globalcount=%zu scavengecount=%zu weakrefs=%zu soft=%zu phantom=%zu finalizers=%zu"
omrmm.9 0 1 1 N Trc_OMRMM_LocalGCEnd "  LocalGC end: rememberedsetoverflow=%zu causedrememberedsetoverflow=%zu scancacheoverflow=%zu failedflipcount=%zu failedflipbytes=%zu failedtenurecount=%zu failedtenurebytes=%zu flipcount=%zu flipbytes=%zu newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu tenureage=%zu"
omrmm.10 0 1 1 N Trc_OMRMM_AllocationFailureStart "  Allocation failure start: newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu requestedbytes=%zu"
omrmm.11 0 1 1 N Trc_OMRMM_AllocationFailureEnd "  Allocation failure end: newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu"
omrmm.12 0 1 1 N Trc_OMRMM_AllocationFailureCycleStart "  Allocation failure cycle start: newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu requestedbytes=%zu"
omrmm.13 0 1 1 N Trc_OMRMM_AllocationFailureCycleEnd "  Allocation failure cycle end: newspace=%zu/%zu oldspace=%zu/%zu loa=%zu/%zu"
omrmm.14 0 1 1 N Trc_OMRMM_GlobalGCStart "  GlobalGC start: globalcount=%zu"
omrmm.15 0 1 1 N Trc_OMRMM_GlobalGCEnd "  GlobalGC end: workstackoverflow=%zu overflowcount=%zu memory=%zu/%zu"
omrmm.16 0 1 1 N Trc_OMRMM_GlobalGCCollectComplete "  GlobalGC collect complete"
omrmm.17 0 1 1 N Trc_OMRMM_CompactStart "  Compact start: reason=%s"
omrmm.18 0 1 1 N Trc_OMRMM_CompactEnd "  Compact end: bytesmoved=%zu"
omrmm.19 0 1 1 N Trc_OMRMM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceRemaining "  Sub area (%p,%p) compacted (B), moved %zu bytes, %zu free"
omrti.0 2 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_Entry " >GetMemoryCategories max_categories=%d categories_buffer=%p written_count_ptr=%p total_categories_ptr=%p"
omrti.1 5 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_WrongVersion_Exit "*<GetMemoryCategories failing with OMRTI_ERROR_UNSUPPORTED_VERSION: unmatched version %d"
omrti.2 5 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_AllOutputsNull_Exit "*<GetMemoryCategories failing with OMRTI_ERROR_ILLEGAL_ARGUMENT: categories_buffer, written_count_ptr and total_categories_ptr are all NULL."
omrti.3 5 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_NullOutput_Exit "*<GetMemoryCategories failing with OMRTI_ERROR_ILLEGAL_ARGUMENT: no categories_buffer pointer specified. max_categories=%d"
omrti.4 5 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_NullWrittenPtr_Exit "*<GetMemoryCategories failing with OMRTI_ERROR_ILLEGAL_ARGUMENT, categories_buffer & max_categories are set, but written_count_ptr is NULL. max_categories=%d, categories_buffer=%p"
omrti.5 5 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_J9MemAllocFail_Exit "*<GetMemoryCategories failing with OMR_ERROR_INTERNAL, unable to allocate %d bytes for internal categories buffer"
omrti.6 1 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_BufferOverflow "* GetMemoryCategories categories_buffer overflowed (output will be truncated, return code will be OMRTI_ERROR_OUT_OF_MEMORY)"
omrti.7 4 1 1 N Trc_OMRTI_omrtiGetMemoryCategories_Exit " <GetMemoryCategories returning %d"
omrti.8 0 1 5 N Trc_OMRPROF_MethodSampleStart "  MTH_S: %p"
omrti.9 0 1 5 N Trc_OMRPROF_MethodSampleContinue "  MTH_C: %p"
omrti.10 0 1 3 N Trc_OMRPROF_insertMethodDictionary_success "  insertMethodDictionary: %p %s"
omrti.11 0 1 3 N Trc_OMRPROF_insertMethodDictionary_replaceExistingEntry "  insertMethodDictionary: replace existing entry %p %s"
omrti.12 1 1 3 N Trc_OMRPROF_insertMethodDictionary_failed "* insertMethodDictionary: failed(rc=%d) %p %s"
omrti.13 0 1 3 N Trc_OMRPROF_methodDictionaryHighWaterMark "  methodDictionary highWaterMark=%u bytes (%u entries of %u bytes each, plus %u name bytes)"
omrvm.0 0 1 3 N Trc_OMRVM_PostForkChild "  omr_vm_postForkChild forkGeneration=%zu parent pid=%zu"
omrvm.1 12 1 1 N Assert_OMRVM_true "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.0 12 1 1 N Assert_PRT_true "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.1 12 1 1 N Trc_PRT_Assert_ShouldNeverHappen "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.2 2 1 1 N Trc_PRT_cuda_initializeTable_entry " >omrcuda initializeTable"
omrport.3 0 1 3 N Trc_PRT_cuda_symbol_found "  omrcuda initializeTable: symbol '%s(%s)' = %p"
omrport.4 1 1 1 N Trc_PRT_cuda_symbol_not_found "* omrcuda initializeTable: symbol '%s(%s)' not found"
omrport.5 4 1 1 N Trc_PRT_cuda_initializeTable_exit " <omrcuda initializeTable: %d"
omrport.6 2 1 3 N Trc_PRT_cuda_getDeviceData_entry " >omrcuda getDeviceData(device=%u)"
omrport.7 4 1 3 N Trc_PRT_cuda_getDeviceData_exit " <omrcuda getDeviceData: %d"
omrport.8 2 1 3 N Trc_PRT_cuda_getSummaryData_entry " >omrcuda getSummaryData"
omrport.9 4 1 3 N Trc_PRT_cuda_getSummaryData_exit " <omrcuda getSummaryData"
omrport.10 2 1 3 N Trc_PRT_cuda_initDeviceData_entry " >omrcuda initDeviceData(device=%u)"
omrport.11 1 1 1 N Trc_PRT_cuda_initDeviceData_fail "* omrcuda initDeviceData: failed to get %s, error=%d"
omrport.12 4 1 3 N Trc_PRT_cuda_initDeviceData_exit " <omrcuda initDeviceData: %d"
omrport.13 2 1 3 N Trc_PRT_cuda_initConfigData_entry " >omrcuda initConfigData(%u devices)"
omrport.14 1 1 1 N Trc_PRT_cuda_initConfigData_fail "* omrcuda initConfigData: failed to %s"
omrport.15 4 1 3 N Trc_PRT_cuda_initConfigData_exit " <omrcuda initConfigData: %d"
omrport.16 2 1 5 N Trc_PRT_cuda_getFunctions_entry " >omrcuda getFunctions"
omrport.17 1 1 1 N Trc_PRT_cuda_library_not_found "* omrcuda library '%s' not found"
omrport.18 1 1 1 N Trc_PRT_cuda_getFunctions_failed "* omrcuda getFunctions: CUDA support not available"
omrport.19 0 1 1 N Trc_PRT_cuda_getFunctions_initialized "  omrcuda getFunctions: CUDA support available"
omrport.20 4 1 5 N Trc_PRT_cuda_getFunctions_exit " <omrcuda getFunctions: %p"
omrport.21 2 1 3 N Trc_PRT_cuda_ThreadState_finalizer_entry " >omrcuda threadState finalizer(%p)"
omrport.22 4 1 3 N Trc_PRT_cuda_ThreadState_finalizer_exit " <omrcuda threadState finalizer"
omrport.23 2 1 3 N Trc_PRT_cuda_ThreadState_getCurrent_entry " >omrcuda threadState getCurrent"
omrport.24 4 1 3 N Trc_PRT_cuda_ThreadState_getCurrent_exit " <omrcuda threadState getCurrent: %p"
omrport.25 2 1 3 N Trc_PRT_cuda_ThreadState_clear_entry " >omrcuda threadState clear(%p, %u)"
omrport.26 4 1 3 N Trc_PRT_cuda_ThreadState_clear_exit " <omrcuda threadState clear"
omrport.27 2 1 3 N Trc_PRT_cuda_ThreadState_set_entry " >omrcuda threadState set(%p, %u)"
omrport.28 4 1 3 N Trc_PRT_cuda_ThreadState_set_exit " <omrcuda threadState set"
omrport.29 2 1 3 N Trc_PRT_cuda_ThreadState_test_entry " >omrcuda threadState test(%p, %u)"
omrport.30 4 1 3 N Trc_PRT_cuda_ThreadState_test_exit " <omrcuda threadState test: %u"
omrport.31 2 1 3 N Trc_PRT_cuda_ThreadState_startup_entry " >omrcuda threadState startup(%p)"
omrport.32 4 1 3 N Trc_PRT_cuda_ThreadState_startup_exit " <omrcuda threadState startup: %d"
omrport.33 2 1 3 N Trc_PRT_cuda_ThreadState_shutdown_entry " >omrcuda threadState shutdown(%p)"
omrport.34 4 1 3 N Trc_PRT_cuda_ThreadState_shutdown_exit " <omrcuda threadState shutdown"
omrport.35 2 1 3 N Trc_PRT_cuda_ThreadState_initCurrent_entry " >omrcuda threadState initCurrent(%u)"
omrport.36 4 1 3 N Trc_PRT_cuda_ThreadState_initCurrent_exit " <omrcuda threadState initCurrent: %d"
omrport.37 2 1 3 N Trc_PRT_cuda_ThreadState_markCurrent_entry " >omrcuda threadState markCurrent(%u)"
omrport.38 4 1 3 N Trc_PRT_cuda_ThreadState_markCurrent_exit " <omrcuda threadState markCurrent: %d"
omrport.39 2 1 3 N Trc_PRT_cuda_ThreadState_unmarkCurrent_entry " >omrcuda threadState unmarkCurrent(%u)"
omrport.40 4 1 3 N Trc_PRT_cuda_ThreadState_unmarkCurrent_exit " <omrcuda threadState unmarkCurrent: %d"
omrport.41 2 1 3 N Trc_PRT_cuda_withDevice_entry " >omrcuda withDevice(%d)"
omrport.42 1 1 1 N Trc_PRT_cuda_withDevice_get_fail "* omrcuda withDevice: failed to get current device, error=%d"
omrport.43 1 1 1 N Trc_PRT_cuda_withDevice_set_fail "* omrcuda withDevice: failed to set current device, error=%d"
omrport.44 1 1 1 N Trc_PRT_cuda_withDevice_prepare_fail "* omrcuda withDevice: prepare failed, error=%d"
omrport.45 1 1 1 N Trc_PRT_cuda_withDevice_execute_fail "* omrcuda withDevice: operation failed, error=%d"
omrport.46 1 1 1 N Trc_PRT_cuda_withDevice_onSuccess_fail "* omrcuda withDevice: onSuccess failed, error=%d"
omrport.47 1 1 1 N Trc_PRT_cuda_withDevice_restore_fail "* omrcuda withDevice: failed to restore current device, error=%d"
omrport.48 4 1 3 N Trc_PRT_cuda_withDevice_exit " <omrcuda withDevice: %d"
omrport.49 2 1 3 N Trc_PRT_cuda_shutdown_entry " >omrcuda_shutdown"
omrport.50 4 1 3 N Trc_PRT_cuda_shutdown_exit " <omrcuda_shutdown"
omrport.51 2 1 3 N Trc_PRT_cuda_deviceAlloc_entry " >omrcuda_deviceAlloc(device=%u, size=%zu)"
omrport.52 0 1 4 N Trc_PRT_cuda_deviceAlloc_result "  omrcuda_deviceAlloc: address=%p"
omrport.53 4 1 3 N Trc_PRT_cuda_deviceAlloc_exit " <omrcuda_deviceAlloc: %d"
omrport.54 2 1 3 N Trc_PRT_cuda_deviceCanAccessPeer_entry " >omrcuda_deviceCanAccessPeer(device=%u, peerDeviceId=%u)"
omrport.55 0 1 3 N Trc_PRT_cuda_deviceCanAccessPeer_result "  omrcuda_deviceCanAccessPeer: %d"
omrport.56 4 1 3 N Trc_PRT_cuda_deviceCanAccessPeer_exit " <omrcuda_deviceCanAccessPeer: %d"
omrport.57 2 1 3 N Trc_PRT_cuda_deviceDisablePeerAccess_entry " >omrcuda_deviceDisablePeerAccess(device=%u, peerDeviceId=%u)"
omrport.58 4 1 3 N Trc_PRT_cuda_deviceDisablePeerAccess_exit " <omrcuda_deviceDisablePeerAccess: %d"
omrport.59 2 1 3 N Trc_PRT_cuda_deviceEnablePeerAccess_entry " >omrcuda_deviceEnablePeerAccess(device=%u, peerDeviceId=%u)"
omrport.60 4 1 3 N Trc_PRT_cuda_deviceEnablePeerAccess_exit " <omrcuda_deviceEnablePeerAccess: %d"
omrport.61 2 1 3 N Trc_PRT_cuda_deviceFree_entry " >omrcuda_deviceFree(device=%u, address=%p)"
omrport.62 4 1 3 N Trc_PRT_cuda_deviceFree_exit " <omrcuda_deviceFree: %d"
omrport.63 2 1 3 N Trc_PRT_cuda_deviceGetAttribute_entry " >omrcuda_deviceGetAttribute(device=%u, attribute=%d)"
omrport.64 0 1 3 N Trc_PRT_cuda_deviceGetAttribute_result "  omrcuda_deviceGetAttribute(%d): value=%d"
omrport.65 4 1 3 N Trc_PRT_cuda_deviceGetAttribute_exit " <omrcuda_deviceGetAttribute: %d"
omrport.66 2 1 3 N Trc_PRT_cuda_deviceGetCacheConfig_entry " >omrcuda_deviceGetCacheConfig(device=%u)"
omrport.67 0 1 3 N Trc_PRT_cuda_deviceGetCacheConfig_result "  omrcuda_deviceGetCacheConfig: config=%d"
omrport.68 4 1 3 N Trc_PRT_cuda_deviceGetCacheConfig_exit " <omrcuda_deviceGetCacheConfig: %d"
omrport.69 2 1 3 N Trc_PRT_cuda_deviceGetCount_entry " >omrcuda_deviceGetCount"
omrport.70 0 1 3 N Trc_PRT_cuda_deviceGetCount_result "  omrcuda_deviceGetCount: count=%u"
omrport.71 4 1 3 N Trc_PRT_cuda_deviceGetCount_exit " <omrcuda_deviceGetCount: %d"
omrport.72 2 1 3 N Trc_PRT_cuda_deviceGetLimit_entry " >omrcuda_deviceGetLimit(device=%u, limit=%d)"
omrport.73 0 1 3 N Trc_PRT_cuda_deviceGetLimit_result "  omrcuda_deviceGetLimit: value=%zu"
omrport.74 4 1 3 N Trc_PRT_cuda_deviceGetLimit_exit " <omrcuda_deviceGetLimit: %d"
omrport.75 2 1 3 N Trc_PRT_cuda_deviceGetMemInfo_entry " >omrcuda_deviceGetMemInfo(device=%u)"
omrport.76 0 1 3 N Trc_PRT_cuda_deviceGetMemInfo_result "  omrcuda_deviceGetMemInfo: free=%zu, total=%zu"
omrport.77 4 1 3 N Trc_PRT_cuda_deviceGetMemInfo_exit " <omrcuda_deviceGetMemInfo: %d"
omrport.78 2 1 3 N Trc_PRT_cuda_deviceGetName_entry " >omrcuda_deviceGetName(device=%u)"
omrport.79 0 1 3 N Trc_PRT_cuda_deviceGetName_result "  omrcuda_deviceGetName: name=%s"
omrport.80 4 1 3 N Trc_PRT_cuda_deviceGetName_exit " <omrcuda_deviceGetName: %d"
omrport.81 2 1 3 N Trc_PRT_cuda_deviceGetSharedMemConfig_entry " >omrcuda_deviceGetSharedMemConfig(device=%u)"
omrport.82 0 1 3 N Trc_PRT_cuda_deviceGetSharedMemConfig_result "  omrcuda_deviceGetSharedMemConfig: config=%d"
omrport.83 4 1 3 N Trc_PRT_cuda_deviceGetSharedMemConfig_exit " <omrcuda_deviceGetSharedMemConfig: %d"
omrport.84 2 1 3 N Trc_PRT_cuda_deviceGetStreamPriorityRange_entry " >omrcuda_deviceGetStreamPriorityRange(device=%u)"
omrport.85 0 1 3 N Trc_PRT_cuda_deviceGetStreamPriorityRange_result "  omrcuda_deviceGetStreamPriorityRange: least=%d, greatest=%d"
omrport.86 4 1 3 N Trc_PRT_cuda_deviceGetStreamPriorityRange_exit " <omrcuda_deviceGetStreamPriorityRange: %d"
omrport.87 2 1 3 N Trc_PRT_cuda_deviceReset_entry " >omrcuda_deviceReset(device=%u)"
omrport.88 4 1 3 N Trc_PRT_cuda_deviceReset_exit " <omrcuda_deviceReset: %d"
omrport.89 2 1 3 N Trc_PRT_cuda_deviceSetCacheConfig_entry " >omrcuda_deviceSetCacheConfig(device=%u, config=%d)"
omrport.90 4 1 3 N Trc_PRT_cuda_deviceSetCacheConfig_exit " <omrcuda_deviceSetCacheConfig: %d"
omrport.91 2 1 3 N Trc_PRT_cuda_deviceSetLimit_entry " >omrcuda_deviceSetLimit(device=%u, limit=%d, value=%zu)"
omrport.92 4 1 3 N Trc_PRT_cuda_deviceSetLimit_exit " <omrcuda_deviceSetLimit: %d"
omrport.93 2 1 3 N Trc_PRT_cuda_deviceSetSharedMemConfig_entry " >omrcuda_deviceSetSharedMemConfig(device=%u, config=%d)"
omrport.94 4 1 3 N Trc_PRT_cuda_deviceSetSharedMemConfig_exit " <omrcuda_deviceSetSharedMemConfig: %d"
omrport.95 2 1 3 N Trc_PRT_cuda_deviceSynchronize_entry " >omrcuda_deviceSynchronize(device=%u)"
omrport.96 4 1 3 N Trc_PRT_cuda_deviceSynchronize_exit " <omrcuda_deviceSynchronize: %d"
omrport.97 2 1 3 N Trc_PRT_cuda_driverGetVersion_entry " >omrcuda_driverGetVersion"
omrport.98 0 1 3 N Trc_PRT_cuda_driverGetVersion_result "  omrcuda_driverGetVersion: version=%u"
omrport.99 4 1 3 N Trc_PRT_cuda_driverGetVersion_exit " <omrcuda_driverGetVersion: %d"
omrport.100 2 1 3 N Trc_PRT_cuda_eventCreate_entry " >omrcuda_eventCreate(device=%u, flags=%u)"
omrport.101 0 1 3 N Trc_PRT_cuda_eventCreate_result "  omrcuda_eventCreate: event=%p"
omrport.102 4 1 3 N Trc_PRT_cuda_eventCreate_exit " <omrcuda_eventCreate: %d"
omrport.103 2 1 3 N Trc_PRT_cuda_eventDestroy_entry " >omrcuda_eventDestroy(device=%u, event=%p)"
omrport.104 4 1 3 N Trc_PRT_cuda_eventDestroy_exit " <omrcuda_eventDestroy: %d"
omrport.105 2 1 3 N Trc_PRT_cuda_eventElapsedTime_entry " >omrcuda_eventElapsedTime(startEvent=%p, endEvent=%p)"
omrport.106 0 1 3 N Trc_PRT_cuda_eventElapsedTime_result "  omrcuda_eventElapsedTime: elapsed=%f ms"
omrport.107 4 1 3 N Trc_PRT_cuda_eventElapsedTime_exit " <omrcuda_eventElapsedTime: %d"
omrport.108 2 1 3 N Trc_PRT_cuda_eventQuery_entry " >omrcuda_eventQuery(event=%p)"
omrport.109 4 1 3 N Trc_PRT_cuda_eventQuery_exit " <omrcuda_eventQuery: %d"
omrport.110 2 1 3 N Trc_PRT_cuda_eventRecord_entry " >omrcuda_eventRecord(device=%u, event=%p, stream=%p)"
omrport.111 4 1 3 N Trc_PRT_cuda_eventRecord_exit " <omrcuda_eventRecord: %d"
omrport.112 2 1 3 N Trc_PRT_cuda_eventSynchronize_entry " >omrcuda_eventSynchronize(event=%p)"
omrport.113 4 1 3 N Trc_PRT_cuda_eventSynchronize_exit " <omrcuda_eventSynchronize: %d"
omrport.114 2 1 3 N Trc_PRT_cuda_funcGetAttribute_entry " >omrcuda_funcGetAttribute(device=%u, function=%p, attribute=%d)"
omrport.115 0 1 3 N Trc_PRT_cuda_funcGetAttribute_result "  omrcuda_funcGetAttribute: value=%d"
omrport.116 4 1 3 N Trc_PRT_cuda_funcGetAttribute_exit " <omrcuda_funcGetAttribute: %d"
omrport.117 2 1 3 N Trc_PRT_cuda_funcSetCacheConfig_entry " >omrcuda_funcSetCacheConfig(device=%u, function=%p, config=%d)"
omrport.118 4 1 3 N Trc_PRT_cuda_funcSetCacheConfig_exit " <omrcuda_funcSetCacheConfig: %d"
omrport.119 2 1 3 N Trc_PRT_cuda_funcSetSharedMemConfig_entry " >omrcuda_funcSetSharedMemConfig(device=%u, function=%p, config=%d)"
omrport.120 4 1 3 N Trc_PRT_cuda_funcSetSharedMemConfig_exit " <omrcuda_funcSetSharedMemConfig: %d"
omrport.121 2 1 3 N Trc_PRT_cuda_getErrorString_entry " >omrcuda_getErrorString(error=%zd)"
omrport.122 4 1 3 N Trc_PRT_cuda_getErrorString_exit " <omrcuda_getErrorString: %s"
omrport.123 2 1 3 N Trc_PRT_cuda_hostAlloc_entry " >omrcuda_hostAlloc(size=%zu, flags=%u)"
omrport.124 0 1 3 N Trc_PRT_cuda_hostAlloc_result "  omrcuda_hostAlloc: address=%p"
omrport.125 4 1 3 N Trc_PRT_cuda_hostAlloc_exit " <omrcuda_hostAlloc: %d"
omrport.126 2 1 3 N Trc_PRT_cuda_hostFree_entry " >omrcuda_hostFree(address=%p)"
omrport.127 4 1 3 N Trc_PRT_cuda_hostFree_exit " <omrcuda_hostFree: %d"
omrport.128 2 1 3 N Trc_PRT_cuda_launchKernel_entry " >omrcuda_launchKernel(device=%u, function=%p, grid=(%u,%u,%u), block=(%u,%u,%u), shared=%u, stream=%p, values=%p)"
omrport.129 4 1 3 N Trc_PRT_cuda_launchKernel_exit " <omrcuda_launchKernel: %d"
omrport.130 2 1 3 N Trc_PRT_cuda_JitOptions_entry " >omrcuda JitOptions(options=%p)"
omrport.131 4 1 3 N Trc_PRT_cuda_JitOptions_exit " <omrcuda JitOptions: option count=%u"
omrport.132 4 1 3 N Trc_PRT_cuda_JitOptions_exit_invalid " <omrcuda JitOptions: invalid"
omrport.133 2 1 3 N Trc_PRT_cuda_linkerAddData_entry " >omrcuda_linkerAddData(device=%u, linker=%p, type=%d, data=%p, size=%zu, name=%s, options=%p)"
omrport.134 4 1 3 N Trc_PRT_cuda_linkerAddData_exit " <omrcuda_linkerAddData: %d"
omrport.135 2 1 3 N Trc_PRT_cuda_linkerComplete_entry " >omrcuda_linkerComplete(device=%u, linker=%p)"
omrport.136 0 1 3 N Trc_PRT_cuda_linkerComplete_result "  omrcuda_linkerComplete: cubin=%p, size=%zu"
omrport.137 4 1 3 N Trc_PRT_cuda_linkerComplete_exit " <omrcuda_linkerComplete: %d"
omrport.138 2 1 3 N Trc_PRT_cuda_linkerCreate_entry " >omrcuda_linkerCreate(device=%u, options=%p)"
omrport.139 1 1 1 N Trc_PRT_cuda_linkerCreate_nomem "* omrcuda_linkerCreate: malloc failed"
omrport.140 0 1 3 N Trc_PRT_cuda_linkerCreate_result "  omrcuda_linkerCreate: linker=%p"
omrport.141 4 1 3 N Trc_PRT_cuda_linkerCreate_exit " <omrcuda_linkerCreate: %d"
omrport.142 2 1 3 N Trc_PRT_cuda_linkerDestroy_entry " >omrcuda_linkerDestroy(device=%u, linker=%p)"
omrport.143 4 1 3 N Trc_PRT_cuda_linkerDestroy_exit " <omrcuda_linkerDestroy: %d"
omrport.144 2 1 3 N Trc_PRT_cuda_memcpy_entry " >omrcuda_memcpy(device=%u, targetAddress=%p, sourceAddress=%p, byteCount=%zu, direction=%d)"
omrport.145 4 1 3 N Trc_PRT_cuda_memcpy_exit " <omrcuda_memcpy: %d"
omrport.146 2 1 3 N Trc_PRT_cuda_memcpyPeer_entry " >omrcuda_memcpyPeer(targetDeviceId=%u, targetAddress=%p, sourceDeviceId=%u sourceAddress=%p, byteCount=%zu)"
omrport.147 4 1 3 N Trc_PRT_cuda_memcpyPeer_exit " <omrcuda_memcpyPeer: %d"
omrport.148 4 1 3 N Trc_PRT_cuda_memset8_exit " <omrcuda_memset8: %d"
omrport.149 4 1 3 N Trc_PRT_cuda_memset16_exit " <omrcuda_memset16: %d"
omrport.150 4 1 3 N Trc_PRT_cuda_memset32_exit " <omrcuda_memset32: %d"
omrport.151 2 1 3 N Trc_PRT_cuda_moduleGetFunction_entry " >omrcuda_moduleGetFunction(device=%u, module=%p, name=%s)"
omrport.152 0 1 3 N Trc_PRT_cuda_moduleGetFunction_result "  omrcuda_moduleGetFunction: address=%p"
omrport.153 4 1 3 N Trc_PRT_cuda_moduleGetFunction_exit " <omrcuda_moduleGetFunction: %d"
omrport.154 2 1 3 N Trc_PRT_cuda_moduleGetGlobal_entry " >omrcuda_moduleGetGlobal(device=%u, module=%p, name=%s)"
omrport.155 0 1 3 N Trc_PRT_cuda_moduleGetGlobal_result "  omrcuda_moduleGetGlobal: address=%p, size=%zu"
omrport.156 4 1 3 N Trc_PRT_cuda_moduleGetGlobal_exit " <omrcuda_moduleGetGlobal: %d"
omrport.157 2 1 3 N Trc_PRT_cuda_moduleGetSurfRef_entry " >omrcuda_moduleGetSurfRef(device=%u, module=%p, name=%s)"
omrport.158 0 1 3 N Trc_PRT_cuda_moduleGetSurfRef_result "  omrcuda_moduleGetSurfRef: address=%p"
omrport.159 4 1 3 N Trc_PRT_cuda_moduleGetSurfRef_exit " <omrcuda_moduleGetSurfRef: %d"
omrport.160 2 1 3 N Trc_PRT_cuda_moduleGetTexRef_entry " >omrcuda_moduleGetTexRef(device=%u, module=%p, name=%s)"
omrport.161 0 1 3 N Trc_PRT_cuda_moduleGetTexRef_result "  omrcuda_moduleGetTexRef: address=%p"
omrport.162 4 1 3 N Trc_PRT_cuda_moduleGetTexRef_exit " <omrcuda_moduleGetTexRef: %d"
omrport.163 2 1 3 N Trc_PRT_cuda_moduleLoad_entry " >omrcuda_moduleLoad(device=%u, image=%p, options=%p)"
omrport.164 0 1 3 N Trc_PRT_cuda_moduleLoad_result "  omrcuda_moduleLoad: address=%p"
omrport.165 4 1 3 N Trc_PRT_cuda_moduleLoad_exit " <omrcuda_moduleLoad: %d"
omrport.166 2 1 3 N Trc_PRT_cuda_moduleUnload_entry " >omrcuda_moduleUnload(device=%u, module=%p)"
omrport.167 4 1 3 N Trc_PRT_cuda_moduleUnload_exit " <omrcuda_moduleUnload: %d"
omrport.168 2 1 3 N Trc_PRT_cuda_runtimeGetVersion_entry " >omrcuda_runtimeGetVersion"
omrport.169 0 1 3 N Trc_PRT_cuda_runtimeGetVersion_result "  omrcuda_runtimeGetVersion: version=%u"
omrport.170 4 1 3 N Trc_PRT_cuda_runtimeGetVersion_exit " <omrcuda_runtimeGetVersion: %d"
omrport.171 2 1 3 N Trc_PRT_cuda_StreamCallback_handler_entry " >omrcuda_StreamCallback handler(stream=%p, error=%d, data=%p)"
omrport.172 4 1 3 N Trc_PRT_cuda_StreamCallback_handler_exit " <omrcuda_StreamCallback handler"
omrport.173 2 1 3 N Trc_PRT_cuda_streamAddCallback_entry " >omrcuda_streamAddCallback(device=%u, stream=%p, callback=%p, data=%zu)"
omrport.174 1 1 1 N Trc_PRT_cuda_streamAddCallback_nomem "* omrcuda_streamAddCallback: malloc failed"
omrport.175 0 1 3 N Trc_PRT_cuda_streamAddCallback_instance "  omrcuda_streamAddCallback: callback=%p"
omrport.176 4 1 3 N Trc_PRT_cuda_streamAddCallback_exit " <omrcuda_streamAddCallback: %d"
omrport.177 2 1 3 N Trc_PRT_cuda_streamCreate_entry " >omrcuda_streamCreate(device=%u)"
omrport.178 0 1 3 N Trc_PRT_cuda_streamCreate_result "  omrcuda_streamCreate: stream=%p"
omrport.179 4 1 3 N Trc_PRT_cuda_streamCreate_exit " <omrcuda_streamCreate: %d"
omrport.180 2 1 3 N Trc_PRT_cuda_streamCreateWithPriority_entry " >omrcuda_streamCreateWithPriority(device=%u, priority=%d, flags=%u)"
omrport.181 0 1 3 N Trc_PRT_cuda_streamCreateWithPriority_result "  omrcuda_streamCreateWithPriority: stream=%p"
omrport.182 4 1 3 N Trc_PRT_cuda_streamCreateWithPriority_exit " <omrcuda_streamCreateWithPriority: %d"
omrport.183 2 1 3 N Trc_PRT_cuda_streamDestroy_entry " >omrcuda_streamDestroy(device=%u, stream=%p)"
omrport.184 4 1 3 N Trc_PRT_cuda_streamDestroy_exit " <omrcuda_streamDestroy: %d"
omrport.185 2 1 3 N Trc_PRT_cuda_streamGetFlags_entry " >omrcuda_streamGetFlags(device=%u, stream=%p)"
omrport.186 0 1 3 N Trc_PRT_cuda_streamGetFlags_result "  omrcuda_streamGetFlags: flags=%u"
omrport.187 4 1 3 N Trc_PRT_cuda_streamGetFlags_exit " <omrcuda_streamGetFlags: %d"
omrport.188 2 1 3 N Trc_PRT_cuda_streamGetPriority_entry " >omrcuda_streamGetPriority(device=%u, stream=%p)"
omrport.189 0 1 3 N Trc_PRT_cuda_streamGetPriority_result "  omrcuda_streamGetPriority: priority=%d"
omrport.190 4 1 3 N Trc_PRT_cuda_streamGetPriority_exit " <omrcuda_streamGetPriority: %d"
omrport.191 2 1 3 N Trc_PRT_cuda_streamQuery_entry " >omrcuda_streamQuery(device=%u, stream=%p)"
omrport.192 4 1 3 N Trc_PRT_cuda_streamQuery_exit " <omrcuda_streamQuery: %d"
omrport.193 2 1 3 N Trc_PRT_cuda_streamSynchronize_entry " >omrcuda_streamSynchronize(device=%u, stream=%p)"
omrport.194 4 1 3 N Trc_PRT_cuda_streamSynchronize_exit " <omrcuda_streamSynchronize: %d"
omrport.195 2 1 3 N Trc_PRT_cuda_streamWaitEvent_entry " >omrcuda_streamWaitEvent(device=%u, stream=%p, event=%p)"
omrport.196 4 1 3 N Trc_PRT_cuda_streamWaitEvent_exit " <omrcuda_streamWaitEvent: %d"
omrport.197 2 1 3 N Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_entry " >omrcuda_funcMaxActiveBlocksPerMultiprocessor(deviceId=%u, function=%p, blockSize=%u, dynamicSharedMemorySize=%u, flags=%u)"
omrport.198 0 1 3 N Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_result "  omrcuda_funcMaxActiveBlocksPerMultiprocessor: max=%u"
omrport.199 4 1 3 N Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_exit " <omrcuda_funcMaxActiveBlocksPerMultiprocessor: %d"
omrport.200 2 1 3 N Trc_PRT_cuda_funcMaxPotentialBlockSize_entry " >omrcuda_funcMaxPotentialBlockSize(deviceId=%u, function=%p, dynamicSharedMemoryFunction=%p, userData=%p, blockSizeLimit=%u, flags=%u)"
omrport.201 0 1 3 N Trc_PRT_cuda_funcMaxPotentialBlockSize_result "  omrcuda_funcMaxPotentialBlockSize: minGridSize=%u, maxBlockSize=%u"
omrport.202 4 1 3 N Trc_PRT_cuda_funcMaxPotentialBlockSize_exit " <omrcuda_funcMaxPotentialBlockSize: %d"
omrport.203 2 1 3 N Trc_PRT_cuda_memcpyAsync_entry " >omrcuda_memcpyAsync(device=%u, targetAddress=%p, sourceAddress=%p, byteCount=%zu, direction=%d, stream=%p)"
omrport.204 4 1 3 N Trc_PRT_cuda_memcpyAsync_exit " <omrcuda_memcpyAsync: %d"
omrport.205 2 1 3 N Trc_PRT_cuda_memcpyPeerAsync_entry " >omrcuda_memcpyPeerAsync(targetDeviceId=%u, targetAddress=%p, sourceDeviceId=%u sourceAddress=%p, byteCount=%zu, stream=%p)"
omrport.206 4 1 3 N Trc_PRT_cuda_memcpyPeerAsync_exit " <omrcuda_memcpyPeerAsync: %d"
omrport.207 2 1 3 N Trc_PRT_cuda_memcpy2D_entry " >omrcuda_memcpy2D(device=%u, targetAddress=%p, targetPitch=%zu, sourceAddress=%p, sourcePitch=%zu, width=%zu, height=%zu, direction=%d)"
omrport.208 4 1 3 N Trc_PRT_cuda_memcpy2D_exit " <omrcuda_memcpy2D: %d"
omrport.209 2 1 3 N Trc_PRT_cuda_memcpy2DAsync_entry " >omrcuda_memcpy2DAsync(device=%u, targetAddress=%p, targetPitch=%zu, sourceAddress=%p, sourcePitch=%zu, width=%zu, height=%zu, direction=%d, stream=%p)"
omrport.210 4 1 3 N Trc_PRT_cuda_memcpy2DAsync_exit " <omrcuda_memcpy2DAsync: %d"
omrport.211 2 1 3 N Trc_PRT_cuda_memset8_entry " >omrcuda_memset8(device=%u, deviceAddress=%p, value=%u count=%zu, stream=%p)"
omrport.212 2 1 3 N Trc_PRT_cuda_memset16_entry " >omrcuda_memset16(device=%u, deviceAddress=%p, value=%u count=%zu, stream=%p)"
omrport.213 2 1 3 N Trc_PRT_cuda_memset32_entry " >omrcuda_memset32(device=%u, deviceAddress=%p, value=%u count=%zu, stream=%p)"
omrport.214 2 1 5 N Trc_PRT_file_open_Entry " >omrfile_open filename = %s, flags = %d, mode = %d"
omrport.215 4 1 5 N Trc_PRT_file_open_Exit " <omrfile_open returns fd=%d"
omrport.216 2 1 5 N Trc_PRT_file_read_Entry " >omrfile_read fd = %zd, buf = %p, bytes = %zd"
omrport.217 4 1 5 N Trc_PRT_file_read_Exit " <omrfile_read returns bytesRead=%d"
omrport.218 2 1 5 N Trc_PRT_file_write_Entry " >omrfile_write fd = %zd, buf = %p, bytes = %zd"
omrport.219 4 1 5 N Trc_PRT_file_write_Exit " <omrfile_write returns bytesWritten=%d"
omrport.220 2 1 5 N Trc_PRT_file_attr_Entry " >omrfile_attr path = %s"
omrport.221 4 1 1 N Trc_PRT_file_attr_ExitFail " <omrfile_attr failed. errorCode=%d"
omrport.222 4 1 5 N Trc_PRT_file_attr_ExitDir " <omrfile_attr returns EsIsDir (%d)"
omrport.223 4 1 5 N Trc_PRT_file_attr_ExitFile " <omrfile_attr returns EsIsFile (%d)"
omrport.224 2 1 5 N Trc_PRT_file_close_Entry " >omrfile_close fd = %zd"
omrport.225 4 1 1 N Trc_PRT_file_close_ExitFail " <omrfile_close failed. errorCode=%d"
omrport.226 4 1 5 N Trc_PRT_file_close_Exit " <omrfile_close returns rc=%d"
omrport.227 4 1 5 N Trc_PRT_file_findfirst_Exit " <omrfile_findfirst returns fd=%d"
omrport.228 4 1 5 N Trc_PRT_file_findnext_Exit " <omrfile_findnext returns rc=%d"
omrport.229 2 1 5 N Trc_PRT_file_findclose_Entry " >omrfile_findclose findhandle = %zd"
omrport.230 4 1 5 N Trc_PRT_file_findclose_Exit " <omrfile_findclose returns. error=%d"
omrport.231 2 1 5 N Trc_PRT_file_lastmod_Entry " >omrfile_lastmod path = %s"
omrport.232 4 1 5 N Trc_PRT_file_lastmod_Exit " <omrfile_lastmod returns. Result=%lld"
omrport.233 2 1 5 N Trc_PRT_file_length_Entry " >omrfile_length path = %s"
omrport.234 4 1 5 N Trc_PRT_file_length_Exit " <omrfile_length returns. Result=%lld"
omrport.235 2 1 5 N Trc_PRT_file_seek_Entry " >omrfile_seek fd = %zd, offset = %lld, whence = %d"
omrport.236 4 1 5 N Trc_PRT_file_seek_Exit " <omrfile_seek returns result=%lld"
omrport.237 2 1 5 N Trc_PRT_file_sync_Entry " >omrfile_sync fd = %zd"
omrport.238 4 1 5 N Trc_PRT_file_sync_Exit " <omrfile_sync returns result=%d"
omrport.239 2 1 5 N Trc_PRT_file_printf_Entry " >omrfile_printf fd = %zd, format = %s"
omrport.240 4 1 5 N Trc_PRT_file_printf_Exit " <omrfile_printf returns void"
omrport.241 2 1 5 N Trc_PRT_file_setlength_Entry " >omrfile_setlength fd = %zd, newLength = %lld"
omrport.242 4 1 5 N Trc_PRT_file_setlength_Exit " <omrfile_setlength returns result=%d"
omrport.243 2 1 5 N Trc_PRT_file_lock_bytes_win32_entered " >omrfile_lock_bytes: Entered, fd=%zd, lockFlags=0x%x, offset=%llu, length=%llu"
omrport.244 0 1 5 N Trc_PRT_file_lock_bytes_win32_callingLockFileEx "  omrfile_lock_bytes: Calling LockFileEx dwFlags=0x%x, offset=%u, offsetHigh=%u, length=%u, lengthHigh=%u"
omrport.245 4 1 5 N Trc_PRT_file_lock_bytes_win32_exiting " <omrfile_lock_bytes: Successful, exiting"
omrport.246 2 1 5 N Trc_PRT_file_lock_bytes_unix_entered " >omrfile_lock_bytes: Entered, fd=%zd, lockFlags=0x%x, offset=%llu, length=%llu"
omrport.247 0 1 5 N Trc_PRT_file_lock_bytes_unix_callingFcntl "  omrfile_lock_bytes: Calling fcntl command=%d, type=%d, whence=%d, start=%llu, length=%llu"
omrport.248 4 1 5 N Trc_PRT_file_lock_bytes_unix_exiting " <omrfile_lock_bytes: Successful, exiting"
omrport.249 2 1 5 N Trc_PRT_file_unlock_bytes_win32_entered " >omrfile_unlock_bytes: Entered, fd=%zd, offset=%llu, length=%llu"
omrport.250 0 1 5 N Trc_PRT_file_unlock_bytes_win32_callingUnlockFileEx "  omrfile_unlock_bytes: Calling UnlockFileEx offset=%u, offsetHigh=%u, length=%u, lengthHigh=%u"
omrport.251 4 1 5 N Trc_PRT_file_unlock_bytes_win32_exiting " <omrfile_unlock_bytes: Successful, exiting"
omrport.252 2 1 5 N Trc_PRT_file_unlock_bytes_unix_entered " >omrfile_unlock_bytes: Entered, fd=%zd, offset=%llu, length=%llu"
omrport.253 0 1 5 N Trc_PRT_file_unlock_bytes_unix_callingFcntl "  omrfile_unlock_bytes: Calling fcntl command=%d, type=%d, whence=%d, start=%llu, length=%llu"
omrport.254 4 1 5 N Trc_PRT_file_unlock_bytes_unix_exiting " <omrfile_unlock_bytes: Successful, exiting"
omrport.255 1 1 1 N Trc_PRT_file_open_Exception1 "* omrfile_open returns failure, filename = %s, flags (%d) are incorrect"
omrport.256 1 1 1 N Trc_PRT_file_open_Exception2 "* omrfile_open returns failure, filename = %s, os errno = %d, portable errno = %d"
omrport.257 1 1 1 N Trc_PRT_file_open_Exception3 "* omrfile_open returns failure, filename = %s, os errno = %d, portable errno = %d"
omrport.258 1 1 1 N Trc_PRT_file_open_Exception4 "* omrfile_open returns failure, filename = %s, stat error"
omrport.259 2 1 5 N Trc_PRT_file_chmod_Entry " >omrfile_chmod entry path = %s mode = %d"
omrport.260 4 1 5 N Trc_PRT_file_chmod_Exit " <omrfile_chmod exit actual mode = %zd"
omrport.261 1 1 5 N Trc_PRT_file_chmod_getAttributesFailed "* omrfile_chmod error getting attributes, error = %d"
omrport.262 1 1 5 N Trc_PRT_file_chmod_setAttributesFailed "* omrfile_chmod error setting attributes, error = %d"
omrport.263 0 1 3 N Trc_PRT_file_chown_entry "  omrfile_chown path=%s owner=%zd group=%zd"
omrport.264 0 1 3 N Trc_PRT_file_chown_exit "  omrfile_chown path=%s owner=%zd group=%zd status=%d"
omrport.265 0 1 3 N Trc_PRT_file_mkdir_entry2 "  omrfile_mkdir path=%s"
omrport.266 0 1 3 N Trc_PRT_file_mkdir_exit2 "  omrfile_mkdir status=%d"
omrport.267 1 1 1 N Trc_PRT_file_lock_bytes_win32_failed_noReadWrite "* omrfile_lock_bytes: No read or write flag specified"
omrport.268 1 1 1 N Trc_PRT_file_lock_bytes_win32_failed_noWaitNoWait "* omrfile_lock_bytes: No wait or nowait flag specified"
omrport.269 1 1 1 N Trc_PRT_file_lock_bytes_unix_failed_noReadWrite "* omrfile_lock_bytes: No read or write flag specified"
omrport.270 1 1 1 N Trc_PRT_file_lock_bytes_unix_failed_noWaitNoWait "* omrfile_lock_bytes: No wait or nowait flag specified"
omrport.271 1 1 1 N Trc_PRT_file_lock_bytes_unix_failed_badFcntl "* omrfile_lock_bytes: fcntl failed, errno=%d"
omrport.272 1 1 1 N Trc_PRT_file_unlock_bytes_unix_failed_badFcntl "* omrfile_unlock_bytes: fcntl failed, errno=%d"
omrport.273 2 1 3 N Trc_PRT_file_fstat_Entry " >omrfile_fstat: Entry with fd=%zd"
omrport.274 1 1 1 N Trc_PRT_file_fstat_fstatFailed "* omrfile_fstat: fstat() failed with errno=%zd"
omrport.275 1 1 1 N Trc_PRT_file_fstat_fstatfsFailed "* omrfile_fstat: fstatfs() failed with errno=%zd"
omrport.276 1 1 1 N Trc_PRT_file_fstat_fstatvfsFailed "* omrfile_fstat: fstatvfs() failed with errno=%zd"
omrport.277 4 1 3 N Trc_PRT_file_fstat_Exit " <omrfile_fstat: Exiting with rc=%d"
omrport.278 2 1 5 N Trc_PRT_file_blockingasync_read_Entry " >omrfile_blockingasync_read fd = %zd, buf = %p, bytes = %zd"
omrport.279 4 1 5 N Trc_PRT_file_blockingasync_read_Exit " <omrfile_blockingasync_read returns bytesRead=%zd"
omrport.280 2 1 5 N Trc_PRT_file_blockingasync_write_Entry " >omrfile_blockingasync_write fd = %zd, buf = %p, bytes = %zd"
omrport.281 4 1 5 N Trc_PRT_file_blockingasync_write_Exit " <omrfile_blockingasync_write returns bytesWritten=%zd"
omrport.282 4 1 5 N Trc_PRT_file_findfirst_ExitFail " <omrfile_findfirst failed. errorCode=%d"
omrport.283 4 1 5 N Trc_PRT_file_findnext_ExitFail " <omrfile_findnext failed. errorCode=%d"
omrport.284 2 1 5 N Trc_PRT_file_flength_Entry " >omrfile_flength fd = %zd"
omrport.285 4 1 5 N Trc_PRT_file_flength_Exit " <omrfile_flength returns. Length=%lld"
omrport.286 4 1 5 N Trc_PRT_file_flength_ExitFail " <omrfile_flength failed. errorCode=%d"
omrport.287 2 1 5 N Trc_PRT_file_findfirst_Entry2 " >omrfile_findfirst path = %s, resultbuf = %s"
omrport.288 2 1 5 N Trc_PRT_file_findnext_Entry2 " >omrfile_findnext findhandle = %zd, resultbuf = %s"
omrport.289 2 1 5 N Trc_PRT_file_blockingasync_startup_Entry " >omrfile_blockingasync_startup enters."
omrport.290 4 1 5 N Trc_PRT_file_blockingasync_startup_Exit " <omrfile_blockingasync_startup exits successfully."
omrport.291 4 1 5 N Trc_PRT_file_blockingasync_startup_alloc_tls_failure " <omrfile_blockingasync_startup failed to alloc TLS. LastError = %d"
omrport.292 2 1 5 N Trc_PRT_file_blockingasync_shutdown_Entry " >omrfile_blockingasync_shutdown enters."
omrport.293 4 1 5 N Trc_PRT_file_blockingasync_shutdown_Exit " <omrfile_blockingasync_shutdown exits."
omrport.294 4 1 5 N Trc_PRT_file_unlock_bytes_win32_exiting_with_error " <omrfile_unlock_bytes: Failed, exiting. ErrorCode = %d"
omrport.295 4 1 5 N Trc_PRT_file_lock_bytes_win32_exiting_with_error " <omrfile_lock_bytes: Failed, exiting. ErrorCode = %d"
omrport.296 1 1 1 N Trc_PRT_file_close_invalidFileHandle "* omrfile_close invalid file handle"
omrport.297 2 1 1 N Trc_PRT_heap_port_omrheap_create_entry " >omrheap_create entry heapBase=%p, heapSize=%zu, flag=%zu"
omrport.298 5 1 1 N Trc_PRT_heap_port_omrheap_create_null_heapBase_exit "*<omrheap_create exit heapBase is NULL"
omrport.299 5 1 1 N Trc_PRT_heap_port_omrheap_create_insufficient_heapSize_exit "*<omrheap_create exit insufficient heapSize specified"
omrport.300 4 1 1 N Trc_PRT_heap_port_omrheap_create_exit " <omrheap_create exit - heap created: %p"
omrport.301 2 1 10 N Trc_PRT_heap_port_omrheap_free_entry " >omrheap_free entry heapBase=%p, memPtr=%p"
omrport.302 5 1 10 N Trc_PRT_heap_port_omrheap_free_null_memptr_exit "*<omrheap_free exit memPtr is NULL"
omrport.303 4 1 10 N Trc_PRT_heap_port_omrheap_free_exit " <omrheap_free exit"
omrport.304 2 1 10 N Trc_PRT_heap_port_omrheap_allocate_entry " >omrheap_allocate entry heapBase=%p, requestSize=%zu"
omrport.305 5 10 1 N Trc_PRT_heap_port_omrheap_allocate_heap_full_exit "*<omrheap_allocate exit the entire heap is full"
omrport.306 5 1 10 N Trc_PRT_heap_port_omrheap_allocate_cannot_satisfy_reuqest_exit "*<omrheap_allocate exit the requested size is too large"
omrport.307 4 1 10 N Trc_PRT_heap_port_omrheap_allocate_exit " <omrheap_allocate exit returned memory = %p"
omrport.308 2 1 10 N Trc_PRT_heap_port_omrheap_query_size_Entry " >omrheap_query_size entry portLibrary=%p, heap=%p, address=%p"
omrport.309 4 1 10 N Trc_PRT_heap_port_omrheap_query_size_Exit " <omrheap_query_size entry result=%zu"
omrport.310 2 1 10 N Trc_PRT_heap_port_omrheap_reallocate_entry " >omrheap_reallocate entry heap=%p, address=%zu, byteAmount=%zu"
omrport.311 0 1 10 N Trc_PRT_heap_port_omrheap_reallocate_null_address "  omrheap_reallocate got null address"
omrport.312 0 1 10 N Trc_PRT_heap_port_omrheap_reallocate_no_realloc_necessary "  omrheap_reallocate no realloc necessary"
omrport.313 0 1 10 N Trc_PRT_heap_port_omrheap_reallocate_relocating "  omrheap_reallocate relocating"
omrport.314 0 1 10 N Trc_PRT_heap_port_omrheap_reallocate_grow "  omrheap_reallocate grow growAmount=%zu, residualSize=%zu"
omrport.315 0 1 10 N Trc_PRT_heap_port_omrheap_reallocate_shrink "  omrheap_reallocate shrink by %zu slots"
omrport.316 4 1 10 N Trc_PRT_heap_port_omrheap_reallocate_exit " <omrheap_reallocate exit - address: %p"
omrport.317 1 1 1 N Trc_PRT_heap_port_omrheap_reallocate_arithmetic_overflow "* omrheap_reallocate: arithmetic overflow, byteAmount=%u"
omrport.318 1 1 1 N Trc_PRT_heap_port_omrheap_allocate_arithmetic_overflow "* omrheap_allocate: arithmetic overflow, byteAmount=%u"
omrport.319 2 1 1 N Trc_PRT_heap_port_omrheap_grow_entry " >omrheap_grow entry heap=%p, growAmount=%zu"
omrport.320 5 1 1 N Trc_PRT_heap_port_omrheap_grow_insufficient_heapSize_exit "*<omrheap_create exit insufficient heapSize specified"
omrport.321 4 1 1 N Trc_PRT_heap_port_omrheap_grow_exit " <omrheap_grow exit - heap grown: %p"
omrport.322 4 1 10 N Trc_PRT_mem_omrmem_allocate_memory_Exit " <omrmem_allocate_memory returns %p"
omrport.323 2 1 10 N Trc_PRT_mem_omrmem_free_memory_Entry " >omrmem_free_memory pointer=%p"
omrport.324 4 1 10 N Trc_PRT_mem_omrmem_free_memory_Exit " <omrmem_free_memory"
omrport.325 4 1 5 N Trc_PRT_mem_omrmem_reallocate_memory_Exit " <omrmem_reallocate_memory returns %p"
omrport.326 2 1 10 N Trc_PRT_mem_omrmem_allocate_memory32_Entry " >omrmem_allocate_memory32 byteAmount=%u"
omrport.327 4 1 10 N Trc_PRT_mem_omrmem_allocate_memory32_Exit " <omrmem_allocate_memory32 returns %p"
omrport.328 2 1 10 N Trc_PRT_mem_omrmem_free_memory32_Entry " >omrmem_free_memory32 pointer=%p"
omrport.329 4 1 10 N Trc_PRT_mem_omrmem_free_memory32_Exit " <omrmem_free_memory32"
omrport.330 1 1 1 N Trc_PRT_mem_allocate_memory32_failed_vmemID "* allocate_memory32 failed to allocate vmem ID callSite=%s"
omrport.331 1 1 1 N Trc_PRT_mem_allocate_memory32_failed_page "* allocate_memory32 failed to locate vmem page size callSite=%s"
omrport.332 1 1 1 N Trc_PRT_mem_allocate_memory32_failed_alloc "* allocate_memory32 failed to allocate byteAmount=%u callSite=%s"
omrport.333 2 1 10 N Trc_PRT_mem_omrmem_allocate_memory_Entry " >omrmem_allocate_memory byteAmount=%zu callSite=%s"
omrport.334 2 1 10 N Trc_PRT_mem_allocate_memory32_Entry " >allocate_memory32 entry byteAmount=%zu"
omrport.335 4 1 10 N Trc_PRT_mem_allocate_memory32_Exit " <allocate_memory32 exit returns 0x%p"
omrport.336 0 1 10 N Trc_PRT_mem_allocate_memory32_alloc_large_region "  vmem allocate large region @ 0x%p, size: %zu"
omrport.337 0 1 10 N Trc_PRT_mem_allocate_memory32_suballoc_block "  Suballocate memory @ 0x%p from omrheap @ 0x%p, size: %zu"
omrport.338 0 1 10 N Trc_PRT_mem_allocate_memory32_alloc_normal_region_suballoc "  vmem allocate normal region @ 0x%p, omrheap @ 0x%p, subAlloc memory @ 0x%p, size %zu"
omrport.339 0 1 10 N Trc_PRT_mem_allocate_memory32_alloc_normal_region_consumed "  vmem allocate normal region @ 0x%p, used entire region for size: %zu"
omrport.340 1 1 1 N Trc_PRT_mem_allocate_memory32_failed_heapWrapper "* allocate_memory32 failed to allocate J9HeapWrapper callSite=%s"
omrport.341 2 1 10 N Trc_PRT_mem_free_memory32_Entry " >free_memory32 entry memoryPointer=0x%p"
omrport.342 4 1 10 N Trc_PRT_mem_free_memory32_Exit " <free_memory32 exit"
omrport.343 1 1 1 N Trc_PRT_mem_free_memory32_no_matching_heap_found "* did not find matching heap for 0x%p"
omrport.344 0 1 10 N Trc_PRT_mem_free_memory32_found_omrheap "  Found a suballocating J9heap @ 0x%p"
omrport.345 0 1 10 N Trc_PRT_mem_free_memory32_found_vmem_heap "  Found a vmem allocated memory as a heap @ 0x%p"
omrport.346 2 1 1 N Trc_PRT_mem_omrmem_ensure_capacity32_Entry " >omrmem_ensure_capacity32 entry byteAmount=%zu"
omrport.347 4 1 1 N Trc_PRT_mem_omrmem_ensure_capacity32_Exit " <omrmem_ensure_capacity32 exit returnValue=%zu"
omrport.348 2 1 1 N Trc_PRT_mem_ensure_capacity32_Entry " >ensure_capacity32 entry byteAmount=%zu"
omrport.349 4 1 1 N Trc_PRT_mem_ensure_capacity32_Exit " <ensure_capacity32 exit returnValue=%zu"
omrport.350 0 1 5 N Trc_PRT_mem_ensure_capacity32_already_initialized "  ensure_capacity32 found omrheap, heap=0x%p, heapSize=%zu"
omrport.351 0 1 5 N Trc_PRT_mem_ensure_capacity32_uninitialized "  ensure_capacity32 omrheap not yet initialized"
omrport.352 12 1 1 N Trc_Assert_PRT_mem_categories_already_set "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.353 2 1 5 N Trc_PRT_mem_omrmem_reallocate_memory_Entry " >omrmem_reallocate_memory memoryPointer=%p byteAmount=%u callSite=%p category=%u"
omrport.354 12 1 3 N Trc_Assert_PTR_mem_categories_increment_counters_NULL_category "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.355 12 1 3 N Trc_Assert_PTR_mem_categories_decrement_counters_NULL_category "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.356 12 1 3 N Trc_Assert_PTR_mem_categories_increment_bytes_NULL_category "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.357 12 1 3 N Trc_Assert_PTR_mem_categories_decrement_bytes_NULL_category "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.358 1 1 1 N Trc_PRT_mem_advise_and_free_memory_basic_madvise_failed "* omrmem_advise_and_free_memory_basic : madvise(%p,%zu, MADV_DONTNEED) failed, with errno %d"
omrport.359 12 1 1 N Trc_Assert_PRT_memory_corruption_detected "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.360 1 1 1 N Trc_PRT_mem_reserveAndCommitRegion_reserveMemoryFailure "* reserveAndCommitRegion exit. Failed to reserve memory. reserveSize=%zu"
omrport.361 1 1 1 N Trc_PRT_mem_reserveAndCommitRegion_commitMemoryFailure "* reserveAndCommitRegion exit. Failed to commit memory. reservePtr=0x%p, commitSize=%zu, heapWrapper->vmemID=0x%p"
omrport.362 1 1 1 N Trc_PRT_mem_iterateHeapsAndSubAllocate_commitMemoryFailure "* Failed to commit memory. reservePtr=0x%p, commitSize=%zu, heapWrapper->vmemID=0x%p"
omrport.363 0 1 5 N Trc_PRT_mem_iterateHeapsAndSubAllocate_heap_grow_successful "  Heap succeed to grow. heap=0x%p, commitSize=%zu"
omrport.364 1 1 1 N Trc_PRT_mem_iterateHeapsAndSubAllocate_heap_grow_failed "* Heap succeed to grow. heap=0x%p, commitSize=%zu"
omrport.365 0 1 1 N Trc_PRT_mem_iterateHeapsAndSubAllocate_failed_to_suballoc "  Failed to suballoc (byteAmount=%zu) from existing heaps."
omrport.366 4 1 1 N Trc_PRT_mem_ensure_capacity32_NotRequired_Exit " <ensure_capacity32 exit returnValue=OMRPORT_ENSURE_CAPACITY_NOT_REQUIRED"
omrport.367 12 1 6 N Assert_AddressAbove4GBBar "* ** ASSERTION FAILED ** at %s:%d: %s"
omrport.368 1 1 1 N Trc_PRT_memory_alloc_returned_null_2 "* memory allocate returned null pointer.  Callsite = %s, byteAmount = %zu"
omrport.369 1 1 1 N Trc_PRT_mem_omrmem_allocate_memory32_returned_null "* memory32 allocate returned null pointer. Callsite = %s, byteAmount = %zu"
omrport.370 1 1 1 N Trc_PRT_mem_allocate_memory32_alloc_large_region_failed_2 "* vmem allocate large region failed. Callsite = %s, byteAmount = %zu"
omrport.371 1 1 5 N Trc_PRT_mem_allocate_memory32_suballoc_block_failed "* Suballocate memory from omrheap failed. Heap = %p, size = %zu"
omrport.372 1 1 1 N Trc_PRT_mem_allocate_memory32_alloc_normal_region_failed_2 "* vmem allocate normal region failed. Callsite = %s, regionSize = %zu"
omrport.373 1 1 1 N Trc_PRT_mem_omrmem_reallocate_memory_failed_2 "* omrmem_reallocate_memory failed. Callsite = %s, memoryPointer = %p, byteAmount = %zu"
omrport.374 2 1 10 N Trc_PRT_mem_omrmem_advise_and_free_memory_Entry " >omrmem_advise_and_free_memory pointer=%p"
omrport.375 4 1 10 N Trc_PRT_mem_omrmem_advise_and_free_memory_Exit " <omrmem_advise_and_free_memory"
omrport.376 1 1 1 N Trc_PRT_mem_advise_and_free_memory_basic_disclaim64_failed "* omrmem_advise_and_free_memory_basic : disclaim64(%p,%zu, DISCLAIM_ZEROMEM) failed, with errno %d"
omrport.377 1 1 1 N Trc_PRT_mem_advise_and_free_memory_basic_vmgetinfo_failed "* omrmem_advise_and_free_memory_basic : vmgetinfo failed, errno=%d"
omrport.378 1 1 1 N Trc_PRT_mem_advise_and_free_memory_basic_j9discard_data_failed "* omrmem_advise_and_free_memory_basic : j9discard_data(%p,%zu) failed"
omrport.379 1 1 1 N Trc_PRT_mem_advise_and_free_memory_basic_Pgser_Release_failed "* omrmem_advise_and_free_memory_basic : Pgser_Release(%p,%zu) failed"
omrport.380 0 1 5 N Trc_PRT_mem_advise_and_free_memory_basic_params "  omrmem_advise_and_free_memory_basic : pagesize=%zu memoryPointer=%p memorySize=%zu"
omrport.381 0 1 10 N Trc_PRT_mem_advise_and_free_memory_basic_oscall "  omrmem_advise_and_free_memory_basic : memPtrPageRounded=%p memPtrSizePageRounded=%zu"
omrport.382 2 1 1 N Trc_PRT_mmap_map_file_default_entered " >omrmmap_map_file: Entered, file=%zd, size=%zu"
omrport.383 4 1 1 N Trc_PRT_mmap_map_file_default_badfile " <omrmmap_map_file: Bad file supplied"
omrport.384 0 1 1 N Trc_PRT_mmap_map_file_default_allocPointer "  omrmmap_map_file: allocPointer allocated, addr=%p, size=%zu"
omrport.385 4 1 1 N Trc_PRT_mmap_map_file_default_badallocPointer " <omrmmap_map_file: Bad allocPointer"
omrport.386 0 1 1 N Trc_PRT_mmap_map_file_default_mappedMemory "  omrmmap_map_file: mappedMemory calculated as %p"
omrport.387 4 1 1 N Trc_PRT_mmap_map_file_default_badread " <omrmmap_map_file: Bad file read"
omrport.388 0 1 1 N Trc_PRT_mmap_map_file_default_readingFile "  omrmmap_map_file: Reading file, bytes read so far = %zu"
omrport.389 4 1 1 N Trc_PRT_mmap_map_file_default_exit " <omrmmap_map_file: Successful, exiting"
omrport.390 2 1 1 N Trc_PRT_mmap_map_file_win32_entered " >omrmmap_map_file: Entered, file=%zd, offset = %lld, size=%zu, mappingName=%s, flags=0x%x"
omrport.391 4 1 1 N Trc_PRT_mmap_map_file_win32_invalidFile " <omrmmap_map_file: Invalid file handle supplied, exiting"
omrport.392 4 1 1 N Trc_PRT_mmap_map_file_win32_writeUnsupported " <omrmmap_map_file: Write not supported, exiting"
omrport.393 4 1 1 N Trc_PRT_mmap_map_file_win32_invalidFlags " <omrmmap_map_file: Invalid flags (could be none or multiple set), exiting"
omrport.394 0 1 1 N Trc_PRT_mmap_map_file_win32_flagsSet "  omrmmap_map_file: Flags set, flProtect=0x%x, dwDesiredAccess=0x%x"
omrport.395 0 1 1 N Trc_PRT_mmap_map_file_win32_mappingName "  omrmmap_map_file: Object mapping name, supplied=%s, amended=%s"
omrport.396 4 1 1 N Trc_PRT_mmap_map_file_win32_badCreateFileMapping " <omrmmap_map_file: CreateFileMapping failed, error=%d"
omrport.397 0 1 1 N Trc_PRT_mmap_map_file_win32_callingMapViewOfFile "  omrmmap_map_file: Calling MapViewOfFile, mapping handle=%d, dwOffsetHigh=%d, dwoffsetLow=%d"
omrport.398 4 1 1 N Trc_PRT_mmap_map_file_win32_badMapViewOfFile " <omrmmap_map_file: MapViewOfFile failed, error=%d"
omrport.399 4 1 1 N Trc_PRT_mmap_map_file_win32_exiting " <omrmmap_map_file: Successful, returning pointer=%p, handle=%p"
omrport.400 2 1 1 N Trc_PRT_mmap_map_file_unix_entered " >omrmmap_map_file: Entered, file=%zd, offset = %lld, size=%zu, mappingName=%s, flags=0x%x"
omrport.401 4 1 1 N Trc_PRT_mmap_map_file_unix_invalidFlags " <omrmmap_map_file: Invalid flags (could be none or multiple set), exiting"
omrport.402 0 1 1 N Trc_PRT_mmap_map_file_unix_flagsSet "  omrmmap_map_file: Flags set, prot=0x%x, flags=0x%x"
omrport.403 4 1 1 N Trc_PRT_mmap_map_file_unix_badMmap " <omrmmap_map_file: Mmap failed, errno=%d"
omrport.404 4 1 1 N Trc_PRT_mmap_map_file_unix_exiting " <omrmmap_map_file: Successful, returning pointer=%p, handle=%p"
omrport.405 0 1 1 N Trc_PRT_mmap_msync_default_entered "  omrmmap_msync: Entered, but not supported on this platform, start=%p, length=%zu, flags=0x%x"
omrport.406 2 1 1 N Trc_PRT_mmap_msync_win32_entered " >omrmmap_msync: Entered start=%p, length=%zu, flags=0x%x"
omrport.407 4 1 1 N Trc_PRT_mmap_msync_win32_badFlushViewOfFile " <omrmmap_msync: FlushViewOfFile failed, error=%d"
omrport.408 4 1 1 N Trc_PRT_mmap_msync_win32_exiting " <omrmmap_msync: Successful, exiting"
omrport.409 2 1 1 N Trc_PRT_mmap_msync_unix_entered " >omrmmap_msync: Entered, start=%p, length=%zu, flags=0x%x"
omrport.410 4 1 1 N Trc_PRT_mmap_msync_unix_invalidFlags " <omrmmap_msync: Invalid flags, WAIT and ASYNC mutually exclusive"
omrport.411 0 1 1 N Trc_PRT_mmap_msync_unix_flagsSet "  omrmmap_msync: Flags set, msync flags=0x%x"
omrport.412 4 1 1 N Trc_PRT_mmap_msync_unix_badMsync " <omrmmap_msync: Msync failed, errno=%d"
omrport.413 4 1 1 N Trc_PRT_mmap_msync_unix_exiting " <omrmmap_msync: Successful, exiting"
omrport.414 1 1 1 N Trc_PRT_mmap_map_file_cannotallocatehandle "* omrmmap_map_file: Could not allocate memory for handle"
omrport.415 2 1 1 N Trc_PRT_mmap_unmap_file_unix_entering " >omrmmap_unmap_file: Entering with handle=%p"
omrport.416 0 1 1 N Trc_PRT_mmap_unmap_file_unix_values "  omrmmap_unmap_file: Handle values are pointer=%p, size=%d"
omrport.417 4 1 1 N Trc_PRT_mmap_unmap_file_unix_exiting " <omrmmap_unmap_file: Exiting with rc=%d"
omrport.418 1 1 1 N Trc_PRT_mmap_map_file_unix_filestatfailed "* omrmmap_map_file: Could not get stats about the file"
omrport.419 0 1 5 N Trc_PRT_mmap_dont_need "  omrmmap_dont_need : pagesize=%zu memoryPointer=%p memorySize=%zu"
omrport.420 0 1 10 N Trc_PRT_mmap_dont_need_oscall "  omrmmap_dont_need : memPtrPageRounded=%p memPtrSizePageRounded=%zu"
omrport.421 1 1 1 N Trc_PRT_mmap_dont_need_madvise_failed "* omrmmap_dont_need : madvise(%p,%zu, MADV_DONTNEED) failed, with errno %d"
omrport.422 1 1 1 N Trc_PRT_mmap_dont_need_disclaim64_failed "* omrmmap_dont_need : disclaim64(%p,%zu, DISCLAIM_ZEROMEM) failed, with errno %d"
omrport.423 1 1 1 N Trc_PRT_mmap_dont_need_j9discard_data_failed "* omrmmap_dont_need : j9discard_data(%p,%zu) failed"
omrport.424 1 1 1 N Trc_PRT_mmap_dont_need_Pgser_Release_failed "* omrmmap_dont_need : Pgser_Release(%p,%zu) failed"
omrport.425 1 1 1 N Trc_PRT_mmap_dont_need_virtual_unlock_failed "* omrmmap_dont_need : VirtualUnlock(%p,%zu) failed, with errno %d"
omrport.426 2 1 2 N Trc_PRT_signal_omrsig_protect_entered " >omrsig_protect: Entered, fn=%p, fn_arg=%p, handler=%p, handler_arg=%p, flags=0x%X"
omrport.427 0 1 1 N Trc_PRT_signal_omrsig_protect_cannot_protect_dueto_Xrs "  omrsig_protect cannot protect, calling fn with fun_arg: fn=%p, fn_arg=%p, flags=0x%X"
omrport.428 4 1 2 N Trc_PRT_signal_omrsig_protect_exiting_did_not_protect_due_to_Xrs " <omrsig_protect: Exiting and did not protect due to Xrs, fn=%p, fn_arg=%p, handler=%p, handler_arg=%p, flags=0x%X"
omrport.429 4 2 1 N Trc_PRT_signal_omrsignal_sig_protect_Exit_long_jumped_back_to_omrsig_protect " <omrsig_protect: Exiting after long jump back: fn=%p, fn_arg=%p, handler=%p, handler_arg=%p, flags=0x%X"
omrport.430 4 2 1 N Trc_PRT_signal_omrsignal_sig_protect_Exit_ERROR_accessing_tls " <omrsig_protect: Exiting: ERROR accessing tls: fn=%p, fn_arg=%p, handler=%p, handler_arg=%p, flags=0x%X"
omrport.431 4 1 2 N Trc_PRT_signal_omrsignal_sig_protect_Exit_after_returning_from_fn " <omrsig_protect: Exiting after returning from fn, fn=%p, fn_arg=%p, handler=%p, handler_arg=%p, flags=0x%X, result=0x%X"
omrport.432 0 1 1 N Trc_PRT_signal_registerSignalHandlerWithOS_registeredHandler "  registerSignalHandlerWithOS, registered signal handler with OS, portLibrarySignalNo=0x%X, unixSignalNo=0x%X, handler=%p"
omrport.433 0 1 1 N Trc_PRT_signal_registerSignalHandlerWithOS_failed_to_registerHandler "  registerSignalHandlerWithOS, FAILED to register signal handler with OS, portLibrarySignalNo=0x%X, unixSignalNo=0x%X, handler=%p"
omrport.434 2 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_entered " >omrsig_set_async_signal_handler: Entered, handler=%p, handler_arg=%p, flags=0x%X"
omrport.435 0 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_will_not_set_handler_due_to_Xrs "  omrsig_set_async_signal_handler: will not set handler due to Xrs, handler=%p, handler_arg=%p, flags=0x%X"
omrport.436 4 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_exiting_did_nothing_possible_error " <omrsig_set_async_signal_handler: Exiting, possible error, handler=%p, handler_arg=%p, flags=0x%X"
omrport.437 0 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_removed "  omrsig_set_async_signal_handler: user handler removed, handler=%p, handler_arg=%p, flags=0x%X"
omrport.438 0 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_added_1 "  omrsig_set_async_signal_handler: user handler added_1, handler=%p, handler_arg=%p, flags=0x%X"
omrport.439 0 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_added_2 "  omrsig_set_async_signal_handler: user handler added_2, handler=%p, handler_arg=%p, flags=0x%X"
omrport.440 4 1 1 N Trc_PRT_signal_omrsig_set_async_signal_handler_exiting " <omrsig_set_async_signal_handler: Exiting, handler=%p, handler_arg=%p, flags=0x%X"
omrport.441 0 1 1 N Trc_PRT_signal_omrsig_shutdown_empty_routine "  omrsig_shutdown: ERROR, empty shutdown routine indicates omrsig_startup failed, portLibrary=%p"
omrport.442 0 1 1 N Trc_PRT_signal_omrsig_set_options "  omrsig_set_options: options=0x%X"
omrport.443 0 1 1 N Trc_PRT_signal_omrsig_set_options_too_late_handlers_installed "  omrsig_set_options too late, handlers already installed: options=0x%X"
omrport.444 0 1 1 N Trc_PRT_signal_mapPortLibSignalToUnix_ERROR_unknown_signal "  omrsignal: mapPortLibSignalToUnix: ERROR, unknown signal, portLibSignal=0x%X"
omrport.445 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporterThread_going_to_sleep "  asynchSignalReporter: going to sleep"
omrport.446 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up "  asynchSignalReporter: woken up"
omrport.447 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGQUIT "  asynchSignalReporter: woken up for SIGQUIT"
omrport.448 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGABRT "  asynchSignalReporter: woken up for SIGABRT"
omrport.449 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGTERM "  asynchSignalReporter: woken up for SIGQUIT"
omrport.450 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGRECONFIG "  asynchSignalReporter: woken up for SIGRECONFIG"
omrport.451 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_shutdown "  asynchSignalReporter: woken up for shutdown"
omrport.452 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_calling_handler "  asynchSignalReporter: calling handler, portLib=%p, asyncSignalFlag=0x%X, handler_arg=%p"
omrport.453 0 1 1 N Trc_PRT_signal_setReporterPriority "  setReporterPriority: setting asynch thread priority, portLib=%p, priority=0x%X"
omrport.454 2 1 1 N Trc_PRT_signal_omrsig_startup_entered " >omrsig_startup: Entered, portLibrary=%p"
omrport.455 4 1 1 N Trc_PRT_signal_omrsig_startup_exiting " <omrsig_startup: Exiting, portLibrary=%p, result=%u"
omrport.456 2 1 2 N Trc_PRT_signal_omrsig_can_protect_entered " >omrsig_can_protect: Entered, flags=0x%x"
omrport.457 4 1 2 N Trc_PRT_signal_omrsig_can_protect_exiting_is_able_to_protect " <omrsig_can_protect: Exiting and is able to protect, supportedFlags=0x%X"
omrport.458 4 1 2 N Trc_PRT_signal_omrsig_can_protect_exiting_is_not_able_to_protect " <omrsig_can_protect: Exiting and is not able to protect, supportedFlags=0x%X"
omrport.459 2 1 1 N Trc_PRT_signal_sig_full_shutdown_enter " >sig_full_shutdown: Entered, portLibrary=%p"
omrport.460 0 1 1 N Trc_PRT_signal_sig_full_shutdown_deregistered_handler_with_OS "  sig_full_shutdown: deregistered handler with OS, portLibrary=%p, unixSignalNo=0x%X"
omrport.461 2 1 1 N Trc_PRT_signal_sig_full_shutdown_exiting " >sig_full_shutdown: Exiting, portLibrary=%p"
omrport.462 2 1 1 N Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_enter " >omrsig_chain_at_shutdown_and_exit: Entered, portLibrary=%p"
omrport.463 0 1 1 N Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_forwarding_to_omrsigHandler "  omrsig_chain_at_shutdown_and_exit: forwarding signal to omrsig handler, portLibrary=%p, unixSignalNo=0x%X"
omrport.464 2 1 1 N Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_exiting " >omrsig_chain_at_shutdown_and_exit: Exiting, portLibrary=%p"
omrport.465 0 1 1 N Trc_PRT_sig_can_protect_OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION_NOT_supported "  omrsig_can_protect OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION NOT supported"
omrport.466 0 1 1 N Trc_PRT_sig_can_protect_OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION_supported "  omrsig_can_protect OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION is supported"
omrport.467 1 1 1 N Trc_PRT_zos_omrsig_protect_using_ceehdlr_CEEHDLR_failed "* CEEHDLR failed with msgno: %u"
omrport.468 0 1 1 N Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGXFSZ "  asynchSignalReporter: woken up for SIGXFSZ"
omrport.469 2 1 10 N Trc_PRT_sl_close_shared_library_Entry " >omrsl_close_shared_library descriptor=%d"
omrport.470 4 1 10 N Trc_PRT_sl_close_shared_library_Exit " <omrsl_close_shared_library result=%d"
omrport.471 2 1 10 N Trc_PRT_sl_lookup_name_Entry " >omrsl_lookup_name descriptor=%d, name=%s, argSignature=%s"
omrport.472 4 1 10 N Trc_PRT_sl_lookup_name_Exit1 " <omrsl_lookup_name descriptor=%d"
omrport.473 4 1 10 N Trc_PRT_sl_lookup_name_Exit2 " <omrsl_lookup_name %s(%s) not found in %d, result=%d"
omrport.474 4 1 10 N Trc_PRT_sl_lookup_name_Exit3 " <omrsl_lookup_name could not allocate buffer of length=%d, result=%d"
omrport.475 2 1 10 N Trc_PRT_sl_open_shared_library_Entry " >omrsl_open_shared_library name=%s, flags=%d"
omrport.476 0 1 1 N Trc_PRT_sl_open_shared_library_Event1 "  omrsl_open_shared_library using mangledName %s"
omrport.477 4 1 10 N Trc_PRT_sl_open_shared_library_Exit1 " <omrsl_open_shared_library handle=%p"
omrport.478 4 1 10 N Trc_PRT_sl_open_shared_library_Exit2 " <omrsl_open_shared_library result=%d"
omrport.479 4 1 10 N Trc_PRT_sl_open_shared_library_Exit3 " <omrsl_open_shared_library could not allocate buffer of length=%d, result=%d"
omrport.480 0 1 10 N Trc_PRT_sl_open_shared_library_Event2 "  omrsl_open_shared_library OS error message: %s"
omrport.481 2 1 5 N Trc_PRT_vmem_omrvmem_reserve_memory_Entry " >omrvmem_reserve_memory address=%p byteAmount=%u"
omrport.482 1 1 3 N Trc_PRT_vmem_omrvmem_reserve_memory_Exit1 "* omrvmem_reserve_memory (invalid input)"
omrport.483 0 1 3 N Trc_PRT_vmem_omrvmem_reserve_memory_Exit2 "  omrvmem_reserve_memory (using default page allocator) returns %p"
omrport.484 4 1 5 N Trc_PRT_vmem_omrvmem_reserve_memory_Exit " <omrvmem_reserve_memory returns %p"
omrport.485 2 1 5 N Trc_PRT_vmem_omrvmem_free_memory_Entry " >omrvmem_free_memory userAddress=%p byteAmount=%u"
omrport.486 4 1 5 N Trc_PRT_vmem_omrvmem_free_memory_Exit " <omrvmem_free_memory returnCode=%d"
omrport.487 2 1 5 N Trc_PRT_vmem_omrvmem_commit_memory_Entry " >omrvmem_commit_memory address=%p byteAmount=%u"
omrport.488 4 1 5 N Trc_PRT_vmem_omrvmem_commit_memory_Exit " <omrvmem_commit_memory returns %p"
omrport.489 2 1 5 N Trc_PRT_vmem_omrvmem_decommit_memory_Entry " >omrvmem_decommit_memory address=%p byteAmount=%u"
omrport.490 4 1 5 N Trc_PRT_vmem_omrvmem_decommit_memory_Exit " <omrvmem_decommit_memory return code=%d"
omrport.491 1 1 10 N Trc_PRT_vmem_user_does_not_have_Lock_Pages_in_Memory_permission_in_local_security_policy_settings "* omrvmem_startup User does not have Lock_pages_in_memory permission in Local security policy settings"
omrport.492 2 1 1 N Trc_PRT_vmem_port_numa_interleave_memory_enter " >omrvmem port_numa_interleave_memory entry"
omrport.493 4 1 1 N Trc_PRT_vmem_port_numa_interleave_memory_exit " <omrvmem port_numa_interleave_memory Exit"
omrport.494 1 1 1 N Trc_PRT_vmem_port_numa_interleave_memory_mbind_failed "* omrvmem port_numa_interleave_memory mbind failed with errno: %d, strerror(errno): %s"
omrport.495 1 1 1 N Trc_PRT_vmem_numa_set_affinity_mbind_failed "* omrvmem vmem_numa_set_affinity mbind failed with errno: %d, strerror(errno): %s"
omrport.496 1 1 1 N Trc_PRT_vmem_port_numa_set_affinity_node_out_of_range "* omrvmem_numa_set_affinity : node %zu out of range"
omrport.497 1 1 1 N Trc_PRT_vmem_port_numa_set_affinity_node_not_present "* omrvmem_numa_set_affinity : node %zu not present"
omrport.498 0 1 1 N Trc_PRT_vmem_port_numa_numa_support_could_not_be_configured_at_startup "  omrvmem port_numa_interleave_memory: NUMA not available on this platform"
omrport.499 2 1 5 N Trc_PRT_vmem_default_reserve_entry " >default_pageSize_reserve_memory requestedAddress=%p byteAmount=%u"
omrport.500 0 1 5 N Trc_PRT_vmem_default_reserve_using_mem_allocate_memory "  default_pageSize_reserve_memory using omrmem_allocate_memory byteAmount=%u"
omrport.501 0 1 5 N Trc_PRT_vmem_default_reserve_using_mem_allocate_memory32 "  default_pageSize_reserve_memory using omrmem_allocate_memory32 byteAmount=%u"
omrport.502 1 1 1 N Trc_PRT_vmem_default_reserve_failed "* default_pageSize_reserve_memory FAILED requestedAddress=%p byteAmount=%u"
omrport.503 4 1 5 N Trc_PRT_vmem_default_reserve_exit " <default_pageSize_reserve_memory returns %p requestedAddress=%p byteAmount=%u"
omrport.504 2 1 5 N Trc_PRT_vmem_omrvmem_reserve_memory_Entry_replacement " >omrvmem_reserve_memory requestedAddress=%p byteAmount=%u pageSize=%u"
omrport.505 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_invalid_input "* omrvmem_reserve_memory (invalid input)"
omrport.506 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_unsupported_page_size "* omrvmem_reserve_memory (unsupported page size: %u)"
omrport.507 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_failure "* omrvmem_reserve_memory (failure)"
omrport.508 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_shmget_failed "* omrvmem_reserve_memory (shmget_failed) byteAmount=%u shmgetFlags=%i"
omrport.509 4 1 5 N Trc_PRT_vmem_omrvmem_reserve_memory_Exit_replacement " <omrvmem_reserve_memory returns %p requestedAddress=%p"
omrport.510 0 1 5 N Trc_PRT_vmem_omrvmem_free_memory_using_mem_free_memory "  omrvmem_free_memory using omrmem_free_memory userAddress=%p byteAmount=%u"
omrport.511 0 1 5 N Trc_PRT_vmem_omrvmem_free_memory_using_mem_free_memory32 "  omrvmem_free_memory using omrmem_free_memory32 userAddress=%p byteAmount=%u"
omrport.512 1 1 3 N Trc_PRT_vmem_omrvmem_reserve_memory_ex_UnableToAllocateWithinSpecifiedRange "* omrvmem_reserve_memory_ex (unable to allocate %u bytes within range [%p,%p])"
omrport.513 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_shmdt_failed "* omrvmem_reserve_memory (shmdt failed) address=%p"
omrport.514 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_ex_large_page_request_failed_reverting_to_default_page_size "* omrvmem_reserve_memory_ex_large_page_request_failed_reverting_to_default_page_size, byteAmout: %u, numPages: %u"
omrport.515 1 1 1 N Trc_PRT_vmem_omrvmem_startup_failed_to_close_dll "* Failed to close DLL Kernel32"
omrport.516 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_ex_aix_vmgetinfo_failed "* Trc_PRT_vmem_omrvmem_reserve_memory_ex_aix_vmgetinfo_failed address=%p"
omrport.517 1 1 1 N Trc_PRT_vmem_omrvmem_startup_pagessize_exceeds_physical_memory "* omrvmem_startup pagessize: 0x%zx exceeds physical memory: 0x%zx"
omrport.518 1 1 1 N Trc_PRT_vmem_omrvmem_commit_memory_invalidRange "* omrvmem_commit_memory requested an invalid range identifier->address=0x%zx, identifier->size=0x%zx, address=0x%zx, byteAmount=0x%zx"
omrport.519 1 1 1 N Trc_PRT_vmem_omrvmem_decommit_memory_invalidRange "* omrvmem_decommit_memory requested an invalid range identifier->address=0x%zx, identifier->size=0x%zx, address=0x%zx, byteAmount=0x%zx"
omrport.520 1 1 1 N Trc_PRT_vmem_omrvmem_commit_memory_mprotect_failure "* omrvmem_commit_memory mprotect failed, errno=%d"
omrport.521 1 1 1 N Trc_PRT_vmem_touchOnNumaNode_failedToBindToComputeResource "* touchOnNumaNode failed trying to bind to computational resource %zu on j9NumaNode %zu with system error code:  %zu"
omrport.522 1 1 1 N Trc_PRT_vmem_touchOnNumaNode_failedToReturnToComputeResource "* touchOnNumaNode failed trying to return its computational resource binding to the original (original: %zu, was temporarily: %zu) with system error code:  %zu"
omrport.523 1 1 1 N Trc_PRT_vmem_touchOnNumaNode_failedToBindToNodeForTouch "* touchOnNumaNode failed to touch any memory on j9NumaNode %zu as the thread couldn't migrate there"
omrport.524 2 1 1 N Trc_PRT_vmem_port_numa_set_affinity_enter " >omrvmem port_numa_set_affinity entry node=%zx address=%p byteAmount=%zx"
omrport.525 0 1 1 N Trc_PRT_vmem_port_numa_set_affinity_no_NUMA "  omrvmem_numa_set_affinity : NUMA not supported"
omrport.526 4 1 1 N Trc_PRT_vmem_port_numa_set_affinity_exit " <omrvmem port_numa_set_affinity Exit rc=%zi"
omrport.527 0 1 1 N Trc_PRT_vmem_decommit_memory_calling_disclaim "  omrvmem_decommit_memory calling disclaim, flags=%zu"
omrport.528 0 1 1 N Trc_PRT_vmem_decommit_memory_calling_msync "  omrvmem_decommit_memory calling msync, flags=%d"
omrport.529 2 1 5 N Trc_PRT_vmem_omrvmem_reserve_memory_Entry_replacement_v1 " >omrvmem_reserve_memory requestedAddress=%p byteAmount=%zu pageSize=%zu pageType=%zu"
omrport.530 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_parameter_mismatch "* omrvmem_reserve_memory Cannot request large page size for executable pages (mode=%zu) in 2-32GB range (options=%zu)"
omrport.531 0 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_unsupported_page_size_executable_largepages "  omrvmem_reserve_memory cannot allocate executable pages with page size=%zu, page flag=%zu"
omrport.532 2 1 5 N Trc_PRT_vmem_reserve1MPageableBelowBar_Entry " >reserve1MPageableBelowBar Entring with byteAmount=%zu"
omrport.533 4 1 5 N Trc_PRT_vmem_reserve1MPageableBelowBar_Exit " <reserve1MPageableBelowBar returns %p"
omrport.534 2 1 5 N Trc_PRT_vmem_reservePagesAboveBar_Entry " >reservePagesAboveBar Entring with byteAmount=%zu pageSize=%zu pageType=%zu options=%zu use2To32GArea=%zu"
omrport.535 0 1 1 N Trc_PRT_vmem_reservePagesAboveBar_allocate_4K_pages_in_2to32G_area "  reservePagesAboveBar Calling j9allocate_4K_pages_in_2to32G_area(%zu)"
omrport.536 0 1 1 N Trc_PRT_vmem_reservePagesAboveBar_allocate_large_2G_pages "  reservePagesAboveBar Calling j9allocate_large_2G_pages(%zu, %zu)"
omrport.537 0 1 1 N Trc_PRT_vmem_reservePagesAboveBar_allocate_large_pages "  reservePagesAboveBar Calling j9allocate_large_pages(%zu, %zu)"
omrport.538 0 1 1 N Trc_PRT_vmem_reservePagesAboveBar_allocate_large_pageable_pages_above_bar "  reservePagesAboveBar Calling j9allocate_large_pageable_pages_above_bar(%zu, %zu)"
omrport.539 4 1 5 N Trc_PRT_vmem_reservePagesAboveBar_Exit " <reservePagesAboveBar returns %p"
omrport.540 0 1 5 N Trc_PRT_vmem_omrvmem_free_memory_using_free_memory_below_bar "  omrvmem_free_memory using j9free_memory_below_bar userAddress=%p byteAmount=%zu"
omrport.541 0 1 5 N Trc_PRT_vmem_omrvmem_free_memory_using_free_memory_above_bar "  omrvmem_free_memory using j9free_memory_above_bar userAddress=%p byteAmount=%zu allocator=%zu"
omrport.542 1 1 3 N Trc_PRT_vmem_reservePages_UnableToAllocateWithinSpecifiedRange "* reservePages unable to allocate %zu bytes within range [%p,%p] with use2To32GArea flag set using large pages"
omrport.543 1 1 1 N Trc_PRT_vmem_omrvmem_initializeNumaGlobals_get_mempolicy_failure "* initializeNumaGlobals get_mempolicy failed, errno=%d"
omrport.544 1 1 1 N Trc_PRT_vmem_omrvmem_initializeNumaGlobals_get_allowed_mems_failure "* initializeNumaGlobals get_mempolicy with MPOL_F_MEMS_ALLOWED failed, errno=%d"
omrport.545 1 1 3 N Trc_PRT_vmem_omrvmem_reserve_memory_ex_UnableToReallocateWithLargePages "* omrvmem_reserve_memory_ex: unable to reallocate %u bytes at %p using large pages"
omrport.546 0 1 5 N Trc_PRT_vmem_decommit_memory_zero_pages "  omrvmem_decommit_memory after rounding off address and size, number of pages to decommit is zero"
omrport.547 0 1 5 N Trc_PRT_vmem_decommit_memory_not_allowed "  omrvmem_decommit_memory decommitting is not allowed as vmemAdviseOSonFree(=%zu) is not set"
omrport.548 1 1 1 N Trc_PRT_vmem_omrvmem_reserve_memory_shmat_failed2 "* omrvmem_reserve_memory (shmat failed) byteAmount=%u addressRange=%p-%p"
omrport.549 0 1 5 N Trc_PRT_vmem_default_reserve_low_using_4K_pages_below_bar "  default_pageSize_reserve_low_memory using STORAGE OBTAIN below bar, byteAmount=%u bytes"
omrport.550 0 1 5 N Trc_PRT_vmem_default_reserve_using_4K_pages_below_bar "  default_pageSize_reserve_memory using STORAGE OBTAIN below bar, byteAmount=%u bytes"
omrport.551 0 1 5 N Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar "  default_pageSize_reserve_memory using __moservices() above bar, byteAmount=%u MB"
omrport.552 1 1 1 N Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar_invalid_argument "* default_pageSize_reserve_memory passed invalid arguments to __moservices, return code = %d, errno2 = %d"
omrport.553 1 1 1 N Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar_iarv64_failed "* default_pageSize_reserve_memory iarv64 failed with return code=%d, reason code=%d"
omrport.554 1 1 1 N Trc_PRT_vmem_omrvmem_decommit_memory_failure "* omrvmem_decommit_memory failed with platform specific error code=%d at address=%p byteAmount=%u"
omrport.555 1 1 1 N Trc_PRT_vmem_get_available_physical_memory_failed "* get_available_physical_memory %s failed errno=%zd"
omrport.556 0 1 10 N Trc_PRT_vmem_get_available_physical_memory_result "  available_physical_memory = %llu"
omrport.557 2 1 10 N Trc_PRT_vmem_get_process_memory_enter " >omrvmem_get_process_memory_size query = %d"
omrport.558 1 1 1 N Trc_PRT_vmem_get_process_memory_failed "* omrvmem_get_process_memory_size %s failed errno=%zd"
omrport.559 4 1 10 N Trc_PRT_vmem_get_process_memory_exit " <omrvmem_get_process_memory_size status = %d result = %llu"
omrport.560 2 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_Entry " >getLimitSharedMemory entered"
omrport.561 4 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_Exit " <getLimitSharedMemory returning OMRPORT_LIMIT_LIMITED(%d), value = %lld"
omrport.562 4 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_ErrorExit " <getLimitSharedMemory error exit returning OMRPORT_LIMIT_UNKNOWN(%d), value = %lld"
omrport.563 1 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_invalidFileHandle "* getLimitSharedMemory invalid return from file open, errno = %d"
omrport.564 1 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_invalidRead "* getLimitSharedMemory invalid read or zero bytes read"
omrport.565 0 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_bytesRead "  getLimitSharedMemory %d bytes read from file, errno = %d"
omrport.566 0 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_maxSize "  getLimitSharedMemory shared memory maximum size = %lld (from buffer %s)"
omrport.567 1 1 1 N Trc_PRT_sysinfo_getLimitSharedMemory_notImplemented "* getLimitSharedMemory not implemented on this platform, returning OMRPORT_LIMIT_UNKNOWN(%d)"
omrport.568 1 1 1 N Trc_PRT_sysinfo_getLimit_unrecognised_resourceID "* get_limit given unrecognised resourceID %x"
omrport.569 0 1 3 N Trc_PRT_sysinfo_get_egid "  omrsysinfo_get_egid group=%d"
omrport.570 1 1 1 N Trc_PRT_sysinfo_get_CPU_utilization_invalidFileHandle "* get_CPU_utilization invalid return from file open, errno = %d"
omrport.571 1 1 1 N Trc_PRT_sysinfo_get_CPU_utilization_invalidRead "* get_CPU_utilization invalid read or zero bytes read"
omrport.572 0 1 3 N Trc_PRT_sysinfo_get_CPU_utilization_proc_stat_summary "  get_CPU_utilization summary line from proc/stat=%s"
omrport.573 0 1 3 N Trc_PRT_sysinfo_get_CPU_utilization_perfstat "  perfstat_cpu_total user = %llu sys = %llu ncpus = %d"
omrport.574 1 1 1 N Trc_PRT_sysinfo_get_CPU_utilization_timeFailed "* get_CPU_utilization omrtime call failed"
omrport.575 1 1 1 N Trc_PRT_sysinfo_get_CPU_utilization_perfstat_failed "* perfstat_cpu_total failed with errno=%d"
omrport.576 1 1 1 N Trc_PRT_sysinfo_unrecognized_Windows_version "* omrsysinfo_get_OS_type unrecognized Windows version: type=%d version=%d.%d"
omrport.577 2 1 5 N Trc_PRT_retrieveLinuxMemoryStats_Entered " >retrieveLinuxMemoryStats: Function entered."
omrport.578 1 1 1 N Trc_PRT_retrieveLinuxMemoryStats_failedOpeningMemFs "* retrieveLinuxMemoryStats: Failed opening /proc/meminfo. Error code = %i."
omrport.579 0 1 5 N Trc_PRT_retrieveLinuxMemoryStats_openedMemFs "  retrieveLinuxMemoryStats: Successfully opened /proc/meminfo for reading memory usage statistics."
omrport.580 1 1 1 N Trc_PRT_retrieveLinuxMemoryStats_invalidRangeFound "* retrieveLinuxMemoryStats: Value found for %s is out of range."
omrport.581 4 1 5 N Trc_PRT_retrieveLinuxMemoryStats_Exit " <retrieveLinuxMemoryStats: Return code = %i."
omrport.582 2 1 5 N Trc_PRT_retrieveAIXMemoryStats_Entered " >retrieveAIXMemoryStats: Function entered."
omrport.583 1 1 1 N Trc_PRT_retrieveAIXMemoryStats_perfstatFailed "* retrieveAIXMemoryStats: perfstat failed with return code = %i."
omrport.584 4 1 5 N Trc_PRT_retrieveAIXMemoryStats_Exit " <retrieveAIXMemoryStats: Return code = %i."
omrport.585 2 1 5 N Trc_PRT_sysinfo_get_memory_info_Entered " >omrsysinfo_get_memory_info: Function entered."
omrport.586 1 1 1 N Trc_PRT_sysinfo_get_memory_info_memStatFailed "* omrsysinfo_get_memory_info: Error: GlobalMemoryStatusEx() failed with error code = %i."
omrport.587 1 1 1 N Trc_PRT_sysinfo_get_memory_info_pdhOpenQueryFailed "* omrsysinfo_get_memory_info: Error: pdh handle creation failure = %d."
omrport.588 1 1 1 N Trc_PRT_sysinfo_get_memory_info_failedAddingCounter "* omrsysinfo_get_memory_info: Error: Failed adding %s memory counter. Error code = %d"
omrport.589 1 1 1 N Trc_PRT_sysinfo_get_memory_info_dataQueryFailed "* omrsysinfo_get_memory_info: Error: Failed collecting data."
omrport.590 4 1 5 N Trc_PRT_sysinfo_get_memory_info_Exit " <omrsysinfo_get_memory_info: Return code = %d."
omrport.591 2 1 5 N Trc_PRT_retrieveLinuxProcessorStats_Entered " >retrieveLinuxProcessorStats: Function entered."
omrport.592 1 1 1 N Trc_PRT_retrieveLinuxProcessorStats_failedOpeningProcFs "* retrieveLinuxProcessorStats: Failed opening /proc/cpustat. Error code = %i."
omrport.593 0 1 5 N Trc_PRT_retrieveLinuxProcessorStats_openedProcFs "  retrieveLinuxProcessorStats: Successfully opened /proc/cpustat for reading processor usage statistics."
omrport.594 1 1 1 N Trc_PRT_retrieveLinuxProcessorStats_memAllocFailed "* retrieveLinuxProcessorStats: Memory allocation failed."
omrport.595 1 1 1 N Trc_PRT_retrieveLinuxProcessorStats_unexpectedReadError "* retrieveLinuxProcessorStats: unexpected I/O error = %i."
omrport.596 1 1 1 N Trc_PRT_retrieveLinuxProcessorStats_unexpectedCpuCount "* retrieveLinuxProcessorStats: expected CPU count = %i, found = %i."
omrport.597 4 1 5 N Trc_PRT_retrieveLinuxProcessorStats_Exit " <retrieveLinuxProcessorStats: Return code = %i."
omrport.598 2 1 5 N Trc_PRT_retrieveAIXProcessorStats_Entered " >retrieveAIXProcessorStats: Function entered."
omrport.599 1 1 1 N Trc_PRT_retrieveAIXProcessorStats_memAllocFailed "* retrieveAIXProcessorStats: Memory allocation failed."
omrport.600 1 1 1 N Trc_PRT_retrieveAIXProcessorStats_perfstatFailed "* retrieveAIXProcessorStats: perfstat interface failed with code = %i."
omrport.601 1 1 1 N Trc_PRT_retrieveAIXProcessorStats_unexpectedCpuCount "* retrieveAIXProcessorStats: expected CPU count = %i, found = %i."
omrport.602 4 1 5 N Trc_PRT_retrieveAIXProcessorStats_Exit " <retrieveAIXProcessorStats: Return code = %i."
omrport.603 2 1 5 N Trc_PRT_sysinfo_get_processor_info_Entered " >omrsysinfo_get_processor_info: Function entered."
omrport.604 1 1 1 N Trc_PRT_sysinfo_get_processor_info_categoryAllocFailed "* omrsysinfo_get_processor_info: Error: failed allocating memory for %i categories of %s counters."
omrport.605 1 1 1 N Trc_PRT_sysinfo_get_processor_info_memAllocFailed "* omrsysinfo_get_processor_info: Error: memory allocation for processor array failed."
omrport.606 1 1 1 N Trc_PRT_sysinfo_get_processor_info_pdhOpenQueryFailed "* omrsysinfo_get_processor_info: PdhOpenQuery() failed = %i."
omrport.607 1 1 1 N Trc_PRT_sysinfo_get_processor_info_failedAddingCounter "* omrsysinfo_get_processor_info: Failed adding %s counter."
omrport.608 1 1 1 N Trc_PRT_sysinfo_get_processor_info_failedCollectingPdhData "* omrsysinfo_get_processor_info: PdhCollectQueryData() failed."
omrport.609 4 1 5 N Trc_PRT_sysinfo_get_processor_info_Exit " <omrsysinfo_get_processor_info: Return code = %i."
omrport.610 2 1 5 N Trc_PRT_sysinfo_destroy_processor_info_Entered " >omrsysinfo_destroy_processor_info: Function entered."
omrport.611 4 1 5 N Trc_PRT_sysinfo_destroy_processor_info_Exit " <omrsysinfo_destroy_processor_info: Exiting function."
omrport.612 1 1 1 N Trc_PRT_sysinfo_get_number_CPUs_by_type_failedPhysical "* omrsysinfo_get_number_CPUs_by_type: Error: Could not get physical CPUs - %s%d"
omrport.613 1 1 1 N Trc_PRT_sysinfo_get_number_CPUs_by_type_failedBound "* omrsysinfo_get_number_CPUs_by_type: Error: Could not get bound CPUs - %s%d"
omrport.614 1 1 1 N Trc_PRT_sysinfo_get_number_CPUs_by_type_invalidType "* omrsysinfo_get_number_CPUs_by_type: Error: Invalid type argument."
omrport.615 0 1 5 N Trc_PRT_sysinfo_get_number_CPUs_by_type_platformNotSupported "  omrsysinfo_get_number_CPUs_by_type: Platform not supported."
omrport.616 2 1 5 N Trc_PRT_sysinfo_get_number_CPUs_by_type_Entered " >omrsysinfo_get_number_CPUs_by_type: Function entered."
omrport.617 4 1 5 N Trc_PRT_sysinfo_get_number_CPUs_by_type_Exit " <omrsysinfo_get_number_CPUs_by_type: Exiting function - Type %d returned %d."
omrport.618 2 1 5 N Trc_PRT_sysinfo_set_number_entitled_CPUs_Entered " >omrsysinfo_set_number_entitled_CPUs: Function entered."
omrport.619 4 1 5 N Trc_PRT_sysinfo_set_number_entitled_CPUs_Exit " <omrsysinfo_set_number_entitled_CPUs: Exiting function. Entitled CPUs set to %d."
omrport.620 1 1 1 N Trc_PRT_sysinfo_get_number_CPUs_by_type_failedOnline "* omrsysinfo_get_number_CPUs_by_type: Error: Could not get online CPUs - %s%d"
omrport.621 2 1 5 N Trc_PRT_sysinfo_get_limit_Entered " >omrsysinfo_get_limit: resourceID = %d"
omrport.622 1 1 1 N Trc_PRT_sysinfo_getrlimit_error "* getrlimit failed, resource=%d errno=%d"
omrport.623 4 1 5 N Trc_PRT_sysinfo_get_limit_Exit " <omrsysinfo_get_limit: Return code = %d"
omrport.624 2 1 5 N Trc_PRT_sysinfo_set_limit_Entered " >omrsysinfo_set_limit: resourceID = %d, limit = %llu"
omrport.625 1 1 1 N Trc_PRT_sysinfo_setrlimit_error "* setrlimit failed, resource=%d limit=%llu, errno=%d"
omrport.626 1 1 1 N Trc_PRT_sysinfo_setLimit_unrecognised_resourceID "* omrsysinfo_set_limit given unrecognised resourceID %x"
omrport.627 1 1 1 N Trc_PRT_sysinfo_sysparm_error "* sys_parm failed, errno=%d"
omrport.628 4 1 5 N Trc_PRT_sysinfo_set_limit_Exit " <omrsysinfo_set_limit: Return code = %d"
omrport.629 2 1 5 N Trc_PRT_retrieveZOSMemoryStats_Entered " >retrieveZOSMemoryStats: Function entered."
omrport.630 4 1 5 N Trc_PRT_retrieveZOSMemoryStats_Exit " <retrieveZOSMemoryStats: Returning with error code = %d."
omrport.631 2 1 5 N Trc_PRT_retrieveZOSProcessorStats_Entered " >retrieveZOSProcessorStats: Function entered."
omrport.632 4 1 5 N Trc_PRT_retrieveZOSProcessorStats_Exit " <retrieveZOSProcessorStats: Returning with error code = %d."
omrport.633 1 1 1 N Trc_PRT_getZFSClientCacheSize_StatsFailure "* getZFSClientCacheSize: Failed querying client cache size (BPXRV = %d BPXRC = 0x%0x BPXRS = 0x%0x)."
omrport.634 1 1 1 N Trc_PRT_getZFSClientCacheSize_MallocFailure "* getZFSClientCache: Failed to allocate memory for string conversion."
omrport.635 1 1 1 N Trc_PRT_getZFSUserCacheUsed_StatsFailure "* getZFSUserCacheUsed: Failed querying user cache stats (BPXRV = %d BPXRC = 0x%0x BPXRS = 0x%0x)."
omrport.636 1 1 1 N Trc_PRT_getZFSUserCacheUsed_MallocFailure "* getZFSUserCacheUsed: Failed to allocate memory for string conversion."
omrport.637 1 1 1 N Trc_PRT_getZFSMetaCacheSize_StatsFailure "* getZFSMetaCacheSize: Failed querying meta cache stats (BPXRV = %d BPXRC = 0x%0x BPXRS = 0x%0x)."
omrport.638 1 1 1 N Trc_PRT_getZFSMetaCacheSize_MallocFailure "* getZFSMetaCacheSize: Failed to allocate memory for string conversion."
omrport.639 0 1 5 N Trc_PRT_retrieveZOSMemoryStats_memUsageStats_v1 "  retrieveZOSMemoryStats: total=%zu, avail=%zu, total-swap=%zu, avail-swap=%zu, cached=%zu buffered=%zu."
omrport.640 0 1 5 N Trc_PRT_retrieveZOSProcessorStats_cpuUsageStats_v1 "  retrieveZOSProcessorStats: idle-time=%zu busy-time=%zu."
omrport.641 0 1 3 N Trc_PRT_sysinfo_get_CPU_utilization_GST_result "  GetSystemTimes processor %s time = %lld"
omrport.642 1 1 1 N Trc_PRT_sysinfo_get_CPU_utilization_GetSystemTimesFailed "* GetSystemTimes failed, GetLastError = %u"
omrport.643 1 1 1 N Trc_PRT_sysinfo_get_cwd_failed_getcurrentdirectory "* omrsysinfo_get_cwd: Get current directory failed. Error code = %d."
omrport.644 1 1 1 N Trc_PRT_sysinfo_get_cwd_oome "* omrsysinfo_get_cwd: failed to allocate memory."
omrport.645 1 1 1 N Trc_PRT_sysinfo_get_cwd_failed_unicode_to_utf8 "* omrsysinfo_get_cwd: failed to convert unicode to utf8."
omrport.646 1 1 1 N Trc_PRT_sysinfo_get_tmp_failed_gettemppathw "* omrsysinfo_get_tmp: Get temporary directory failed. Error code = %d."
omrport.647 1 1 1 N Trc_PRT_sysinfo_get_tmp_oome "* omrsysinfo_get_tmp: failed to allocate memory."
omrport.648 2 1 3 N Trc_PRT_sysinfo_get_groups_Entry " >omrsysinfo_get_groups entered"
omrport.649 1 1 1 N Trc_PRT_sysinfo_get_groups_Error_GetGroupsSize "* omrsysinfo_get_groups failed to get size of the group id list with errno=%zi"
omrport.650 1 1 1 N Trc_PRT_sysinfo_get_groups_Error_ListAllocateFailed "* omrsysinfo_get_groups failed to allocate memory for group id list of size=%zi"
omrport.651 1 1 1 N Trc_PRT_sysinfo_get_groups_Error_GetGroups "* omrsysinfo_get_groups getgroups() failed with errno=%zi"
omrport.652 4 1 1 N Trc_PRT_sysinfo_get_groups_Exit " <omrsysinfo_get_groups returns %zi, supplementary group id list=%p"
omrport.653 1 1 1 N Trc_PRT_find_executable_name_failedOpeningProcFS "* omrsysinfo_get_executable_name: failed to open /proc file system; error=%d"
omrport.654 1 1 1 N Trc_PRT_find_executable_name_invalidRead "* omrsysinfo_get_executable_name: failed to read /proc file system; error=%d"
omrport.655 1 1 1 N Trc_PRT_sysinfo_get_tmp_failed_str_covert "* omrsysinfo_get_tmp: omrstr_convert() failed to convert unicode to modified utf8 with error code=%d"
omrport.656 1 1 1 N Trc_PRT_omrsyslog_failed_str_convert "* omrsyslog_write: Failed to convert encoding of syslog message (error returned = %d)"
omrport.657 0 1 5 N Trc_PRT_j9nls_vprintf "  J9 VM NLS message: %s"
omrport.658 0 1 1 N Trc_PRT_PortInitStages_Event1 "  Trace engine initialized for module j9port"
omrport.659 0 1 5 N Trc_PRT_sysinfo_get_processor_info_allocatedCPUs "  j9sysinfo_get_processor_info: allocated space for %i CPUs (including a global record)."
omrport.660 0 1 5 N Trc_PRT_sysinfo_get_processor_info_retryCount "  j9sysinfo_get_processor_info: attempted obtaining CPU stats; retry count=%i."
omrport.661 1 1 1 N Trc_PRT_sysinfo_get_processor_info_cpuCountUnstable "* j9sysinfo_get_processor_info: the CPU count is unstable."
omrport.662 1 1 1 N Trc_PRT_sysinfo_failed_to_get_os_type "* omrsysinfo_get_OS_type failed to get OS type"
omrport.663 0 1 4 N Trc_PRT_introspect_suspendWithSignal "  sending signal %d to all threads"
omrport.664 1 1 1 N Trc_PRT_cuda_initDeviceData_fail2 "* omrcuda initDeviceData: failed to %s current device, error=%d"
omrport.665 1 1 1 N Trc_PRT_cuda_reset_fail1 "* omrcuda resetDevices: failed to %s current device, error=%d"
omrport.666 1 1 1 N Trc_PRT_cuda_reset_fail2 "* omrcuda resetDevices: failed to reset device=%u, error=%d"
omrport.667 2 1 5 N Trc_PRT_sysinfo_get_open_file_count_Entry " >omrsysinfo_get_open_file_count: Entry."
omrport.668 1 1 1 N Trc_PRT_sysinfo_get_open_file_count_invalidArgRecvd "* omrsysinfo_get_open_file_count received invalid argument: %s."
omrport.669 1 1 1 N Trc_PRT_sysinfo_get_open_file_count_failedOpeningProcFS "* omrsysinfo_get_open_file_count failed opening /proc = %d."
omrport.670 1 1 1 N Trc_PRT_sysinfo_get_open_file_count_failedReadingProcFS "* omrsysinfo_get_open_file_count failed reading /proc = %d."
omrport.671 0 1 5 N Trc_PRT_sysinfo_get_open_file_count_fileCount "  omrsysinfo_get_open_file_count files opened by this process=%llu."
omrport.672 4 1 5 N Trc_PRT_sysinfo_get_open_file_count_Exit " <omrsysinfo_get_open_file_count: Return = %d."
omrport.673 2 1 5 N Trc_PRT_filestream_open_Entry " >omrfilestream_open filename = %s, flags = %d, perm = %d"
omrport.674 4 1 5 N Trc_PRT_filestream_open_Exit " <omrfilestream_open returns fileStream %p"
omrport.675 1 1 5 N Trc_PRT_filestream_open_invalidOpenFlags "* omrfilestream_open flags invalid filename = %s, flags = %d, perm = %d"
omrport.676 1 1 5 N Trc_PRT_filestream_open_failedToOpen "* omrfilestream_open Failed to open file. filename = %s, flags = %d, perm = %d, errorCode = %d"
omrport.677 1 1 5 N Trc_PRT_filestream_open_fdopenFailed "* omrfilestream_open flags invalid filename = %s, flags = %d, perm = %d, errorCode = %d"
omrport.678 1 1 5 N Trc_PRT_filestream_open_invalidPath "* omrfilestream_open flags invalid filename = %s, flags = %d, perm = %d"
omrport.679 2 1 5 N Trc_PRT_filestream_close_Entry " >omrfilestream_close fileStream = %p"
omrport.680 4 1 5 N Trc_PRT_filestream_close_Exit " <omrfilestream_close returns code = %d"
omrport.681 1 1 5 N Trc_PRT_filestream_close_invalidFileStream "* omrfilestream_close Invalid fileStream. fileStream = %p"
omrport.682 1 1 5 N Trc_PRT_filestream_close_failedToClose "* omrfilestream_close Failed to close fileStream. fileStream = %p errorCode = %d"
omrport.683 2 1 5 N Trc_PRT_filestream_sync_Entry " >omrfilestream_sync fileStream = %p"
omrport.684 4 1 5 N Trc_PRT_filestream_sync_Exit " <omrfilestream_sync returns code = %d"
omrport.685 1 1 5 N Trc_PRT_filestream_sync_invalidFileStream "* omrfilestream_sync Invalid fileStream. fileStream = %p"
omrport.686 1 1 5 N Trc_PRT_filestream_sync_failedToFlush "* omrfilestream_sync Failed to flush stream. fileStream = %p returnCode = %d"
omrport.687 2 1 5 N Trc_PRT_filestream_write_Entry " >omrfilestream_write fileStream = %p, buf = %p, nbytes = %zd"
omrport.688 4 1 5 N Trc_PRT_filestream_write_Exit " <omrfilestream_write returns code = %zd"
omrport.689 1 1 5 N Trc_PRT_filestream_write_invalidArgs "* omrfilestream_write invalid arguments fileStream = %p, buf = %p, nbytes = %zd"
omrport.690 1 1 5 N Trc_PRT_filestream_write_failedToWrite "* omrfilestream_write Failed to write to fileStream. fileStream = %p, buf = %p, nbytes = %zd, errorCode = %d"
omrport.691 2 1 5 N Trc_PRT_filestream_write_text_Entry " >omrfilestream_write_text fileStream = %p, buf = %p, nbytes = %zd, toEncoding = %d"
omrport.692 4 1 5 N Trc_PRT_filestream_write_text_Exit " <omrfilestream_write_text returns code = %zd"
omrport.693 1 1 5 N Trc_PRT_filestream_write_text_invalidArgs "* omrfilestream_write_text invalid arguments fileStream = %p, buf = %p, nbytes = %zd, toEncoding = %d"
omrport.694 1 1 5 N Trc_PRT_filestream_write_text_failedMalloc "* omrfilestream_write_text Failed to malloc. fileStream = %p, buf = %p, nbytes = %zd, requiredBufferSize = %zu"
omrport.695 1 1 5 N Trc_PRT_filestream_write_text_failedToWrite "* omrfilestream_write_text Failed to write to fileStream. fileStream = %p, writingFrom = %p, byteCount = %zd, errorCode = %zd"
omrport.696 1 1 5 N Trc_PRT_filestream_write_text_failedStringTransliteration "* omrfilestream_write_text failed to transliterate the string to platform encoding. fileStream = %p, buf = %p, nbytes = %zd, toEncoding = %d, errorCode = %d"
omrport.697 2 1 5 N Trc_PRT_filestream_vprintf_Entry " >omrfilestream_vpritnf fileStream = %p, format = %s"
omrport.698 4 1 5 N Trc_PRT_filestream_vprintf_Exit " <omrfilestream_vprintf exit"
omrport.699 0 1 5 N Trc_PRT_filestream_vprintf_stackBufferNotBigEnough "  omrfilestream_vprintf Stack buffer not large enough. fileStream = %p, format = %s, requiredBufferSize = %zu"
omrport.700 1 1 5 N Trc_PRT_filestream_vprintf_invalidArgs "* omrfilestream_vprintf Invalid arguments. fileStream = %p, format = %s"
omrport.701 1 1 5 N Trc_PRT_filestream_vprintf_failedMalloc "* omrfilestream_vprintf Failed to malloc. fileStream = %p, format = %s, requiredBufferSize = %zu"
omrport.702 2 1 5 N Trc_PRT_filestream_printf_Entry " >omrfilestream_printf fileStream = %p, format = %s"
omrport.703 4 1 5 N Trc_PRT_filestream_printf_Exit " <omrfilestream_printf exit"
omrport.704 2 1 5 N Trc_PRT_filestream_setbuffer_Entry " >omrfilestream_setbuffer fileStream = %p, buffer = %p, mode = %d, size = %zu"
omrport.705 4 1 5 N Trc_PRT_filestream_setbuffer_Exit " <omrfilestream_setbuffer returns code = %d"
omrport.706 1 1 5 N Trc_PRT_filestream_setbuffer_invalidArgs "* omrfilestream_setbuffer Invalid arguments. fileStream = %p, buffer = %p, mode = %d, size = %zu"
omrport.707 1 1 5 N Trc_PRT_filestream_setbuffer_failed "* omrfilestream_setbuffer Failed. fileStream = %p, buffer = %p, mode = %d, size = %zu"
omrport.708 2 1 5 N Trc_PRT_filestream_fdopen_Entry " >omrfilestream_fdopen fd = %zd, flags = %d"
omrport.709 4 1 5 N Trc_PRT_filestream_fdopen_Exit " <omrfilestream_fdopen Returns stream = %p"
omrport.710 1 1 5 N Trc_PRT_filestream_fdopen_invalidArgs "* omrfilestream_fdopen Invalid arguments. fd = %zd, flags = %d"
omrport.711 1 1 5 N Trc_PRT_filestream_fdopen_failed "* omrfilestream_fdopen Failed. fd = %zd, flags = %d, errorCode = %d"
omrport.712 2 1 5 N Trc_PRT_filestream_fileno_Entry " >omrfilestream_fileno fileStream = %p"
omrport.713 4 1 5 N Trc_PRT_filestream_fileno_Exit " <omrfilestream_fileno Returns filedescriptor = %zd"
omrport.714 1 1 5 N Trc_PRT_filestream_fileno_invalidArgs "* omrfilestream_fileno Invalid arguments. fileStream = %p"
omrport.715 1 1 5 N Trc_PRT_filestream_fileno_failed "* omrfilestream_fileno Failed. fileStream = %p, errorCode = %d"
omrport.716 0 1 5 N Trc_PRT_vmem_omrvmem_free_memory_using_moservices "  omrvmem_free_memory using moservices userAddress=%p byteAmount=%zu allocator=%zu"
omrport.717 2 1 5 N Trc_PRT_vmem_reserve_using_moservices_entry " >reserve_memory_with_moservices pageSize=%zu byteAmount=%u"
omrport.718 1 1 3 N Trc_PRT_vmem_reserve_memory_using_moservices_invalid_page_size "* omrvmem_reserve_memory invalid page pageSize=%zu"
omrport.719 1 1 3 N Trc_PRT_vmem_reserve_memory_using_moservices_invalid_page_flags "* omrvmem_reserve_memory invalid page pageSize=%zu pageFlags=0x%x"
omrport.720 1 1 1 N Trc_PRT_vmem_reserve_using_moservices_invalid_argument "* reserve_memory_with_moservices passed invalid arguments to __moservices, return code = %d, errno2 = %d"
omrport.721 1 1 1 N Trc_PRT_vmem_reserve_using_moservices_failed "* reserve_memory_with_moservices iarv64 failed with return code=%d, reason code=%d"
omrport.722 4 1 5 N Trc_PRT_vmem_reserve_using_moservices_exit " <reserve_memory_with_moservices returns %p byteAmount=%u"
omrport.723 1 1 1 N Trc_PRT_vmem_omrvmem_decommit_nonpageable_memory "* omrvmem_decommit_memory attemp to decommit non-pageable memory at address=%p byteAmount=%u"
omrport.724 4 1 1 N Trc_PRT_mmap_map_seek_failed " <omrmmap_map_file: Failed to seek to offset = %lld"
omrport.725 2 1 5 N Trc_PRT_sysinfo_get_os_description_Entered " >sysinfo_get_os_description: desc = %p"
omrport.726 4 1 5 N Trc_PRT_sysinfo_get_os_description_Exit " <sysinfo_get_os_description: returning with %zd"
omrport.727 2 1 5 N Trc_PRT_sysinfo_os_has_feature_Entered " >sysinfo_os_has_feature: desc = %p, feature = %d"
omrport.728 4 1 5 N Trc_PRT_sysinfo_os_has_feature_Exit " <sysinfo_os_has_feature: returning with %zu."
